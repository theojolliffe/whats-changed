
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity$5 = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.43.1' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/ui/Warning.svelte generated by Svelte v3.43.1 */

    const file$D = "src/ui/Warning.svelte";

    function create_fragment$H(ctx) {
    	let div;
    	let strong;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			strong = element("strong");
    			strong.textContent = "Warning!";
    			t1 = text(" This prototype uses 2011 data in lieu of the latest Census 2021 data. Data are likely to contain inaccuracies.");
    			add_location(strong, file$D, 1, 2, 24);
    			attr_dev(div, "class", "warning svelte-srzfvi");
    			add_location(div, file$D, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, strong);
    			append_dev(div, t1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Warning', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Warning> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Warning extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Warning",
    			options,
    			id: create_fragment$H.name
    		});
    	}
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear(year) {
      return year < 0 ? "-" + pad(-year, 6)
        : year > 9999 ? "+" + pad(year, 6)
        : pad(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
          : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
          : "");
    }

    function dsv(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
      };
    }

    var csv = dsv(",");

    var csvParse = csv.parse;

    function autoType(object) {
      for (var key in object) {
        var value = object[key].trim(), number, m;
        if (!value) value = null;
        else if (value === "true") value = true;
        else if (value === "false") value = false;
        else if (value === "NaN") value = NaN;
        else if (!isNaN(number = +value)) value = number;
        else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
          if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
          value = new Date(value);
        }
        else continue;
        object[key] = value;
      }
      return object;
    }

    // https://github.com/d3/d3-dsv/issues/45
    const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

    const ordinal$1 = i => {
    	if (i < 10) {
    		return [
    			'',
    			'first',
    			'second',
    			'third',
    			'fourth',
    			'fifth',
    			'sixth',
    			'seventh',
    			'eighth',
    			'ninth'
    		][i];
    	}

    	const j = i % 10;
    	const k = i % 100;
    	if (j === 1 && k !== 11) {
    		return i + 'st';
    	}

    	if (j === 2 && k !== 12) {
    		return i + 'nd';
    	}

    	if (j === 3 && k !== 13) {
    		return i + 'rd';
    	}

    	return i + 'th';
    };

    // https://stackoverflow.com/a/2901298/3347737
    const numberWithCommas = x => x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

    const possessive = s => {
    	if (s[s.length - 1] === 's') {
    		return s + '\'';
    	}

    	return s + '\'s';
    };

    const createText = (template, dict) => {
    	// This is based on Douglas Crockford's old json_parse https://github.com/douglascrockford/JSON-js/blob/03157639c7a7cddd2e9f032537f346f1a87c0f6d/json_parse.js

    	if (typeof template !== 'string') {
    		throw new TypeError(`Expected a string, got ${typeof template}`);
    	}

    	let at = 1;
    	let ch = template.charAt(0);

    	const getCh = function () {
    		// Just to keep xo happy
    		return ch;
    	};

    	const error = function (m) {
    		throw JSON.stringify({
    			name: 'Robo-journalist error',
    			message: m,
    			at,
    			text: template
    		});
    	};

    	const next = function (c) {
    		// If a c parameter is provided, verify that it matches the current character.
    		if (c && c !== ch) {
    			error('Expected \'' + c + '\' instead of \'' + ch + '\'');
    		}

    		// Get the next character. When there are no more characters,
    		// return the empty string.
    		ch = template.charAt(at);
    		at += 1;
    		return ch;
    	};

    	const getValue = function (key) {
    		const parts = key.split('.');
    		let d = dict;
    		for (const part of parts) {
    			try {
    				d = d[part];
    			} catch {
    				error(`${key} is not in the data dictionary.`);
    			}
    		}

    		return d;
    	};

    	const rpn = function (key) {
    		const tokens = key.split(' ');
    		const operators = {
    			'+': (a, b) => a + b,
    			'-': (a, b) => a - b,
    			'*': (a, b) => a * b,
    			'/': (a, b) => a / b,
    			'<': (a, b) => a < b,
    			'>': (a, b) => a > b,
    			'<=': (a, b) => a <= b,
    			'>=': (a, b) => a >= b
    		};
    		const stack = [];
    		for (const token of tokens) {
    			if (/^-?\d+$/.test(token)) {
    				// An integer literal
    				stack.push(Number(token));
    			} else if (token in operators) {
    				const b = Number(stack.pop());
    				const a = Number(stack.pop());
    				stack.push(operators[token](a, b));
    			} else if (token === '\'') {
    				stack[stack.length - 1] = possessive(stack[stack.length - 1]);
    			} else if (token === ',') {
    				stack[stack.length - 1] = numberWithCommas(stack[stack.length - 1]);
    			} else if (token === '.0') {
    				stack[stack.length - 1] = stack[stack.length - 1].toFixed(0);
    			} else if (token === '.1') {
    				stack[stack.length - 1] = stack[stack.length - 1].toFixed(1);
    			} else if (token === '.2') {
    				stack[stack.length - 1] = stack[stack.length - 1].toFixed(2);
    			} else if (token === '~abs') {
    				stack[stack.length - 1] = Math.abs(stack[stack.length - 1]);
    			} else if (token === '~ord') {
    				stack[stack.length - 1] = ordinal$1(Number(stack[stack.length - 1]));
    			} else if (token === '~ord\'') {
    				let result = ordinal$1(Number(stack.pop()));
    				if (result === 'first') {
    					result = '';
    				} else {
    					result += ' ';
    				}

    				stack.push(result);
    			} else if (token.charAt(0) === '^') {
    				stack[stack.length - 1] = getValue(token.slice(1))(stack[stack.length - 1]);
    			} else {
    				stack.push(getValue(token));
    			}
    		}

    		if (stack.length !== 1) {
    			error('Invalid RPN');
    		}

    		return stack[0];
    	};

    	const eitherOr = function (which) {
    		next('?');
    		const first = parse();
    		next(':');
    		const second = parse();
    		next('}');
    		return which ? first : second;
    	};

    	const braced = function () {
    		next('{');
    		if (ch === ':') {
    			// {:} adds a colon to the output
    			next(':');
    			next('}');
    			return ':';
    		}

    		let varName = '';
    		while (getCh()) {
    			if (ch === '}') {
    				next('}');
    				return rpn(varName);
    			}

    			if (ch === '?') {
    				return eitherOr(rpn(varName));
    			}

    			varName += ch;
    			next();
    		}

    		error('Braces not closed');
    	};

    	const parse = function () {
    		let result = '';
    		while (getCh()) {
    			if (ch === ':' || ch === '}') {
    				return result;
    			}

    			if (ch === '{') {
    				result += braced();
    				continue;
    			}

    			result += ch;
    			next();
    		}

    		return result;
    	};

    	const result = parse();
    	if (ch !== '') {
    		error(`Didn't expect '${ch}'`);
    	}

    	return result;
    };

    async function getData(url) {
      let response = await fetch(url);
      let string = await response.text();
    	let data = await csvParse(string, autoType);
      return data;
    }

    let chains = {
      'good': ['bad', 'fair'],
      'bad': ['good', 'fair'],
      'white': ['black', 'asian'],
      'black': ['white', 'asian'],
      'asian': ['white', 'black'],
      'rented_private': ['rented_social', 'owned'],
      'rented_social': ['rented_private', 'owned'],
      'owned': ['rented_private', 'rented_social'],
      'student': ['employee', 'unemployed', 'self-employed'],
      'self-employed': ['employee', 'unemployed', 'student'],
      'employee': ['unemployed', 'self-employed', 'student',],
      'unemployed': ['employee', 'self-employed', 'student'],
      'car_van': ['bus', 'train_metro', 'foot', 'home'],
      'bus': ['car_van', 'train_metro', 'foot', 'home'],
      'train_metro': ['bus', 'car_van', 'foot', 'home'],
      'foot': ['bus', 'train_metro', 'car_van', 'home'],
      'home': ['bus', 'train_metro', 'foot', 'car_van'],
      'OnePerson': ['Cohabiting', 'Married'],
      'Cohabiting': ['OnePerson', 'Married'],
      'LoneParent': ['Married', 'Cohabiting'],
      'Christian': ['Muslim', 'Noreligion'],
      'Muslim': ['Christian', 'Noreligion'],
      'Noreligion': ['Christian', 'Muslim'],
      'Buddhist': ['Hindu', 'Sikh'],
      'Hindu': ['Sikh', 'Buddhist'],
      'Jewish': ['Christian', 'Muslim'],
      'Sikh': ['Hindu', 'Buddhist'],
      'Single': ['Married', 'Seperated'],
      'Married': ['Single', 'Seperated'],
      'Seperated': ['Married', 'Single'],
      '40PlushoursWeek': ['20to49hoursWeek'],
      '20to49hoursWeek': ['40PlushoursWeek'],
      'Kids': ['NoKids', 'NonDepKids'],
      'NoKids': ['Kids', 'NonDepKids'],
      'NonDepKids': ['Kids', 'NoKids'],
      'Male1-15': ['Male49plus'],
      'Male49plus': ['Male1-15'],
      'Female1-15': ['Female49plus'],
      'Female49plus': ['Female1-15']
    };

    let array = ['South East', 'South West', 'East', 'West Midlands', 'East Midlands', 'North East', 'North West'];
    function regionThe(place, nt) {
      if (place=="East") { place = place + " England";}
      return ((!array.includes(place))|(nt=="NT")) ? place : 'The ' + place;
    }

    function uncap1(string) {
        if (string.slice(0, 3)=="The") {
            return string.charAt(0).toLowerCase() + string.slice(1);
        } else { return string }
    }


    function drop(x, d, r) {
      let int = Math.abs(x);
      let pos = x < 0 ? d: r;
      let nuLu = {1: '', 2: 'second-', 3: 'third-', 4: 'fourth-', 5: 'fifth-'};
      let word = nuLu[int];
      return word + pos
    }


    let num_word = {'quarter of a million': 250000, 'half a million': 500000, 'three quarters of a million': 750000, 'one million': 1000000};

    let frac_word = {'one in two': 0.5, 'one in three': 0.333, 'one in four': 0.25, 'one in five': 0.2, 'one in six': 0.167, 'one in seven': 0.143, 'one in eight': 0.125, 'one in nine': 0.111, '1 in 10': 0.1,'1 in 11' : 0.09, '1 in 12' : 0.083, '1 in 13' : 0.077, '1 in 14' : 0.071, '1 in 15' : 0.067, '1 in 16' : 0.063, '1 in 17' : 0.059, '1 in 18' : 0.056, '1 in 19' : 0.053, '1 in 20': 0.05, '1 in 25': 0.04, '1 in 30': 0.033, '1 in 40': 0.025, '1 in 50': 0.02,'2 in 10': 0.2, '3 in 10': 0.3, '4 in 10': 0.4, '6 in 10': 0.6, '7 in 10': 0.7, '8 in 10': 0.8, '9 in 10': 0.9, 'all': 1.0};


    function get_word(num, dict) {
      if (dict == "frac") {
        dict = frac_word;
      } else if (dict == "num") {
        dict = num_word;
      }
      let OverUnder;
      let lowest = 2000000;
      let lowest_label;
      for (const label in dict) {
        if (Math.abs(num-dict[label])<lowest) {
          lowest = Math.abs(num-dict[label]); 
          lowest_label = label;
          if (num-dict[label]==0) {
            OverUnder = "about"; 
          }
          else if (num-dict[label]>0) {
            OverUnder = "just over";
          }
          else if (num-dict[label]<0) {
            OverUnder = "just under";
          } } }
      return [OverUnder, lowest_label]
    }
    function figs(x, f) {
      if (f!=3) {
        f = 2;
      }
      let sigfig = Number.parseFloat(Number.parseFloat(x).toPrecision(f));
      let text;
      if (x-sigfig<-x/100) {
        text = "under ";
      }	
      if (x-sigfig<-x/800) {
        if (Math.round(Math.random())==1) {
          text = "almost ";
        } else {
          text = "just under ";
        }
      }
      else if (x-sigfig>x/100) {
        text = " just over ";
      }
      else if (x-sigfig>x/800) {
        text = "just over ";
      }
      else {
        text = "about";
      }
      return [text, sigfig];
    }


    function prev(s, place, i, type) {
      if (type=="rl") {
        type = "_rank_local";
      } else if (type=="r") {
        type = "_rank";
      } else {
        type = "";
      }
      return place.data[s[i][0]][s[i][1]+type][2001][s[i][3]]
    }
    function cur(s, place, i, type) {
      if (type=="rl") {
        type = "_rank_local";
      } else if (type=="r") {
        type = "_rank";
      } else {
        type = "";
      }
      return place.data[s[i][0]][s[i][1]+type][2011][s[i][3]]
    }

    function cha(s, place, i, type) {
      if (type=="rl") {
        type = "_rank_local";
      } else if (type=="r") {
        type = "_rank";
      } else {
        type = "";
      }
      let out;
      try {
        out = Math.round(place.data[s[i][0]][s[i][1]+type]['change'][s[i][3]]*10)/10;
      }
      catch(err) {
        console.log(err.message);
      }
      return out
    }

    function qui(n) {
      return Math.ceil(5*n/331)
    }

    function otherEst(s, place, i, hiLo, type) {
      if (typeof hiLo==="number" & hiLo<0) {
        hiLo = "highest";
      } else if (typeof hiLo==="number") {
        hiLo = "lowest";
      }
      
      let optAr = Object.assign({}, place.data[s[i][0]][s[i][1]+'_rank_local'][type]);
      let l = new Set(chains[s[i][3]]);

      for (let prop of Object.keys(optAr)) {
        if (!l.has(prop)) {
          delete optAr[prop];
        }
      }
      let optArKey;
      if (Object.keys(optAr).length>1) {
        if (hiLo=='lowest') {
          for (let [k, v] of Object.entries(optAr)) {
            if (v > 0) {
              delete optAr[k];
            }
          }
          if (optAr.length>0) {
            optArKey = Object.keys(optAr).reduce((a, b) => optAr[a] > optAr[b] ? a : b);
          } else {
            optArKey = undefined;
          }
          
        }
        if (hiLo=='highest') {
          for (let [k, v] of Object.entries(optAr)) {
            if (v < 0) {
              delete optAr[k];
            }
          }
          if (optAr.length>0) {
            optArKey = Object.keys(optAr).reduce((a, b) => optAr[a] < optAr[b] ? a : b);
          } else {
            optArKey = undefined;
          }
        }
      } else {
        optArKey = Object.keys(optAr);
      }
      return optArKey
    }

    function otherRank(s, place, i, t="r") {
      let locExt = "";
      if (t=="rl") {
        locExt = "_local";
      }
      return place.data[s[i][0]][s[i][1]+'_rank'+locExt]['change'][otherEst(s, place, i, cha(s, place, i, t), 'change')]
    }

    function ud(n, w1, w2) { if (n<0) { return w2 } else { return w1 } }
    var city;
    if (parent=="London") {
      city = "city";
    } else {
      city = "region";
    }

    function sign(x, y) {
      if (Math.sign(x) == Math.sign(y)) {
        return true
      } else {
        return false
      }
    }


    var ones = ['', '', 'second-', 'third-', 'fourth-', 'fifth-', 'sixth-', 'seventh-', 'eighth-', 'ninth-'];

    var nuwords = ['no', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];

    function nuword(x) {
      if (x<10) {
        return nuwords[x]
      } else {
        return x
      }
    }

    function suffixer(int) {
      let ord;
      if (int==12) {
        ord = 'twelfth';
      } else if ((int>10)&(int<20)) {
        ord = int+"th";
      } else {
        let mod = Math.round(int) % 10;
        ord = mod == 1 ? int+'st' : mod == 2 ? int+'nd' : mod == 3 ? int+'rd' : int+'th';
      }
      return ord
    }

    function ord(x) {
      let ordin;
      if (Math.abs(x)<10) {
        ordin = ones[Math.abs(x)];
      } else {
        ordin = suffixer(Math.abs(x))+"-";
      }
      return ordin
    }

    var ageBandLU = {
      '0-9': ['children under the age of nine years', 'under nine years'],
      '10-19': ['people between the ages of 10 and 19 years','between 10 and 19 years'],
      '20-29': ['people between the ages of 20 and 29 years', 'between 20 and 29 years'],
      '30-39': ['people between the ages of 30 and 39 years','between 30 and 39 years'],
      '40-49': ['people between the ages of 40 and 49 years','between 40 and 49 years'],
      '50-59': ['people between the ages of 50 and 59 years','between 50 and 59 years'],
      '60-69': ['people between the ages of 60 and 69 years','between 60 and 69 years'],
      '70-79': ['people between the ages of 70 and 79 years', 'between 70 and 79 years'],
      '80plus': ['people aged 80 years or over', 'over the age of 80 years']
    };
    function eq(a, b) {
      return Array.isArray(a) &&
          Array.isArray(b) &&
          a.length === b.length &&
          a.every((val, index) => val === b[index]);
    }
    function udord(n, w1, w2) {
      let w = ud(n, w1, w2);
      let nu = ord(n);
      return nu+w
    }

    function adv(x, y) {
      let w;
      let d = x-y;
      let perc = (d/y)*100;
      if (Math.abs(perc)>7) {
        w = '';
      } else if (Math.abs(perc)>3) {
        w = '';
      } else {
        w = 'slightly';
      }
      return w
    }

    function uds(n, w1, w2, w3) {
       if (n<-1) { 
         return w2 
        } else if (n>1) { 
          return w1 
        } else {
          return w3
        }
      }

    /* src/ui/Select.svelte generated by Svelte v3.43.1 */

    const { console: console_1$5 } = globals;
    const file$C = "src/ui/Select.svelte";

    function get_each_context_1$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[37] = list[i];
    	child_ctx[40] = list;
    	child_ctx[39] = i;
    	return child_ctx;
    }

    function get_each_context$l(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[37] = list[i];
    	child_ctx[38] = list;
    	child_ctx[39] = i;
    	return child_ctx;
    }

    // (233:1) {:else}
    function create_else_block_1$2(ctx) {
    	let a;
    	let span0;

    	let t0_value = (/*placeholder*/ ctx[0]
    	? /*placeholder*/ ctx[0]
    	: 'Select one') + "";

    	let t0;
    	let t1;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			span1.textContent = " ";
    			attr_dev(span0, "class", "svelte-qdzmwx");
    			add_location(span0, file$C, 234, 2, 5029);
    			attr_dev(span1, "class", "button svelte-qdzmwx");
    			toggle_class(span1, "search", /*search*/ ctx[3]);
    			toggle_class(span1, "down", !/*search*/ ctx[3]);
    			add_location(span1, file$C, 235, 2, 5087);
    			attr_dev(a, "id", "toggle");
    			attr_dev(a, "class", "svelte-qdzmwx");
    			add_location(a, file$C, 233, 1, 4993);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, span0);
    			append_dev(span0, t0);
    			append_dev(a, t1);
    			append_dev(a, span1);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*toggle*/ ctx[13], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*placeholder*/ 1 && t0_value !== (t0_value = (/*placeholder*/ ctx[0]
    			? /*placeholder*/ ctx[0]
    			: 'Select one') + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*search*/ 8) {
    				toggle_class(span1, "search", /*search*/ ctx[3]);
    			}

    			if (dirty[0] & /*search*/ 8) {
    				toggle_class(span1, "down", !/*search*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(233:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (228:1) {#if selectedItem && !search}
    function create_if_block_5$7(ctx) {
    	let a;
    	let span0;
    	let t0_value = /*selectedItem*/ ctx[6][/*label*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let mounted;
    	let dispose;
    	let if_block = /*group*/ ctx[2] && create_if_block_6$3(ctx);

    	const block = {
    		c: function create() {
    			a = element("a");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = " ";
    			attr_dev(span0, "class", "selection svelte-qdzmwx");
    			add_location(span0, file$C, 229, 2, 4808);
    			attr_dev(span1, "class", "button close svelte-qdzmwx");
    			add_location(span1, file$C, 230, 2, 4916);
    			attr_dev(a, "id", "toggle");
    			attr_dev(a, "class", "selected svelte-qdzmwx");
    			add_location(a, file$C, 228, 1, 4755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			if (if_block) if_block.m(span0, null);
    			append_dev(a, t2);
    			append_dev(a, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(span1, "click", /*unSelect*/ ctx[15], false, false, false),
    					listen_dev(a, "click", /*toggle*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem, label*/ 66 && t0_value !== (t0_value = /*selectedItem*/ ctx[6][/*label*/ ctx[1]] + "")) set_data_dev(t0, t0_value);

    			if (/*group*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6$3(ctx);
    					if_block.c();
    					if_block.m(span0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$7.name,
    		type: "if",
    		source: "(228:1) {#if selectedItem && !search}",
    		ctx
    	});

    	return block;
    }

    // (230:48) {#if group}
    function create_if_block_6$3(ctx) {
    	let small;
    	let t_value = /*selectedItem*/ ctx[6][/*group*/ ctx[2]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			small = element("small");
    			t = text(t_value);
    			attr_dev(small, "class", "svelte-qdzmwx");
    			add_location(small, file$C, 229, 59, 4865);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, small, anchor);
    			append_dev(small, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem, group*/ 68 && t_value !== (t_value = /*selectedItem*/ ctx[6][/*group*/ ctx[2]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(small);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(230:48) {#if group}",
    		ctx
    	});

    	return block;
    }

    // (239:1) {#if expanded}
    function create_if_block$n(ctx) {
    	let div;
    	let input_1;
    	let t;
    	let ul;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*filter*/ ctx[4].length < 0) return create_if_block_1$g;
    		if (/*filtered*/ ctx[9][0] && /*group*/ ctx[2]) return create_if_block_2$b;
    		if (/*filtered*/ ctx[9][0]) return create_if_block_4$7;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			input_1 = element("input");
    			t = space();
    			ul = element("ul");
    			if_block.c();
    			attr_dev(input_1, "type", "text");
    			attr_dev(input_1, "placeholder", "");
    			attr_dev(input_1, "autocomplete", "false");
    			attr_dev(input_1, "class", "svelte-qdzmwx");
    			add_location(input_1, file$C, 240, 2, 5239);
    			attr_dev(ul, "class", "svelte-qdzmwx");
    			add_location(ul, file$C, 241, 2, 5356);
    			attr_dev(div, "id", "dropdown");
    			set_style(div, "top", "0");
    			attr_dev(div, "class", "svelte-qdzmwx");
    			add_location(div, file$C, 239, 1, 5186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input_1);
    			set_input_value(input_1, /*filter*/ ctx[4]);
    			/*input_1_binding*/ ctx[25](input_1);
    			append_dev(div, t);
    			append_dev(div, ul);
    			if_block.m(ul, null);
    			/*div_binding*/ ctx[35](div);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[24]),
    					listen_dev(input_1, "keyup", /*doKeyup*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filter*/ 16 && input_1.value !== /*filter*/ ctx[4]) {
    				set_input_value(input_1, /*filter*/ ctx[4]);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(ul, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*input_1_binding*/ ctx[25](null);
    			if_block.d();
    			/*div_binding*/ ctx[35](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(239:1) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (262:3) {:else}
    function create_else_block$6(ctx) {
    	let li;

    	const block = {
    		c: function create() {
    			li = element("li");
    			li.textContent = "No results";
    			attr_dev(li, "class", "svelte-qdzmwx");
    			add_location(li, file$C, 262, 3, 6223);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(262:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (256:25) 
    function create_if_block_4$7(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*filtered*/ ctx[9];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$8(get_each_context_1$8(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*items, active, select, filtered, label*/ 19202) {
    				each_value_1 = /*filtered*/ ctx[9];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$8(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$7.name,
    		type: "if",
    		source: "(256:25) ",
    		ctx
    	});

    	return block;
    }

    // (245:34) 
    function create_if_block_2$b(ctx) {
    	let each_1_anchor;
    	let each_value = /*filtered*/ ctx[9];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$l(get_each_context$l(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*items, active, select, filtered, classLU, label*/ 23298) {
    				each_value = /*filtered*/ ctx[9];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$l(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$l(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(245:34) ",
    		ctx
    	});

    	return block;
    }

    // (243:3) {#if filter.length < 0}
    function create_if_block_1$g(ctx) {
    	let li;

    	const block = {
    		c: function create() {
    			li = element("li");
    			li.textContent = "Type a name...";
    			attr_dev(li, "class", "svelte-qdzmwx");
    			add_location(li, file$C, 243, 3, 5391);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(243:3) {#if filter.length < 0}",
    		ctx
    	});

    	return block;
    }

    // (257:3) {#each filtered as option, i}
    function create_each_block_1$8(ctx) {
    	let li;
    	let t0_value = /*option*/ ctx[37][/*label*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let i = /*i*/ ctx[39];
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[32](/*option*/ ctx[37]);
    	}

    	function mouseover_handler_1() {
    		return /*mouseover_handler_1*/ ctx[33](/*i*/ ctx[39]);
    	}

    	const assign_li = () => /*li_binding_1*/ ctx[34](li, i);
    	const unassign_li = () => /*li_binding_1*/ ctx[34](null, i);

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(li, "class", "svelte-qdzmwx");
    			toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[39]);
    			add_location(li, file$C, 257, 3, 6041);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			assign_li();

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", click_handler_1, false, false, false),
    					listen_dev(li, "mouseover", mouseover_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*filtered, label*/ 514 && t0_value !== (t0_value = /*option*/ ctx[37][/*label*/ ctx[1]] + "")) set_data_dev(t0, t0_value);

    			if (i !== /*i*/ ctx[39]) {
    				unassign_li();
    				i = /*i*/ ctx[39];
    				assign_li();
    			}

    			if (dirty[0] & /*active*/ 256) {
    				toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[39]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			unassign_li();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$8.name,
    		type: "each",
    		source: "(257:3) {#each filtered as option, i}",
    		ctx
    	});

    	return block;
    }

    // (247:4) {#if !(classLU.find(d => d.Name == option[label]))}
    function create_if_block_3$8(ctx) {
    	let t_value = console.log("--666-----option", /*option*/ ctx[37][/*label*/ ctx[1]], /*classLU*/ ctx[12].find(func_1)) + "";
    	let t;

    	function func_1(...args) {
    		return /*func_1*/ ctx[26](/*option*/ ctx[37], ...args);
    	}

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*filtered, label, classLU*/ 4610 && t_value !== (t_value = console.log("--666-----option", /*option*/ ctx[37][/*label*/ ctx[1]], /*classLU*/ ctx[12].find(func_1)) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$8.name,
    		type: "if",
    		source: "(247:4) {#if !(classLU.find(d => d.Name == option[label]))}",
    		ctx
    	});

    	return block;
    }

    // (246:3) {#each filtered as option, i}
    function create_each_block$l(ctx) {
    	let show_if = !/*classLU*/ ctx[12].find(func);
    	let t0;
    	let li;
    	let t1_value = /*option*/ ctx[37][/*label*/ ctx[1]] + "";
    	let t1;
    	let t2;
    	let small;
    	let t3_value = /*classLU*/ ctx[12].find(func_2)['Supergroup name'] + ", " + /*classLU*/ ctx[12].find(func_3)['Region/Country'] + "";
    	let t3;
    	let t4;
    	let i = /*i*/ ctx[39];
    	let mounted;
    	let dispose;

    	function func(...args) {
    		return /*func*/ ctx[23](/*option*/ ctx[37], ...args);
    	}

    	let if_block = show_if && create_if_block_3$8(ctx);

    	function func_2(...args) {
    		return /*func_2*/ ctx[27](/*option*/ ctx[37], ...args);
    	}

    	function func_3(...args) {
    		return /*func_3*/ ctx[28](/*option*/ ctx[37], ...args);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[29](/*option*/ ctx[37]);
    	}

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[30](/*i*/ ctx[39]);
    	}

    	const assign_li = () => /*li_binding*/ ctx[31](li, i);
    	const unassign_li = () => /*li_binding*/ ctx[31](null, i);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t0 = space();
    			li = element("li");
    			t1 = text(t1_value);
    			t2 = space();
    			small = element("small");
    			t3 = text(t3_value);
    			t4 = space();
    			attr_dev(small, "class", "svelte-qdzmwx");
    			add_location(small, file$C, 250, 20, 5798);
    			attr_dev(li, "class", "svelte-qdzmwx");
    			toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[39]);
    			add_location(li, file$C, 249, 3, 5650);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, li, anchor);
    			append_dev(li, t1);
    			append_dev(li, t2);
    			append_dev(li, small);
    			append_dev(small, t3);
    			append_dev(li, t4);
    			assign_li();

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", click_handler, false, false, false),
    					listen_dev(li, "mouseover", mouseover_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*classLU, filtered, label*/ 4610) show_if = !/*classLU*/ ctx[12].find(func);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$8(ctx);
    					if_block.c();
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*filtered, label*/ 514 && t1_value !== (t1_value = /*option*/ ctx[37][/*label*/ ctx[1]] + "")) set_data_dev(t1, t1_value);
    			if (dirty[0] & /*classLU, filtered, label*/ 4610 && t3_value !== (t3_value = /*classLU*/ ctx[12].find(func_2)['Supergroup name'] + ", " + /*classLU*/ ctx[12].find(func_3)['Region/Country'] + "")) set_data_dev(t3, t3_value);

    			if (i !== /*i*/ ctx[39]) {
    				unassign_li();
    				i = /*i*/ ctx[39];
    				assign_li();
    			}

    			if (dirty[0] & /*active*/ 256) {
    				toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[39]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(li);
    			unassign_li();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$l.name,
    		type: "each",
    		source: "(246:3) {#each filtered as option, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$G(ctx) {
    	let div;
    	let t;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedItem*/ ctx[6] && !/*search*/ ctx[3]) return create_if_block_5$7;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*expanded*/ ctx[7] && create_if_block$n(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "id", "select");
    			attr_dev(div, "class", "svelte-qdzmwx");
    			toggle_class(div, "active", /*expanded*/ ctx[7]);
    			add_location(div, file$C, 226, 0, 4658);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);

    			if (!mounted) {
    				dispose = listen_dev(div, "keydown", /*doKeydown*/ ctx[16], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			}

    			if (/*expanded*/ ctx[7]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$n(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty[0] & /*expanded*/ 128) {
    				toggle_class(div, "active", /*expanded*/ ctx[7]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sleep$1(ms) {
    	return new Promise(resolve => setTimeout(resolve, ms));
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let regex;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, []);
    	const dispatch = createEventDispatcher();
    	let { options } = $$props;
    	let { selected = null } = $$props;
    	let { placeholder = "Find an area..." } = $$props;
    	let { value = "code" } = $$props;
    	let { label = "name" } = $$props;
    	let { group = null } = $$props;
    	let { search = false } = $$props;
    	let selectedPrev = selected;

    	let selectedItem = selected
    	? options.find(d => {
    			d[value] == selected[value];
    		})
    	: null;

    	let expanded = false;
    	let filter = '';
    	let active = null;
    	let filtered;
    	let el;
    	let input;
    	let items = [];
    	let classLU;

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Corresponding%20Local%20Authorities-Table%201.csv").then(res => {
    		res.forEach(d => {
    			
    		});

    		$$invalidate(12, classLU = res);
    	});

    	function toggle(ev) {
    		ev.stopPropagation();
    		$$invalidate(4, filter = '');
    		$$invalidate(7, expanded = !expanded);

    		sleep$1(10).then(() => {
    			if (input && expanded) {
    				input.focus();
    			}
    		});
    	}

    	function select(option) {
    		$$invalidate(18, selected = option);
    		$$invalidate(7, expanded = false);
    		dispatch('select', { selected: option, value: option[value] });
    	}

    	function unSelect(ev) {
    		ev.stopPropagation();
    		$$invalidate(18, selected = null);
    		$$invalidate(21, selectedPrev = null);
    		$$invalidate(6, selectedItem = null);
    		dispatch('select', { selected: null, value: null });
    	}

    	function doKeydown(ev) {
    		if (expanded && filtered[0] && Number.isInteger(active)) {
    			if (ev.keyCode === 38) {
    				$$invalidate(8, active -= active > 0 ? 1 : 0);
    				items[active].scrollIntoView({ block: 'nearest', inline: 'start' });
    			} else if (ev.keyCode === 40) {
    				$$invalidate(8, active += active < filtered.length - 1 ? 1 : 0);
    				items[active].scrollIntoView({ block: 'nearest', inline: 'end' });
    			}
    		}
    	}

    	function doKeyup(ev) {
    		if (filtered[0] && Number.isInteger(active)) {
    			if (ev.keyCode === 13) {
    				select(filtered[active]);
    			}
    		}
    	}

    	const writable_props = ['options', 'selected', 'placeholder', 'value', 'label', 'group', 'search'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	const func = (option, d) => d.Name == option[label];

    	function input_1_input_handler() {
    		filter = this.value;
    		$$invalidate(4, filter);
    	}

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(10, input);
    		});
    	}

    	const func_1 = (option, d) => d.Name == option[label];
    	const func_2 = (option, d) => d.Name == option[label];
    	const func_3 = (option, d) => d.Name == option[label];
    	const click_handler = option => select(option);
    	const mouseover_handler = i => $$invalidate(8, active = i);

    	function li_binding($$value, i) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			items[i] = $$value;
    			$$invalidate(11, items);
    		});
    	}

    	const click_handler_1 = option => select(option);
    	const mouseover_handler_1 = i => $$invalidate(8, active = i);

    	function li_binding_1($$value, i) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			items[i] = $$value;
    			$$invalidate(11, items);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			el = $$value;
    			$$invalidate(5, el);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('options' in $$props) $$invalidate(19, options = $$props.options);
    		if ('selected' in $$props) $$invalidate(18, selected = $$props.selected);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(20, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('group' in $$props) $$invalidate(2, group = $$props.group);
    		if ('search' in $$props) $$invalidate(3, search = $$props.search);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		getData,
    		dispatch,
    		options,
    		selected,
    		placeholder,
    		value,
    		label,
    		group,
    		search,
    		selectedPrev,
    		selectedItem,
    		expanded,
    		filter,
    		active,
    		filtered,
    		el,
    		input,
    		items,
    		classLU,
    		sleep: sleep$1,
    		toggle,
    		select,
    		unSelect,
    		doKeydown,
    		doKeyup,
    		regex
    	});

    	$$self.$inject_state = $$props => {
    		if ('options' in $$props) $$invalidate(19, options = $$props.options);
    		if ('selected' in $$props) $$invalidate(18, selected = $$props.selected);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(20, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('group' in $$props) $$invalidate(2, group = $$props.group);
    		if ('search' in $$props) $$invalidate(3, search = $$props.search);
    		if ('selectedPrev' in $$props) $$invalidate(21, selectedPrev = $$props.selectedPrev);
    		if ('selectedItem' in $$props) $$invalidate(6, selectedItem = $$props.selectedItem);
    		if ('expanded' in $$props) $$invalidate(7, expanded = $$props.expanded);
    		if ('filter' in $$props) $$invalidate(4, filter = $$props.filter);
    		if ('active' in $$props) $$invalidate(8, active = $$props.active);
    		if ('filtered' in $$props) $$invalidate(9, filtered = $$props.filtered);
    		if ('el' in $$props) $$invalidate(5, el = $$props.el);
    		if ('input' in $$props) $$invalidate(10, input = $$props.input);
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('classLU' in $$props) $$invalidate(12, classLU = $$props.classLU);
    		if ('regex' in $$props) $$invalidate(22, regex = $$props.regex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*filter*/ 16) {
    			$$invalidate(22, regex = filter ? new RegExp(filter, 'i') : null);
    		}

    		if ($$self.$$.dirty[0] & /*regex, options, label*/ 4718594) {
    			{
    				$$invalidate(9, filtered = regex
    				? options.filter(option => regex.test(option[label]))
    				: options);

    				$$invalidate(8, active = 0);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*el*/ 32) {
    			document.onclick = function (e) {
    				if (e.target !== el) {
    					$$invalidate(7, expanded = false);
    					$$invalidate(8, active = 0);
    				}
    			};
    		}

    		if ($$self.$$.dirty[0] & /*selectedPrev, selected, options, value*/ 3932160) {
    			if (selectedPrev != selected) {
    				$$invalidate(6, selectedItem = options.find(d => d[value] == selected[value]));
    				$$invalidate(21, selectedPrev = selected);
    			}
    		}
    	};

    	return [
    		placeholder,
    		label,
    		group,
    		search,
    		filter,
    		el,
    		selectedItem,
    		expanded,
    		active,
    		filtered,
    		input,
    		items,
    		classLU,
    		toggle,
    		select,
    		unSelect,
    		doKeydown,
    		doKeyup,
    		selected,
    		options,
    		value,
    		selectedPrev,
    		regex,
    		func,
    		input_1_input_handler,
    		input_1_binding,
    		func_1,
    		func_2,
    		func_3,
    		click_handler,
    		mouseover_handler,
    		li_binding,
    		click_handler_1,
    		mouseover_handler_1,
    		li_binding_1,
    		div_binding
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$G,
    			create_fragment$G,
    			safe_not_equal,
    			{
    				options: 19,
    				selected: 18,
    				placeholder: 0,
    				value: 20,
    				label: 1,
    				group: 2,
    				search: 3
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$G.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*options*/ ctx[19] === undefined && !('options' in props)) {
    			console_1$5.warn("<Select> was created without expected prop 'options'");
    		}
    	}

    	get options() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get search() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set search(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var archieml = createCommonjsModule(function (module, exports) {
    // Structure inspired by John Resig's HTML parser
    // http://ejohn.org/blog/pure-javascript-html-parser/

    (function() {

    // The load function takes a string of text as its only argument.
    // It then proceeds to match the text to one of several regular expressions
    // which match patterns for different types of commands in AML.
    function load(input, options) {
      var whitespacePattern = '\\u0000\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF';
      var slugBlacklist = whitespacePattern + '\\u005B\\u005C\\u005D\\u007B\\u007D\\u003A';

      var nextLine = new RegExp('.*((\r|\n)+)');
      var startKey = new RegExp('^\\s*([^' + slugBlacklist + ']+)[ \t\r]*:[ \t\r]*(.*(?:\n|\r|$))');
      var commandKey = new RegExp('^\\s*:[ \t\r]*(endskip|ignore|skip|end).*?(\n|\r|$)', 'i');
      var arrayElement = new RegExp('^\\s*\\*[ \t\r]*(.*(?:\n|\r|$))');
      var scopePattern = new RegExp('^\\s*(\\[|\\{)[ \t\r]*([\+\.]*)[ \t\r]*([^' + slugBlacklist + ']*)[ \t\r]*(?:\\]|\\}).*?(\n|\r|$)');

      var data = {},
          scope = data,

          stack = [],
          stackScope = undefined,

          bufferScope = null,
          bufferKey = null,
          bufferString = '',

          isSkipping = false;

      var options = options || {};
      if (options.comments !== true) options.comments = false;

      while (input) {
        // Inside the input stream loop, the `input` string is trimmed down as matches
        // are found, and fires a call to the matching parse*() function.
        var match;

        if (commandKey.exec(input)) {
          match = commandKey.exec(input);

          parseCommandKey(match[1].toLowerCase());

        } else if (!isSkipping && startKey.exec(input) &&
            (!stackScope || stackScope.arrayType !== 'simple')) {
          match = startKey.exec(input);

          parseStartKey(match[1], match[2] || '');

        } else if (!isSkipping && arrayElement.exec(input) && stackScope && stackScope.array &&
            (stackScope.arrayType !== 'complex' && stackScope.arrayType !== 'freeform') &&
            stackScope.flags.indexOf('+') < 0) {
          match = arrayElement.exec(input);

          parseArrayElement(match[1]);

        } else if (!isSkipping && scopePattern.exec(input)) {
          match = scopePattern.exec(input);

          parseScope(match[1], match[2], match[3]);

        } else if (nextLine.exec(input)) {
          match = nextLine.exec(input);

          parseText(match[0]);

        } else {
          // End of document reached
          parseText(input);
          input = '';
        }

        if (match) input = input.substring(match[0].length);
      }

      // The following parse functions add to the global `data` object and update
      // scoping variables to keep track of what we're parsing.

      function parseStartKey(key, restOfLine) {
        // When a new key is encountered, the rest of the line is immediately added as
        // its value, by calling `flushBuffer`.
        flushBuffer();

        incrementArrayElement(key);

        if (stackScope && stackScope.flags.indexOf('+') > -1) key = 'value';

        bufferKey = key;
        bufferString = restOfLine;

        flushBufferInto(key, {replace: true});
      }

      function parseArrayElement(value) {
        flushBuffer();

        stackScope.arrayType = stackScope.arrayType || 'simple';

        stackScope.array.push('');
        bufferKey = stackScope.array;
        bufferString = value;
        flushBufferInto(stackScope.array, {replace: true});
      }

      function parseCommandKey(command) {
        // if isSkipping, don't parse any command unless :endskip

        if (isSkipping && !(command === "endskip" || command === "ignore")) return flushBuffer();

        switch (command) {
          case "end":
            // When we get to an end key, save whatever was in the buffer to the last
            // active key.
            if (bufferKey) flushBufferInto(bufferKey, {replace: false});
            return;

          case "ignore":
            // When ":ignore" is reached, stop parsing immediately
            input = '';
            break;

          case "skip":
            isSkipping = true;
            break;

          case "endskip":
            isSkipping = false;
            break;
        }

        flushBuffer();
      }

      function parseScope(scopeType, flags, scopeKey) {
        // Throughout the parsing, `scope` refers to one of the following:
        //   * `data`
        //   * an object - one level within `data` - when we're within a {scope} block
        //   * an object at the end of an array - which is one level within `data` -
        //     when we're within an [array] block.
        //
        // `scope` changes whenever a scope key is encountered. It also changes
        // within parseStartKey when we start a new object within an array.
        flushBuffer();

        if (scopeKey == '') {

          // Move up a level
          var lastStackItem = stack.pop();
          scope = (lastStackItem ? lastStackItem.scope : data) || data;
          stackScope = stack[stack.length - 1];

        } else if (scopeType === '[' || scopeType === '{') {
          var nesting = false;
          var keyScope = data;

          // If the flags include ".", drill down into the appropriate scope.
          if (flags.indexOf('.') > -1) {
            incrementArrayElement(scopeKey);
            nesting = true;
            if (stackScope) keyScope = scope;

          // Otherwise, make sure we reset to the global scope
          } else {
            scope = data;
            stack = [];
          }

          // Within freeforms, the `type` of nested objects and arrays is taken
          // verbatim from the `keyScope`.
          if (stackScope && stackScope.flags.indexOf('+') > -1) {
            var parsedScopeKey = scopeKey;

          // Outside of freeforms, dot-notation interpreted as nested data.
          } else {
            var keyBits = scopeKey.split('.');
            for (var i=0; i<keyBits.length - 1; i++) {
              keyScope = keyScope[keyBits[i]] = keyScope[keyBits[i]] || {};
            }
            var parsedScopeKey = keyBits[keyBits.length - 1];
          }

          var stackScopeItem = {
            array: null,
            arrayType: null,
            arrayFirstKey: null,
            flags: flags,
            scope: scope
          };
          
          // Content of nested scopes within a freeform should be stored under "value."
          var isNestedFreeform = stackScope && stackScope.flags.indexOf('+') > -1 && flags.indexOf('.') > -1;

          if (scopeType == '[') {
            if (isNestedFreeform) parsedScopeKey = 'value';
            stackScopeItem.array = keyScope[parsedScopeKey] = [];
            if (flags.indexOf('+') > -1) stackScopeItem.arrayType = 'freeform';
            if (nesting) {
              stack.push(stackScopeItem);
            } else {
              stack = [stackScopeItem];
            }
            stackScope = stack[stack.length - 1];

          } else if (scopeType == '{') {
            if (nesting) {
              if (isNestedFreeform) scope = scope.value = {};
              else scope = keyScope[parsedScopeKey] = keyScope = {};
              stack.push(stackScopeItem);
            } else {
              scope = keyScope[parsedScopeKey] = (typeof keyScope[parsedScopeKey] === 'object') ? keyScope[parsedScopeKey] : {};
              stack = [stackScopeItem];
            }
            stackScope = stack[stack.length - 1];
          }
        }
      }

      function parseText(text) {
        if (stackScope && stackScope.flags.indexOf('+') > -1 && text.match(/[^\n\r\s]/)) {
          stackScope.array.push({"type": "text", "value": text.replace(/(^\s*)|(\s*$)/g, '')});
        } else {
          bufferString += input.substring(0, text.length);
        }
      }

      function incrementArrayElement(key) {
        // Special handling for arrays. If this is the start of the array, remember
        // which key was encountered first. If this is a duplicate encounter of
        // that key, start a new object.

        if (stackScope && stackScope.array) {
          // If we're within a simple array, ignore
          stackScope.arrayType = stackScope.arrayType || 'complex';
          if (stackScope.arrayType === 'simple') return;

          // arrayFirstKey may be either another key, or null
          if (stackScope.arrayFirstKey === null || stackScope.arrayFirstKey === key) stackScope.array.push(scope = {});
          if (stackScope.flags.indexOf('+') > -1) {
            scope.type = key;
          } else {
            stackScope.arrayFirstKey = stackScope.arrayFirstKey || key;
          }
        }
      }

      function formatValue(value, type) {
        if (options.comments) {
          value = value.replace(/(?:^\\)?\[[^\[\]\n\r]*\](?!\])/mg, ""); // remove comments
          value = value.replace(/\[\[([^\[\]\n\r]*)\]\]/g, "[$1]"); // [[]] => []
        }

        if (type == 'append') {
          // If we're appending to a multi-line string, escape special punctuation
          // by using a backslash at the beginning of any line.
          // Note we do not do this processing for the first line of any value.
          value = value.replace(new RegExp('^(\\s*)\\\\', 'gm'), "$1");
        }

        return value;
      }

      function flushBuffer() {
        var result = bufferString + '';
        bufferString = '';
        bufferKey = null;
        return result;
      }

      function flushBufferInto(key, options) {
        options = options || {};
        var existingBufferKey = bufferKey;
        var value = flushBuffer();

        if (options.replace) {
          value = formatValue(value, 'replace').replace(new RegExp('^\\s*'), '');
          bufferString = (new RegExp('\\s*$')).exec(value)[0];
          bufferKey = existingBufferKey;
        } else {
          value = formatValue(value, 'append');
        }

        if (typeof key === 'object') {
          // key is an array
          if (options.replace) key[key.length - 1] = '';

          key[key.length - 1] += value.replace(new RegExp('\\s*$'), '');

        } else {
          var keyBits = key.split('.');
          bufferScope = scope;

          for (var i=0; i<keyBits.length - 1; i++) {
            if (typeof bufferScope[keyBits[i]] === 'string') bufferScope[keyBits[i]] = {};
            bufferScope = bufferScope[keyBits[i]] = bufferScope[keyBits[i]] || {};
          }

          if (options.replace) bufferScope[keyBits[keyBits.length - 1]] = '';

          bufferScope[keyBits[keyBits.length - 1]] += value.replace(new RegExp('\\s*$'), '');
        }
      }

      flushBuffer();
      return data;
    }
    var archieml = {load: load};

    {
      if (module.exports) {
        exports = module.exports = archieml;
      }
      exports.archieml = archieml;
    }
    }.call(commonjsGlobal));
    });

    /* global define */

    var pluralize = createCommonjsModule(function (module, exports) {
    (function (root, pluralize) {
      /* istanbul ignore else */
      if (typeof commonjsRequire === 'function' && 'object' === 'object' && 'object' === 'object') {
        // Node.
        module.exports = pluralize();
      } else {
        // Browser global.
        root.pluralize = pluralize();
      }
    })(commonjsGlobal, function () {
      // Rule storage - pluralize and singularize need to be run sequentially,
      // while other rules can be optimized using an object for instant lookups.
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};

      /**
       * Sanitize a pluralization rule to a usable regular expression.
       *
       * @param  {(RegExp|string)} rule
       * @return {RegExp}
       */
      function sanitizeRule (rule) {
        if (typeof rule === 'string') {
          return new RegExp('^' + rule + '$', 'i');
        }

        return rule;
      }

      /**
       * Pass in a word token to produce a function that can replicate the case on
       * another word.
       *
       * @param  {string}   word
       * @param  {string}   token
       * @return {Function}
       */
      function restoreCase (word, token) {
        // Tokens are an exact match.
        if (word === token) return token;

        // Lower cased words. E.g. "hello".
        if (word === word.toLowerCase()) return token.toLowerCase();

        // Upper cased words. E.g. "WHISKY".
        if (word === word.toUpperCase()) return token.toUpperCase();

        // Title cased words. E.g. "Title".
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }

        // Lower cased words. E.g. "test".
        return token.toLowerCase();
      }

      /**
       * Interpolate a regexp string.
       *
       * @param  {string} str
       * @param  {Array}  args
       * @return {string}
       */
      function interpolate (str, args) {
        return str.replace(/\$(\d{1,2})/g, function (match, index) {
          return args[index] || '';
        });
      }

      /**
       * Replace a word using a rule.
       *
       * @param  {string} word
       * @param  {Array}  rule
       * @return {string}
       */
      function replace (word, rule) {
        return word.replace(rule[0], function (match, index) {
          var result = interpolate(rule[1], arguments);

          if (match === '') {
            return restoreCase(word[index - 1], result);
          }

          return restoreCase(match, result);
        });
      }

      /**
       * Sanitize a word by passing in the word and sanitization rules.
       *
       * @param  {string}   token
       * @param  {string}   word
       * @param  {Array}    rules
       * @return {string}
       */
      function sanitizeWord (token, word, rules) {
        // Empty string or doesn't need fixing.
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }

        var len = rules.length;

        // Iterate over the sanitization rules and use the first one to match.
        while (len--) {
          var rule = rules[len];

          if (rule[0].test(word)) return replace(word, rule);
        }

        return word;
      }

      /**
       * Replace a word with the updated word.
       *
       * @param  {Object}   replaceMap
       * @param  {Object}   keepMap
       * @param  {Array}    rules
       * @return {Function}
       */
      function replaceWord (replaceMap, keepMap, rules) {
        return function (word) {
          // Get the correct token and case restoration functions.
          var token = word.toLowerCase();

          // Check against the keep object map.
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }

          // Check against the replacement map for a direct word replacement.
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }

          // Run all the rules against the word.
          return sanitizeWord(token, word, rules);
        };
      }

      /**
       * Check if a word is part of the map.
       */
      function checkWord (replaceMap, keepMap, rules, bool) {
        return function (word) {
          var token = word.toLowerCase();

          if (keepMap.hasOwnProperty(token)) return true;
          if (replaceMap.hasOwnProperty(token)) return false;

          return sanitizeWord(token, token, rules) === token;
        };
      }

      /**
       * Pluralize or singularize a word based on the passed in count.
       *
       * @param  {string}  word      The word to pluralize
       * @param  {number}  count     How many of the word exist
       * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)
       * @return {string}
       */
      function pluralize (word, count, inclusive) {
        var pluralized = count === 1
          ? pluralize.singular(word) : pluralize.plural(word);

        return (inclusive ? count + ' ' : '') + pluralized;
      }

      /**
       * Pluralize a word.
       *
       * @type {Function}
       */
      pluralize.plural = replaceWord(
        irregularSingles, irregularPlurals, pluralRules
      );

      /**
       * Check if a word is plural.
       *
       * @type {Function}
       */
      pluralize.isPlural = checkWord(
        irregularSingles, irregularPlurals, pluralRules
      );

      /**
       * Singularize a word.
       *
       * @type {Function}
       */
      pluralize.singular = replaceWord(
        irregularPlurals, irregularSingles, singularRules
      );

      /**
       * Check if a word is singular.
       *
       * @type {Function}
       */
      pluralize.isSingular = checkWord(
        irregularPlurals, irregularSingles, singularRules
      );

      /**
       * Add a pluralization rule to the collection.
       *
       * @param {(string|RegExp)} rule
       * @param {string}          replacement
       */
      pluralize.addPluralRule = function (rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };

      /**
       * Add a singularization rule to the collection.
       *
       * @param {(string|RegExp)} rule
       * @param {string}          replacement
       */
      pluralize.addSingularRule = function (rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };

      /**
       * Add an uncountable word rule.
       *
       * @param {(string|RegExp)} word
       */
      pluralize.addUncountableRule = function (word) {
        if (typeof word === 'string') {
          uncountables[word.toLowerCase()] = true;
          return;
        }

        // Set singular and plural references for the word.
        pluralize.addPluralRule(word, '$0');
        pluralize.addSingularRule(word, '$0');
      };

      /**
       * Add an irregular word definition.
       *
       * @param {string} single
       * @param {string} plural
       */
      pluralize.addIrregularRule = function (single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();

        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };

      /**
       * Irregular rules.
       */
      [
        // Pronouns.
        ['I', 'we'],
        ['me', 'us'],
        ['he', 'they'],
        ['she', 'they'],
        ['them', 'them'],
        ['myself', 'ourselves'],
        ['yourself', 'yourselves'],
        ['itself', 'themselves'],
        ['herself', 'themselves'],
        ['himself', 'themselves'],
        ['themself', 'themselves'],
        ['is', 'are'],
        ['was', 'were'],
        ['has', 'have'],
        ['this', 'these'],
        ['that', 'those'],
        // Words ending in with a consonant and `o`.
        ['echo', 'echoes'],
        ['dingo', 'dingoes'],
        ['volcano', 'volcanoes'],
        ['tornado', 'tornadoes'],
        ['torpedo', 'torpedoes'],
        // Ends with `us`.
        ['genus', 'genera'],
        ['viscus', 'viscera'],
        // Ends with `ma`.
        ['stigma', 'stigmata'],
        ['stoma', 'stomata'],
        ['dogma', 'dogmata'],
        ['lemma', 'lemmata'],
        ['schema', 'schemata'],
        ['anathema', 'anathemata'],
        // Other irregular rules.
        ['ox', 'oxen'],
        ['axe', 'axes'],
        ['die', 'dice'],
        ['yes', 'yeses'],
        ['foot', 'feet'],
        ['eave', 'eaves'],
        ['goose', 'geese'],
        ['tooth', 'teeth'],
        ['quiz', 'quizzes'],
        ['human', 'humans'],
        ['proof', 'proofs'],
        ['carve', 'carves'],
        ['valve', 'valves'],
        ['looey', 'looies'],
        ['thief', 'thieves'],
        ['groove', 'grooves'],
        ['pickaxe', 'pickaxes'],
        ['passerby', 'passersby']
      ].forEach(function (rule) {
        return pluralize.addIrregularRule(rule[0], rule[1]);
      });

      /**
       * Pluralization rules.
       */
      [
        [/s?$/i, 's'],
        [/[^\u0000-\u007F]$/i, '$0'],
        [/([^aeiou]ese)$/i, '$1'],
        [/(ax|test)is$/i, '$1es'],
        [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],
        [/(e[mn]u)s?$/i, '$1s'],
        [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
        [/(seraph|cherub)(?:im)?$/i, '$1im'],
        [/(her|at|gr)o$/i, '$1oes'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
        [/sis$/i, 'ses'],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
        [/([^aeiouy]|qu)y$/i, '$1ies'],
        [/([^ch][ieo][ln])ey$/i, '$1ies'],
        [/(x|ch|ss|sh|zz)$/i, '$1es'],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
        [/\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],
        [/(pe)(?:rson|ople)$/i, '$1ople'],
        [/(child)(?:ren)?$/i, '$1ren'],
        [/eaux$/i, '$0'],
        [/m[ae]n$/i, 'men'],
        ['thou', 'you']
      ].forEach(function (rule) {
        return pluralize.addPluralRule(rule[0], rule[1]);
      });

      /**
       * Singularization rules.
       */
      [
        [/s$/i, ''],
        [/(ss)$/i, '$1'],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
        [/ies$/i, 'y'],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],
        [/\b(mon|smil)ies$/i, '$1ey'],
        [/\b((?:tit)?m|l)ice$/i, '$1ouse'],
        [/(seraph|cherub)im$/i, '$1'],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],
        [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],
        [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],
        [/(test)(?:is|es)$/i, '$1is'],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
        [/(alumn|alg|vertebr)ae$/i, '$1a'],
        [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
        [/(matr|append)ices$/i, '$1ix'],
        [/(pe)(rson|ople)$/i, '$1rson'],
        [/(child)ren$/i, '$1'],
        [/(eau)x?$/i, '$1'],
        [/men$/i, 'man']
      ].forEach(function (rule) {
        return pluralize.addSingularRule(rule[0], rule[1]);
      });

      /**
       * Uncountable rules.
       */
      [
        // Singular words with no plurals.
        'adulthood',
        'advice',
        'agenda',
        'aid',
        'aircraft',
        'alcohol',
        'ammo',
        'analytics',
        'anime',
        'athletics',
        'audio',
        'bison',
        'blood',
        'bream',
        'buffalo',
        'butter',
        'carp',
        'cash',
        'chassis',
        'chess',
        'clothing',
        'cod',
        'commerce',
        'cooperation',
        'corps',
        'debris',
        'diabetes',
        'digestion',
        'elk',
        'energy',
        'equipment',
        'excretion',
        'expertise',
        'firmware',
        'flounder',
        'fun',
        'gallows',
        'garbage',
        'graffiti',
        'hardware',
        'headquarters',
        'health',
        'herpes',
        'highjinks',
        'homework',
        'housework',
        'information',
        'jeans',
        'justice',
        'kudos',
        'labour',
        'literature',
        'machinery',
        'mackerel',
        'mail',
        'media',
        'mews',
        'moose',
        'music',
        'mud',
        'manga',
        'news',
        'only',
        'personnel',
        'pike',
        'plankton',
        'pliers',
        'police',
        'pollution',
        'premises',
        'rain',
        'research',
        'rice',
        'salmon',
        'scissors',
        'series',
        'sewage',
        'shambles',
        'shrimp',
        'software',
        'species',
        'staff',
        'swine',
        'tennis',
        'traffic',
        'transportation',
        'trout',
        'tuna',
        'wealth',
        'welfare',
        'whiting',
        'wildebeest',
        'wildlife',
        'you',
        /pok[eé]mon$/i,
        // Regexes.
        /[^aeiou]ese$/i, // "chinese", "japanese"
        /deer$/i, // "deer", "reindeer"
        /fish$/i, // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i, // "carnivorous"
        /pox$/i, // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize.addUncountableRule);

      return pluralize;
    });
    });

    /**
     * Fuse.js v6.5.3 - Lightweight fuzzy-search (http://fusejs.io)
     *
     * Copyright (c) 2021 Kiro Risk (http://kiro.me)
     * All Rights Reserved. Apache Software License 2.0
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     */

    function isArray(value) {
      return !Array.isArray
        ? getTag(value) === '[object Array]'
        : Array.isArray(value)
    }

    // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js
    const INFINITY = 1 / 0;
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value
      }
      let result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result
    }

    function toString(value) {
      return value == null ? '' : baseToString(value)
    }

    function isString(value) {
      return typeof value === 'string'
    }

    function isNumber(value) {
      return typeof value === 'number'
    }

    // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js
    function isBoolean(value) {
      return (
        value === true ||
        value === false ||
        (isObjectLike(value) && getTag(value) == '[object Boolean]')
      )
    }

    function isObject(value) {
      return typeof value === 'object'
    }

    // Checks if `value` is object-like.
    function isObjectLike(value) {
      return isObject(value) && value !== null
    }

    function isDefined(value) {
      return value !== undefined && value !== null
    }

    function isBlank(value) {
      return !value.trim().length
    }

    // Gets the `toStringTag` of `value`.
    // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js
    function getTag(value) {
      return value == null
        ? value === undefined
          ? '[object Undefined]'
          : '[object Null]'
        : Object.prototype.toString.call(value)
    }

    const EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';

    const INCORRECT_INDEX_TYPE = "Incorrect 'index' type";

    const LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>
      `Invalid value for key ${key}`;

    const PATTERN_LENGTH_TOO_LARGE = (max) =>
      `Pattern length exceeds max of ${max}.`;

    const MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;

    const INVALID_KEY_WEIGHT_VALUE = (key) =>
      `Property 'weight' in key '${key}' must be a positive integer`;

    const hasOwn = Object.prototype.hasOwnProperty;

    class KeyStore {
      constructor(keys) {
        this._keys = [];
        this._keyMap = {};

        let totalWeight = 0;

        keys.forEach((key) => {
          let obj = createKey(key);

          totalWeight += obj.weight;

          this._keys.push(obj);
          this._keyMap[obj.id] = obj;

          totalWeight += obj.weight;
        });

        // Normalize weights so that their sum is equal to 1
        this._keys.forEach((key) => {
          key.weight /= totalWeight;
        });
      }
      get(keyId) {
        return this._keyMap[keyId]
      }
      keys() {
        return this._keys
      }
      toJSON() {
        return JSON.stringify(this._keys)
      }
    }

    function createKey(key) {
      let path = null;
      let id = null;
      let src = null;
      let weight = 1;

      if (isString(key) || isArray(key)) {
        src = key;
        path = createKeyPath(key);
        id = createKeyId(key);
      } else {
        if (!hasOwn.call(key, 'name')) {
          throw new Error(MISSING_KEY_PROPERTY('name'))
        }

        const name = key.name;
        src = name;

        if (hasOwn.call(key, 'weight')) {
          weight = key.weight;

          if (weight <= 0) {
            throw new Error(INVALID_KEY_WEIGHT_VALUE(name))
          }
        }

        path = createKeyPath(name);
        id = createKeyId(name);
      }

      return { path, id, weight, src }
    }

    function createKeyPath(key) {
      return isArray(key) ? key : key.split('.')
    }

    function createKeyId(key) {
      return isArray(key) ? key.join('.') : key
    }

    function get(obj, path) {
      let list = [];
      let arr = false;

      const deepGet = (obj, path, index) => {
        if (!isDefined(obj)) {
          return
        }
        if (!path[index]) {
          // If there's no path left, we've arrived at the object we care about.
          list.push(obj);
        } else {
          let key = path[index];

          const value = obj[key];

          if (!isDefined(value)) {
            return
          }

          // If we're at the last value in the path, and if it's a string/number/bool,
          // add it to the list
          if (
            index === path.length - 1 &&
            (isString(value) || isNumber(value) || isBoolean(value))
          ) {
            list.push(toString(value));
          } else if (isArray(value)) {
            arr = true;
            // Search each item in the array.
            for (let i = 0, len = value.length; i < len; i += 1) {
              deepGet(value[i], path, index + 1);
            }
          } else if (path.length) {
            // An object. Recurse further.
            deepGet(value, path, index + 1);
          }
        }
      };

      // Backwards compatibility (since path used to be a string)
      deepGet(obj, isString(path) ? path.split('.') : path, 0);

      return arr ? list : list[0]
    }

    const MatchOptions = {
      // Whether the matches should be included in the result set. When `true`, each record in the result
      // set will include the indices of the matched characters.
      // These can consequently be used for highlighting purposes.
      includeMatches: false,
      // When `true`, the matching function will continue to the end of a search pattern even if
      // a perfect match has already been located in the string.
      findAllMatches: false,
      // Minimum number of characters that must be matched before a result is considered a match
      minMatchCharLength: 1
    };

    const BasicOptions = {
      // When `true`, the algorithm continues searching to the end of the input even if a perfect
      // match is found before the end of the same input.
      isCaseSensitive: false,
      // When true, the matching function will continue to the end of a search pattern even if
      includeScore: false,
      // List of properties that will be searched. This also supports nested properties.
      keys: [],
      // Whether to sort the result list, by score
      shouldSort: true,
      // Default sort function: sort by ascending score, ascending index
      sortFn: (a, b) =>
        a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1
    };

    const FuzzyOptions = {
      // Approximately where in the text is the pattern expected to be found?
      location: 0,
      // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
      // (of both letters and location), a threshold of '1.0' would match anything.
      threshold: 0.6,
      // Determines how close the match must be to the fuzzy location (specified above).
      // An exact letter match which is 'distance' characters away from the fuzzy location
      // would score as a complete mismatch. A distance of '0' requires the match be at
      // the exact location specified, a threshold of '1000' would require a perfect match
      // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
      distance: 100
    };

    const AdvancedOptions = {
      // When `true`, it enables the use of unix-like search commands
      useExtendedSearch: false,
      // The get function to use when fetching an object's properties.
      // The default will search nested paths *ie foo.bar.baz*
      getFn: get,
      // When `true`, search will ignore `location` and `distance`, so it won't matter
      // where in the string the pattern appears.
      // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
      ignoreLocation: false,
      // When `true`, the calculation for the relevance score (used for sorting) will
      // ignore the field-length norm.
      // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
      ignoreFieldNorm: false,
      // The weight to determine how much field length norm effects scoring.
      fieldNormWeight: 1
    };

    var Config = {
      ...BasicOptions,
      ...MatchOptions,
      ...FuzzyOptions,
      ...AdvancedOptions
    };

    const SPACE = /[^ ]+/g;

    // Field-length norm: the shorter the field, the higher the weight.
    // Set to 3 decimals to reduce index size.
    function norm(weight = 1, mantissa = 3) {
      const cache = new Map();
      const m = Math.pow(10, mantissa);

      return {
        get(value) {
          const numTokens = value.match(SPACE).length;

          if (cache.has(numTokens)) {
            return cache.get(numTokens)
          }

          // Default function is 1/sqrt(x), weight makes that variable
          const norm = 1 / Math.pow(numTokens, 0.5 * weight);

          // In place of `toFixed(mantissa)`, for faster computation
          const n = parseFloat(Math.round(norm * m) / m);

          cache.set(numTokens, n);

          return n
        },
        clear() {
          cache.clear();
        }
      }
    }

    class FuseIndex {
      constructor({
        getFn = Config.getFn,
        fieldNormWeight = Config.fieldNormWeight
      } = {}) {
        this.norm = norm(fieldNormWeight, 3);
        this.getFn = getFn;
        this.isCreated = false;

        this.setIndexRecords();
      }
      setSources(docs = []) {
        this.docs = docs;
      }
      setIndexRecords(records = []) {
        this.records = records;
      }
      setKeys(keys = []) {
        this.keys = keys;
        this._keysMap = {};
        keys.forEach((key, idx) => {
          this._keysMap[key.id] = idx;
        });
      }
      create() {
        if (this.isCreated || !this.docs.length) {
          return
        }

        this.isCreated = true;

        // List is Array<String>
        if (isString(this.docs[0])) {
          this.docs.forEach((doc, docIndex) => {
            this._addString(doc, docIndex);
          });
        } else {
          // List is Array<Object>
          this.docs.forEach((doc, docIndex) => {
            this._addObject(doc, docIndex);
          });
        }

        this.norm.clear();
      }
      // Adds a doc to the end of the index
      add(doc) {
        const idx = this.size();

        if (isString(doc)) {
          this._addString(doc, idx);
        } else {
          this._addObject(doc, idx);
        }
      }
      // Removes the doc at the specified index of the index
      removeAt(idx) {
        this.records.splice(idx, 1);

        // Change ref index of every subsquent doc
        for (let i = idx, len = this.size(); i < len; i += 1) {
          this.records[i].i -= 1;
        }
      }
      getValueForItemAtKeyId(item, keyId) {
        return item[this._keysMap[keyId]]
      }
      size() {
        return this.records.length
      }
      _addString(doc, docIndex) {
        if (!isDefined(doc) || isBlank(doc)) {
          return
        }

        let record = {
          v: doc,
          i: docIndex,
          n: this.norm.get(doc)
        };

        this.records.push(record);
      }
      _addObject(doc, docIndex) {
        let record = { i: docIndex, $: {} };

        // Iterate over every key (i.e, path), and fetch the value at that key
        this.keys.forEach((key, keyIndex) => {
          // console.log(key)
          let value = this.getFn(doc, key.path);

          if (!isDefined(value)) {
            return
          }

          if (isArray(value)) {
            let subRecords = [];
            const stack = [{ nestedArrIndex: -1, value }];

            while (stack.length) {
              const { nestedArrIndex, value } = stack.pop();

              if (!isDefined(value)) {
                continue
              }

              if (isString(value) && !isBlank(value)) {
                let subRecord = {
                  v: value,
                  i: nestedArrIndex,
                  n: this.norm.get(value)
                };

                subRecords.push(subRecord);
              } else if (isArray(value)) {
                value.forEach((item, k) => {
                  stack.push({
                    nestedArrIndex: k,
                    value: item
                  });
                });
              } else ;
            }
            record.$[keyIndex] = subRecords;
          } else if (!isBlank(value)) {
            let subRecord = {
              v: value,
              n: this.norm.get(value)
            };

            record.$[keyIndex] = subRecord;
          }
        });

        this.records.push(record);
      }
      toJSON() {
        return {
          keys: this.keys,
          records: this.records
        }
      }
    }

    function createIndex(
      keys,
      docs,
      { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}
    ) {
      const myIndex = new FuseIndex({ getFn, fieldNormWeight });
      myIndex.setKeys(keys.map(createKey));
      myIndex.setSources(docs);
      myIndex.create();
      return myIndex
    }

    function parseIndex(
      data,
      { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}
    ) {
      const { keys, records } = data;
      const myIndex = new FuseIndex({ getFn, fieldNormWeight });
      myIndex.setKeys(keys);
      myIndex.setIndexRecords(records);
      return myIndex
    }

    function computeScore$1(
      pattern,
      {
        errors = 0,
        currentLocation = 0,
        expectedLocation = 0,
        distance = Config.distance,
        ignoreLocation = Config.ignoreLocation
      } = {}
    ) {
      const accuracy = errors / pattern.length;

      if (ignoreLocation) {
        return accuracy
      }

      const proximity = Math.abs(expectedLocation - currentLocation);

      if (!distance) {
        // Dodge divide by zero error.
        return proximity ? 1.0 : accuracy
      }

      return accuracy + proximity / distance
    }

    function convertMaskToIndices(
      matchmask = [],
      minMatchCharLength = Config.minMatchCharLength
    ) {
      let indices = [];
      let start = -1;
      let end = -1;
      let i = 0;

      for (let len = matchmask.length; i < len; i += 1) {
        let match = matchmask[i];
        if (match && start === -1) {
          start = i;
        } else if (!match && start !== -1) {
          end = i - 1;
          if (end - start + 1 >= minMatchCharLength) {
            indices.push([start, end]);
          }
          start = -1;
        }
      }

      // (i-1 - start) + 1 => i - start
      if (matchmask[i - 1] && i - start >= minMatchCharLength) {
        indices.push([start, i - 1]);
      }

      return indices
    }

    // Machine word size
    const MAX_BITS = 32;

    function search(
      text,
      pattern,
      patternAlphabet,
      {
        location = Config.location,
        distance = Config.distance,
        threshold = Config.threshold,
        findAllMatches = Config.findAllMatches,
        minMatchCharLength = Config.minMatchCharLength,
        includeMatches = Config.includeMatches,
        ignoreLocation = Config.ignoreLocation
      } = {}
    ) {
      if (pattern.length > MAX_BITS) {
        throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))
      }

      const patternLen = pattern.length;
      // Set starting location at beginning text and initialize the alphabet.
      const textLen = text.length;
      // Handle the case when location > text.length
      const expectedLocation = Math.max(0, Math.min(location, textLen));
      // Highest score beyond which we give up.
      let currentThreshold = threshold;
      // Is there a nearby exact match? (speedup)
      let bestLocation = expectedLocation;

      // Performance: only computer matches when the minMatchCharLength > 1
      // OR if `includeMatches` is true.
      const computeMatches = minMatchCharLength > 1 || includeMatches;
      // A mask of the matches, used for building the indices
      const matchMask = computeMatches ? Array(textLen) : [];

      let index;

      // Get all exact matches, here for speed up
      while ((index = text.indexOf(pattern, bestLocation)) > -1) {
        let score = computeScore$1(pattern, {
          currentLocation: index,
          expectedLocation,
          distance,
          ignoreLocation
        });

        currentThreshold = Math.min(score, currentThreshold);
        bestLocation = index + patternLen;

        if (computeMatches) {
          let i = 0;
          while (i < patternLen) {
            matchMask[index + i] = 1;
            i += 1;
          }
        }
      }

      // Reset the best location
      bestLocation = -1;

      let lastBitArr = [];
      let finalScore = 1;
      let binMax = patternLen + textLen;

      const mask = 1 << (patternLen - 1);

      for (let i = 0; i < patternLen; i += 1) {
        // Scan for the best match; each iteration allows for one more error.
        // Run a binary search to determine how far from the match location we can stray
        // at this error level.
        let binMin = 0;
        let binMid = binMax;

        while (binMin < binMid) {
          const score = computeScore$1(pattern, {
            errors: i,
            currentLocation: expectedLocation + binMid,
            expectedLocation,
            distance,
            ignoreLocation
          });

          if (score <= currentThreshold) {
            binMin = binMid;
          } else {
            binMax = binMid;
          }

          binMid = Math.floor((binMax - binMin) / 2 + binMin);
        }

        // Use the result from this iteration as the maximum for the next.
        binMax = binMid;

        let start = Math.max(1, expectedLocation - binMid + 1);
        let finish = findAllMatches
          ? textLen
          : Math.min(expectedLocation + binMid, textLen) + patternLen;

        // Initialize the bit array
        let bitArr = Array(finish + 2);

        bitArr[finish + 1] = (1 << i) - 1;

        for (let j = finish; j >= start; j -= 1) {
          let currentLocation = j - 1;
          let charMatch = patternAlphabet[text.charAt(currentLocation)];

          if (computeMatches) {
            // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)
            matchMask[currentLocation] = +!!charMatch;
          }

          // First pass: exact match
          bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;

          // Subsequent passes: fuzzy match
          if (i) {
            bitArr[j] |=
              ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];
          }

          if (bitArr[j] & mask) {
            finalScore = computeScore$1(pattern, {
              errors: i,
              currentLocation,
              expectedLocation,
              distance,
              ignoreLocation
            });

            // This match will almost certainly be better than any existing match.
            // But check anyway.
            if (finalScore <= currentThreshold) {
              // Indeed it is
              currentThreshold = finalScore;
              bestLocation = currentLocation;

              // Already passed `loc`, downhill from here on in.
              if (bestLocation <= expectedLocation) {
                break
              }

              // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.
              start = Math.max(1, 2 * expectedLocation - bestLocation);
            }
          }
        }

        // No hope for a (better) match at greater error levels.
        const score = computeScore$1(pattern, {
          errors: i + 1,
          currentLocation: expectedLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });

        if (score > currentThreshold) {
          break
        }

        lastBitArr = bitArr;
      }

      const result = {
        isMatch: bestLocation >= 0,
        // Count exact matches (those with a score of 0) to be "almost" exact
        score: Math.max(0.001, finalScore)
      };

      if (computeMatches) {
        const indices = convertMaskToIndices(matchMask, minMatchCharLength);
        if (!indices.length) {
          result.isMatch = false;
        } else if (includeMatches) {
          result.indices = indices;
        }
      }

      return result
    }

    function createPatternAlphabet(pattern) {
      let mask = {};

      for (let i = 0, len = pattern.length; i < len; i += 1) {
        const char = pattern.charAt(i);
        mask[char] = (mask[char] || 0) | (1 << (len - i - 1));
      }

      return mask
    }

    class BitapSearch {
      constructor(
        pattern,
        {
          location = Config.location,
          threshold = Config.threshold,
          distance = Config.distance,
          includeMatches = Config.includeMatches,
          findAllMatches = Config.findAllMatches,
          minMatchCharLength = Config.minMatchCharLength,
          isCaseSensitive = Config.isCaseSensitive,
          ignoreLocation = Config.ignoreLocation
        } = {}
      ) {
        this.options = {
          location,
          threshold,
          distance,
          includeMatches,
          findAllMatches,
          minMatchCharLength,
          isCaseSensitive,
          ignoreLocation
        };

        this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();

        this.chunks = [];

        if (!this.pattern.length) {
          return
        }

        const addChunk = (pattern, startIndex) => {
          this.chunks.push({
            pattern,
            alphabet: createPatternAlphabet(pattern),
            startIndex
          });
        };

        const len = this.pattern.length;

        if (len > MAX_BITS) {
          let i = 0;
          const remainder = len % MAX_BITS;
          const end = len - remainder;

          while (i < end) {
            addChunk(this.pattern.substr(i, MAX_BITS), i);
            i += MAX_BITS;
          }

          if (remainder) {
            const startIndex = len - MAX_BITS;
            addChunk(this.pattern.substr(startIndex), startIndex);
          }
        } else {
          addChunk(this.pattern, 0);
        }
      }

      searchIn(text) {
        const { isCaseSensitive, includeMatches } = this.options;

        if (!isCaseSensitive) {
          text = text.toLowerCase();
        }

        // Exact match
        if (this.pattern === text) {
          let result = {
            isMatch: true,
            score: 0
          };

          if (includeMatches) {
            result.indices = [[0, text.length - 1]];
          }

          return result
        }

        // Otherwise, use Bitap algorithm
        const {
          location,
          distance,
          threshold,
          findAllMatches,
          minMatchCharLength,
          ignoreLocation
        } = this.options;

        let allIndices = [];
        let totalScore = 0;
        let hasMatches = false;

        this.chunks.forEach(({ pattern, alphabet, startIndex }) => {
          const { isMatch, score, indices } = search(text, pattern, alphabet, {
            location: location + startIndex,
            distance,
            threshold,
            findAllMatches,
            minMatchCharLength,
            includeMatches,
            ignoreLocation
          });

          if (isMatch) {
            hasMatches = true;
          }

          totalScore += score;

          if (isMatch && indices) {
            allIndices = [...allIndices, ...indices];
          }
        });

        let result = {
          isMatch: hasMatches,
          score: hasMatches ? totalScore / this.chunks.length : 1
        };

        if (hasMatches && includeMatches) {
          result.indices = allIndices;
        }

        return result
      }
    }

    class BaseMatch {
      constructor(pattern) {
        this.pattern = pattern;
      }
      static isMultiMatch(pattern) {
        return getMatch(pattern, this.multiRegex)
      }
      static isSingleMatch(pattern) {
        return getMatch(pattern, this.singleRegex)
      }
      search(/*text*/) {}
    }

    function getMatch(pattern, exp) {
      const matches = pattern.match(exp);
      return matches ? matches[1] : null
    }

    // Token: 'file

    class ExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'exact'
      }
      static get multiRegex() {
        return /^="(.*)"$/
      }
      static get singleRegex() {
        return /^=(.*)$/
      }
      search(text) {
        const isMatch = text === this.pattern;

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, this.pattern.length - 1]
        }
      }
    }

    // Token: !fire

    class InverseExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'inverse-exact'
      }
      static get multiRegex() {
        return /^!"(.*)"$/
      }
      static get singleRegex() {
        return /^!(.*)$/
      }
      search(text) {
        const index = text.indexOf(this.pattern);
        const isMatch = index === -1;

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        }
      }
    }

    // Token: ^file

    class PrefixExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'prefix-exact'
      }
      static get multiRegex() {
        return /^\^"(.*)"$/
      }
      static get singleRegex() {
        return /^\^(.*)$/
      }
      search(text) {
        const isMatch = text.startsWith(this.pattern);

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, this.pattern.length - 1]
        }
      }
    }

    // Token: !^fire

    class InversePrefixExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'inverse-prefix-exact'
      }
      static get multiRegex() {
        return /^!\^"(.*)"$/
      }
      static get singleRegex() {
        return /^!\^(.*)$/
      }
      search(text) {
        const isMatch = !text.startsWith(this.pattern);

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        }
      }
    }

    // Token: .file$

    class SuffixExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'suffix-exact'
      }
      static get multiRegex() {
        return /^"(.*)"\$$/
      }
      static get singleRegex() {
        return /^(.*)\$$/
      }
      search(text) {
        const isMatch = text.endsWith(this.pattern);

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [text.length - this.pattern.length, text.length - 1]
        }
      }
    }

    // Token: !.file$

    class InverseSuffixExactMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'inverse-suffix-exact'
      }
      static get multiRegex() {
        return /^!"(.*)"\$$/
      }
      static get singleRegex() {
        return /^!(.*)\$$/
      }
      search(text) {
        const isMatch = !text.endsWith(this.pattern);
        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        }
      }
    }

    class FuzzyMatch extends BaseMatch {
      constructor(
        pattern,
        {
          location = Config.location,
          threshold = Config.threshold,
          distance = Config.distance,
          includeMatches = Config.includeMatches,
          findAllMatches = Config.findAllMatches,
          minMatchCharLength = Config.minMatchCharLength,
          isCaseSensitive = Config.isCaseSensitive,
          ignoreLocation = Config.ignoreLocation
        } = {}
      ) {
        super(pattern);
        this._bitapSearch = new BitapSearch(pattern, {
          location,
          threshold,
          distance,
          includeMatches,
          findAllMatches,
          minMatchCharLength,
          isCaseSensitive,
          ignoreLocation
        });
      }
      static get type() {
        return 'fuzzy'
      }
      static get multiRegex() {
        return /^"(.*)"$/
      }
      static get singleRegex() {
        return /^(.*)$/
      }
      search(text) {
        return this._bitapSearch.searchIn(text)
      }
    }

    // Token: 'file

    class IncludeMatch extends BaseMatch {
      constructor(pattern) {
        super(pattern);
      }
      static get type() {
        return 'include'
      }
      static get multiRegex() {
        return /^'"(.*)"$/
      }
      static get singleRegex() {
        return /^'(.*)$/
      }
      search(text) {
        let location = 0;
        let index;

        const indices = [];
        const patternLen = this.pattern.length;

        // Get all exact matches
        while ((index = text.indexOf(this.pattern, location)) > -1) {
          location = index + patternLen;
          indices.push([index, location - 1]);
        }

        const isMatch = !!indices.length;

        return {
          isMatch,
          score: isMatch ? 0 : 1,
          indices
        }
      }
    }

    // ❗Order is important. DO NOT CHANGE.
    const searchers = [
      ExactMatch,
      IncludeMatch,
      PrefixExactMatch,
      InversePrefixExactMatch,
      InverseSuffixExactMatch,
      SuffixExactMatch,
      InverseExactMatch,
      FuzzyMatch
    ];

    const searchersLen = searchers.length;

    // Regex to split by spaces, but keep anything in quotes together
    const SPACE_RE = / +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;
    const OR_TOKEN = '|';

    // Return a 2D array representation of the query, for simpler parsing.
    // Example:
    // "^core go$ | rb$ | py$ xy$" => [["^core", "go$"], ["rb$"], ["py$", "xy$"]]
    function parseQuery(pattern, options = {}) {
      return pattern.split(OR_TOKEN).map((item) => {
        let query = item
          .trim()
          .split(SPACE_RE)
          .filter((item) => item && !!item.trim());

        let results = [];
        for (let i = 0, len = query.length; i < len; i += 1) {
          const queryItem = query[i];

          // 1. Handle multiple query match (i.e, once that are quoted, like `"hello world"`)
          let found = false;
          let idx = -1;
          while (!found && ++idx < searchersLen) {
            const searcher = searchers[idx];
            let token = searcher.isMultiMatch(queryItem);
            if (token) {
              results.push(new searcher(token, options));
              found = true;
            }
          }

          if (found) {
            continue
          }

          // 2. Handle single query matches (i.e, once that are *not* quoted)
          idx = -1;
          while (++idx < searchersLen) {
            const searcher = searchers[idx];
            let token = searcher.isSingleMatch(queryItem);
            if (token) {
              results.push(new searcher(token, options));
              break
            }
          }
        }

        return results
      })
    }

    // These extended matchers can return an array of matches, as opposed
    // to a singl match
    const MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);

    /**
     * Command-like searching
     * ======================
     *
     * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,
     * search in a given text.
     *
     * Search syntax:
     *
     * | Token       | Match type                 | Description                            |
     * | ----------- | -------------------------- | -------------------------------------- |
     * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |
     * | `=scheme`   | exact-match                | Items that are `scheme`                |
     * | `'python`   | include-match              | Items that include `python`            |
     * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |
     * | `^java`     | prefix-exact-match         | Items that start with `java`           |
     * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |
     * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |
     * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |
     *
     * A single pipe character acts as an OR operator. For example, the following
     * query matches entries that start with `core` and end with either`go`, `rb`,
     * or`py`.
     *
     * ```
     * ^core go$ | rb$ | py$
     * ```
     */
    class ExtendedSearch {
      constructor(
        pattern,
        {
          isCaseSensitive = Config.isCaseSensitive,
          includeMatches = Config.includeMatches,
          minMatchCharLength = Config.minMatchCharLength,
          ignoreLocation = Config.ignoreLocation,
          findAllMatches = Config.findAllMatches,
          location = Config.location,
          threshold = Config.threshold,
          distance = Config.distance
        } = {}
      ) {
        this.query = null;
        this.options = {
          isCaseSensitive,
          includeMatches,
          minMatchCharLength,
          findAllMatches,
          ignoreLocation,
          location,
          threshold,
          distance
        };

        this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
        this.query = parseQuery(this.pattern, this.options);
      }

      static condition(_, options) {
        return options.useExtendedSearch
      }

      searchIn(text) {
        const query = this.query;

        if (!query) {
          return {
            isMatch: false,
            score: 1
          }
        }

        const { includeMatches, isCaseSensitive } = this.options;

        text = isCaseSensitive ? text : text.toLowerCase();

        let numMatches = 0;
        let allIndices = [];
        let totalScore = 0;

        // ORs
        for (let i = 0, qLen = query.length; i < qLen; i += 1) {
          const searchers = query[i];

          // Reset indices
          allIndices.length = 0;
          numMatches = 0;

          // ANDs
          for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {
            const searcher = searchers[j];
            const { isMatch, indices, score } = searcher.search(text);

            if (isMatch) {
              numMatches += 1;
              totalScore += score;
              if (includeMatches) {
                const type = searcher.constructor.type;
                if (MultiMatchSet.has(type)) {
                  allIndices = [...allIndices, ...indices];
                } else {
                  allIndices.push(indices);
                }
              }
            } else {
              totalScore = 0;
              numMatches = 0;
              allIndices.length = 0;
              break
            }
          }

          // OR condition, so if TRUE, return
          if (numMatches) {
            let result = {
              isMatch: true,
              score: totalScore / numMatches
            };

            if (includeMatches) {
              result.indices = allIndices;
            }

            return result
          }
        }

        // Nothing was matched
        return {
          isMatch: false,
          score: 1
        }
      }
    }

    const registeredSearchers = [];

    function register(...args) {
      registeredSearchers.push(...args);
    }

    function createSearcher(pattern, options) {
      for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
        let searcherClass = registeredSearchers[i];
        if (searcherClass.condition(pattern, options)) {
          return new searcherClass(pattern, options)
        }
      }

      return new BitapSearch(pattern, options)
    }

    const LogicalOperator = {
      AND: '$and',
      OR: '$or'
    };

    const KeyType = {
      PATH: '$path',
      PATTERN: '$val'
    };

    const isExpression = (query) =>
      !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);

    const isPath = (query) => !!query[KeyType.PATH];

    const isLeaf = (query) =>
      !isArray(query) && isObject(query) && !isExpression(query);

    const convertToExplicit = (query) => ({
      [LogicalOperator.AND]: Object.keys(query).map((key) => ({
        [key]: query[key]
      }))
    });

    // When `auto` is `true`, the parse function will infer and initialize and add
    // the appropriate `Searcher` instance
    function parse(query, options, { auto = true } = {}) {
      const next = (query) => {
        let keys = Object.keys(query);

        const isQueryPath = isPath(query);

        if (!isQueryPath && keys.length > 1 && !isExpression(query)) {
          return next(convertToExplicit(query))
        }

        if (isLeaf(query)) {
          const key = isQueryPath ? query[KeyType.PATH] : keys[0];

          const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];

          if (!isString(pattern)) {
            throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))
          }

          const obj = {
            keyId: createKeyId(key),
            pattern
          };

          if (auto) {
            obj.searcher = createSearcher(pattern, options);
          }

          return obj
        }

        let node = {
          children: [],
          operator: keys[0]
        };

        keys.forEach((key) => {
          const value = query[key];

          if (isArray(value)) {
            value.forEach((item) => {
              node.children.push(next(item));
            });
          }
        });

        return node
      };

      if (!isExpression(query)) {
        query = convertToExplicit(query);
      }

      return next(query)
    }

    // Practical scoring function
    function computeScore(
      results,
      { ignoreFieldNorm = Config.ignoreFieldNorm }
    ) {
      results.forEach((result) => {
        let totalScore = 1;

        result.matches.forEach(({ key, norm, score }) => {
          const weight = key ? key.weight : null;

          totalScore *= Math.pow(
            score === 0 && weight ? Number.EPSILON : score,
            (weight || 1) * (ignoreFieldNorm ? 1 : norm)
          );
        });

        result.score = totalScore;
      });
    }

    function transformMatches(result, data) {
      const matches = result.matches;
      data.matches = [];

      if (!isDefined(matches)) {
        return
      }

      matches.forEach((match) => {
        if (!isDefined(match.indices) || !match.indices.length) {
          return
        }

        const { indices, value } = match;

        let obj = {
          indices,
          value
        };

        if (match.key) {
          obj.key = match.key.src;
        }

        if (match.idx > -1) {
          obj.refIndex = match.idx;
        }

        data.matches.push(obj);
      });
    }

    function transformScore(result, data) {
      data.score = result.score;
    }

    function format$2(
      results,
      docs,
      {
        includeMatches = Config.includeMatches,
        includeScore = Config.includeScore
      } = {}
    ) {
      const transformers = [];

      if (includeMatches) transformers.push(transformMatches);
      if (includeScore) transformers.push(transformScore);

      return results.map((result) => {
        const { idx } = result;

        const data = {
          item: docs[idx],
          refIndex: idx
        };

        if (transformers.length) {
          transformers.forEach((transformer) => {
            transformer(result, data);
          });
        }

        return data
      })
    }

    class Fuse {
      constructor(docs, options = {}, index) {
        this.options = { ...Config, ...options };

        if (
          this.options.useExtendedSearch &&
          !true
        ) {
          throw new Error(EXTENDED_SEARCH_UNAVAILABLE)
        }

        this._keyStore = new KeyStore(this.options.keys);

        this.setCollection(docs, index);
      }

      setCollection(docs, index) {
        this._docs = docs;

        if (index && !(index instanceof FuseIndex)) {
          throw new Error(INCORRECT_INDEX_TYPE)
        }

        this._myIndex =
          index ||
          createIndex(this.options.keys, this._docs, {
            getFn: this.options.getFn,
            fieldNormWeight: this.options.fieldNormWeight
          });
      }

      add(doc) {
        if (!isDefined(doc)) {
          return
        }

        this._docs.push(doc);
        this._myIndex.add(doc);
      }

      remove(predicate = (/* doc, idx */) => false) {
        const results = [];

        for (let i = 0, len = this._docs.length; i < len; i += 1) {
          const doc = this._docs[i];
          if (predicate(doc, i)) {
            this.removeAt(i);
            i -= 1;
            len -= 1;

            results.push(doc);
          }
        }

        return results
      }

      removeAt(idx) {
        this._docs.splice(idx, 1);
        this._myIndex.removeAt(idx);
      }

      getIndex() {
        return this._myIndex
      }

      search(query, { limit = -1 } = {}) {
        const {
          includeMatches,
          includeScore,
          shouldSort,
          sortFn,
          ignoreFieldNorm
        } = this.options;

        let results = isString(query)
          ? isString(this._docs[0])
            ? this._searchStringList(query)
            : this._searchObjectList(query)
          : this._searchLogical(query);

        computeScore(results, { ignoreFieldNorm });

        if (shouldSort) {
          results.sort(sortFn);
        }

        if (isNumber(limit) && limit > -1) {
          results = results.slice(0, limit);
        }

        return format$2(results, this._docs, {
          includeMatches,
          includeScore
        })
      }

      _searchStringList(query) {
        const searcher = createSearcher(query, this.options);
        const { records } = this._myIndex;
        const results = [];

        // Iterate over every string in the index
        records.forEach(({ v: text, i: idx, n: norm }) => {
          if (!isDefined(text)) {
            return
          }

          const { isMatch, score, indices } = searcher.searchIn(text);

          if (isMatch) {
            results.push({
              item: text,
              idx,
              matches: [{ score, value: text, norm, indices }]
            });
          }
        });

        return results
      }

      _searchLogical(query) {

        const expression = parse(query, this.options);

        const evaluate = (node, item, idx) => {
          if (!node.children) {
            const { keyId, searcher } = node;

            const matches = this._findMatches({
              key: this._keyStore.get(keyId),
              value: this._myIndex.getValueForItemAtKeyId(item, keyId),
              searcher
            });

            if (matches && matches.length) {
              return [
                {
                  idx,
                  item,
                  matches
                }
              ]
            }

            return []
          }

          const res = [];
          for (let i = 0, len = node.children.length; i < len; i += 1) {
            const child = node.children[i];
            const result = evaluate(child, item, idx);
            if (result.length) {
              res.push(...result);
            } else if (node.operator === LogicalOperator.AND) {
              return []
            }
          }
          return res
        };

        const records = this._myIndex.records;
        const resultMap = {};
        const results = [];

        records.forEach(({ $: item, i: idx }) => {
          if (isDefined(item)) {
            let expResults = evaluate(expression, item, idx);

            if (expResults.length) {
              // Dedupe when adding
              if (!resultMap[idx]) {
                resultMap[idx] = { idx, item, matches: [] };
                results.push(resultMap[idx]);
              }
              expResults.forEach(({ matches }) => {
                resultMap[idx].matches.push(...matches);
              });
            }
          }
        });

        return results
      }

      _searchObjectList(query) {
        const searcher = createSearcher(query, this.options);
        const { keys, records } = this._myIndex;
        const results = [];

        // List is Array<Object>
        records.forEach(({ $: item, i: idx }) => {
          if (!isDefined(item)) {
            return
          }

          let matches = [];

          // Iterate over every key (i.e, path), and fetch the value at that key
          keys.forEach((key, keyIndex) => {
            matches.push(
              ...this._findMatches({
                key,
                value: item[keyIndex],
                searcher
              })
            );
          });

          if (matches.length) {
            results.push({
              idx,
              item,
              matches
            });
          }
        });

        return results
      }
      _findMatches({ key, value, searcher }) {
        if (!isDefined(value)) {
          return []
        }

        let matches = [];

        if (isArray(value)) {
          value.forEach(({ v: text, i: idx, n: norm }) => {
            if (!isDefined(text)) {
              return
            }

            const { isMatch, score, indices } = searcher.searchIn(text);

            if (isMatch) {
              matches.push({
                score,
                key,
                value: text,
                idx,
                norm,
                indices
              });
            }
          });
        } else {
          const { v: text, n: norm } = value;

          const { isMatch, score, indices } = searcher.searchIn(text);

          if (isMatch) {
            matches.push({ score, key, value: text, norm, indices });
          }
        }

        return matches
      }
    }

    Fuse.version = '6.5.3';
    Fuse.createIndex = createIndex;
    Fuse.parseIndex = parseIndex;
    Fuse.config = Config;

    {
      Fuse.parseQuery = parse;
    }

    {
      register(ExtendedSearch);
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    /* --------------------------------------------
     *
     * Return a truthy value if is zero
     *
     * --------------------------------------------
     */
    function canBeZero (val) {
    	if (val === 0) {
    		return true;
    	}
    	return val;
    }

    function makeAccessor (acc) {
    	if (!canBeZero(acc)) return null;
    	if (Array.isArray(acc)) {
    		return d => acc.map(k => {
    			return typeof k !== 'function' ? d[k] : k(d);
    		});
    	} else if (typeof acc !== 'function') { // eslint-disable-line no-else-return
    		return d => d[acc];
    	}
    	return acc;
    }

    /* --------------------------------------------
     *
     * Remove undefined fields from an object
     *
     * --------------------------------------------
     */

    // From Object.fromEntries polyfill https://github.com/tc39/proposal-object-from-entries/blob/master/polyfill.js#L1
    function fromEntries(iter) {
    	const obj = {};

    	for (const pair of iter) {
    		if (Object(pair) !== pair) {
    			throw new TypeError("iterable for fromEntries should yield objects");
    		}

    		// Consistency with Map: contract is that entry has "0" and "1" keys, not
    		// that it is an array or iterable.

    		const { "0": key, "1": val } = pair;

    		Object.defineProperty(obj, key, {
    			configurable: true,
    			enumerable: true,
    			writable: true,
    			value: val,
    		});
    	}

    	return obj;
    }

    function filterObject (obj, comparisonObj = {}) {
    	return fromEntries(Object.entries(obj).filter(([key, value]) => {
    		return value !== undefined
    			&& comparisonObj[key] === undefined;
    	}));
    }

    /* --------------------------------------------
     *
     * Calculate the extents of desired fields
     * For example, a fields object like this:
     * `{'x': d => d.x, 'y': d => d.y}`
     * For data like this:
     * [{ x: 0, y: -10 }, { x: 10, y: 0 }, { x: 5, y: 10 }]
     * Returns an object like:
     * `{ x: [0, 10], y: [-10, 10] }`
     *
     * --------------------------------------------
     */
    function calcExtents (data, fields) {
    	if (!Array.isArray(data)) {
    		throw new TypeError('The first argument of calcExtents() must be an array.');
    	}

    	if (
    		Array.isArray(fields)
    		|| fields === undefined
    		|| fields === null
    	) {
    		throw new TypeError('The second argument of calcExtents() must be an '
    		+ 'object with field names as keys as accessor functions as values.');
    	}

    	const extents = {};

    	const keys = Object.keys(fields);
    	const kl = keys.length;
    	let i;
    	let j;
    	let k;
    	let s;
    	let min;
    	let max;
    	let acc;
    	let val;

    	const dl = data.length;
    	for (i = 0; i < kl; i += 1) {
    		s = keys[i];
    		acc = fields[s];
    		min = null;
    		max = null;
    		for (j = 0; j < dl; j += 1) {
    			val = acc(data[j]);
    			if (Array.isArray(val)) {
    				const vl = val.length;
    				for (k = 0; k < vl; k += 1) {
    					if (val[k] !== undefined && val[k] !== null && Number.isNaN(val[k]) === false) {
    						if (min === null || val[k] < min) {
    							min = val[k];
    						}
    						if (max === null || val[k] > max) {
    							max = val[k];
    						}
    					}
    				}
    			} else if (val !== undefined && val !== null && Number.isNaN(val) === false) {
    				if (min === null || val < min) {
    					min = val;
    				}
    				if (max === null || val > max) {
    					max = val;
    				}
    			}
    		}
    		extents[s] = [min, max];
    	}

    	return extents;
    }

    /* --------------------------------------------
     * If we have a domain from settings, fill in
     * any null values with ones from our measured extents
     * otherwise, return the measured extent
     */
    function partialDomain (domain = [], directive) {
    	if (Array.isArray(directive) === true) {
    		return directive.map((d, i) => {
    			if (d === null) {
    				return domain[i];
    			}
    			return d;
    		});
    	}
    	return domain;
    }

    function calcDomain (s) {
    	return function domainCalc ([$extents, $domain]) {
    		return $extents ? partialDomain($extents[s], $domain) : $domain;
    	};
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector$1(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending$1(f(d), x);
    }

    function number$3(x) {
      return x === null ? NaN : +x;
    }

    const ascendingBisect$1 = bisector$1(ascending$1);
    const bisectRight$1 = ascendingBisect$1.right;
    bisector$1(number$3).center;
    var bisect$1 = bisectRight$1;

    var e10$1 = Math.sqrt(50),
        e5$1 = Math.sqrt(10),
        e2$1 = Math.sqrt(2);

    function ticks$1(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement$1(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) * step;
      } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement$1(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10$1 ? 10 : error >= e5$1 ? 5 : error >= e2$1 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10$1 ? 10 : error >= e5$1 ? 5 : error >= e2$1 ? 2 : 1);
    }

    function tickStep$1(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10$1) step1 *= 10;
      else if (error >= e5$1) step1 *= 5;
      else if (error >= e2$1) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function initRange$1(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function define$1(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend$1(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color$1() {}

    var darker$1 = 0.7;
    var brighter$1 = 1 / darker$1;

    var reI$1 = "\\s*([+-]?\\d+)\\s*",
        reN$1 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP$1 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex$1 = /^#([0-9a-f]{3,8})$/,
        reRgbInteger$1 = new RegExp("^rgb\\(" + [reI$1, reI$1, reI$1] + "\\)$"),
        reRgbPercent$1 = new RegExp("^rgb\\(" + [reP$1, reP$1, reP$1] + "\\)$"),
        reRgbaInteger$1 = new RegExp("^rgba\\(" + [reI$1, reI$1, reI$1, reN$1] + "\\)$"),
        reRgbaPercent$1 = new RegExp("^rgba\\(" + [reP$1, reP$1, reP$1, reN$1] + "\\)$"),
        reHslPercent$1 = new RegExp("^hsl\\(" + [reN$1, reP$1, reP$1] + "\\)$"),
        reHslaPercent$1 = new RegExp("^hsla\\(" + [reN$1, reP$1, reP$1, reN$1] + "\\)$");

    var named$1 = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define$1(Color$1, color$1, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex$1, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex$1,
      formatHsl: color_formatHsl$1,
      formatRgb: color_formatRgb$1,
      toString: color_formatRgb$1
    });

    function color_formatHex$1() {
      return this.rgb().formatHex();
    }

    function color_formatHsl$1() {
      return hslConvert$1(this).formatHsl();
    }

    function color_formatRgb$1() {
      return this.rgb().formatRgb();
    }

    function color$1(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex$1.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn$1(m) // #ff0000
          : l === 3 ? new Rgb$1((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba$1(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba$1((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger$1.exec(format)) ? new Rgb$1(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent$1.exec(format)) ? new Rgb$1(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger$1.exec(format)) ? rgba$1(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent$1.exec(format)) ? rgba$1(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent$1.exec(format)) ? hsla$1(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent$1.exec(format)) ? hsla$1(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named$1.hasOwnProperty(format) ? rgbn$1(named$1[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb$1(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn$1(n) {
      return new Rgb$1(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba$1(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb$1(r, g, b, a);
    }

    function rgbConvert$1(o) {
      if (!(o instanceof Color$1)) o = color$1(o);
      if (!o) return new Rgb$1;
      o = o.rgb();
      return new Rgb$1(o.r, o.g, o.b, o.opacity);
    }

    function rgb$3(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert$1(r) : new Rgb$1(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb$1(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define$1(Rgb$1, rgb$3, extend$1(Color$1, {
      brighter: function(k) {
        k = k == null ? brighter$1 : Math.pow(brighter$1, k);
        return new Rgb$1(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker$1 : Math.pow(darker$1, k);
        return new Rgb$1(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex$1, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex$1,
      formatRgb: rgb_formatRgb$1,
      toString: rgb_formatRgb$1
    }));

    function rgb_formatHex$1() {
      return "#" + hex$1(this.r) + hex$1(this.g) + hex$1(this.b);
    }

    function rgb_formatRgb$1() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex$1(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla$1(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl$1(h, s, l, a);
    }

    function hslConvert$1(o) {
      if (o instanceof Hsl$1) return new Hsl$1(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color$1)) o = color$1(o);
      if (!o) return new Hsl$1;
      if (o instanceof Hsl$1) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl$1(h, s, l, o.opacity);
    }

    function hsl$1(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert$1(h) : new Hsl$1(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl$1(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define$1(Hsl$1, hsl$1, extend$1(Color$1, {
      brighter: function(k) {
        k = k == null ? brighter$1 : Math.pow(brighter$1, k);
        return new Hsl$1(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker$1 : Math.pow(darker$1, k);
        return new Hsl$1(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb$1(
          hsl2rgb$1(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb$1(h, m1, m2),
          hsl2rgb$1(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb$1(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var constant$1 = x => () => x;

    function linear$3(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential$1(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma$1(y) {
      return (y = +y) === 1 ? nogamma$1 : function(a, b) {
        return b - a ? exponential$1(a, b, y) : constant$1(isNaN(a) ? b : a);
      };
    }

    function nogamma$1(a, b) {
      var d = b - a;
      return d ? linear$3(a, d) : constant$1(isNaN(a) ? b : a);
    }

    var rgb$2 = (function rgbGamma(y) {
      var color = gamma$1(y);

      function rgb(start, end) {
        var r = color((start = rgb$3(start)).r, (end = rgb$3(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma$1(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb.gamma = rgbGamma;

      return rgb;
    })(1);

    function numberArray$1(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray$1(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray$1(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate$1(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date$1(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber$1(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object$1(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate$1(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA$1 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB$1 = new RegExp(reA$1.source, "g");

    function zero$1(b) {
      return function() {
        return b;
      };
    }

    function one$1(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string$1(a, b) {
      var bi = reA$1.lastIndex = reB$1.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA$1.exec(a))
          && (bm = reB$1.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber$1(am, bm)});
        }
        bi = reB$1.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one$1(q[0].x)
          : zero$1(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate$1(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$1(b)
          : (t === "number" ? interpolateNumber$1
          : t === "string" ? ((c = color$1(b)) ? (b = c, rgb$2) : string$1)
          : b instanceof color$1 ? rgb$2
          : b instanceof Date ? date$1
          : isNumberArray$1(b) ? numberArray$1
          : Array.isArray(b) ? genericArray$1
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$1
          : interpolateNumber$1)(a, b);
    }

    function interpolateRound$1(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    function constants$1(x) {
      return function() {
        return x;
      };
    }

    function number$2(x) {
      return +x;
    }

    var unit$1 = [0, 1];

    function identity$4(x) {
      return x;
    }

    function normalize$1(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants$1(isNaN(b) ? NaN : 0.5);
    }

    function clamper$1(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap$1(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize$1(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize$1(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap$1(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize$1(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisect$1(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy$1(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer$1() {
      var domain = unit$1,
          range = unit$1,
          interpolate = interpolate$1,
          transform,
          untransform,
          unknown,
          clamp = identity$4,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$4) clamp = clamper$1(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap$1 : bimap$1;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber$1)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$2), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = interpolateRound$1, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$4, rescale()) : clamp !== identity$4;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous$1() {
      return transformer$1()(identity$4, identity$4);
    }

    function formatDecimal$1(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts$1(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent$1(x) {
      return x = formatDecimalParts$1(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup$1(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals$1(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re$1 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier$1(specifier) {
      if (!(match = re$1.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier$1({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier$1.prototype = FormatSpecifier$1.prototype; // instanceof

    function FormatSpecifier$1(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier$1.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim$1(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent$1;

    function formatPrefixAuto$1(x, p) {
      var d = formatDecimalParts$1(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent$1 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts$1(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded$1(x, p) {
      var d = formatDecimalParts$1(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes$1 = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal$1,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded$1(x * 100, p),
      "r": formatRounded$1,
      "s": formatPrefixAuto$1,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$3(x) {
      return x;
    }

    var map$1 = Array.prototype.map,
        prefixes$1 = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale$1(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup$1(map$1.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$3 : formatNumerals$1(map$1.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier$1(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes$1[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes$1[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim$1(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes$1[8 + prefixExponent$1 / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier$1(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes$1[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale$1;
    var format$1;
    var formatPrefix$1;

    defaultLocale$1({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format$1 = locale$1.format;
      formatPrefix$1 = locale$1.formatPrefix;
      return locale$1;
    }

    function precisionFixed$1(step) {
      return Math.max(0, -exponent$1(Math.abs(step)));
    }

    function precisionPrefix$1(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
    }

    function precisionRound$1(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
    }

    function tickFormat$1(start, stop, count, specifier) {
      var step = tickStep$1(start, stop, count),
          precision;
      specifier = formatSpecifier$1(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix$1(step, value))) specifier.precision = precision;
          return formatPrefix$1(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound$1(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed$1(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format$1(specifier);
    }

    function linearish$1(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks$1(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat$1(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement$1(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear$2() {
      var scale = continuous$1();

      scale.copy = function() {
        return copy$1(scale, linear$2());
      };

      initRange$1.apply(scale, arguments);

      return linearish$1(scale);
    }

    function transformPow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function transformSqrt(x) {
      return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }

    function transformSquare(x) {
      return x < 0 ? -x * x : x * x;
    }

    function powish(transform) {
      var scale = transform(identity$4, identity$4),
          exponent = 1;

      function rescale() {
        return exponent === 1 ? transform(identity$4, identity$4)
            : exponent === 0.5 ? transform(transformSqrt, transformSquare)
            : transform(transformPow(exponent), transformPow(1 / exponent));
      }

      scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
      };

      return linearish$1(scale);
    }

    function pow$2() {
      var scale = powish(transformer$1());

      scale.copy = function() {
        return copy$1(scale, pow$2()).exponent(scale.exponent());
      };

      initRange$1.apply(scale, arguments);

      return scale;
    }

    function sqrt() {
      return pow$2.apply(null, arguments).exponent(0.5);
    }

    var defaultScales = {
    	x: linear$2,
    	y: linear$2,
    	z: linear$2,
    	r: sqrt
    };

    /* --------------------------------------------
     *
     * Determine whether a scale is a log, symlog, power or other
     * This is not meant to be exhaustive of all the different types of
     * scales in d3-scale and focuses on continuous scales
     *
     * --------------------------------------------
     */
    function findScaleType(scale) {
    	if (scale.constant) {
    		return 'symlog';
    	}
    	if (scale.base) {
    		return 'log';
    	}
    	if (scale.exponent) {
    		if (scale.exponent() === 0.5) {
    			return 'sqrt';
    		}
    		return 'pow';
    	}
    	return 'other';
    }

    function identity$2 (d) {
    	return d;
    }

    function log(sign) {
    	return x => Math.log(sign * x);
    }

    function exp(sign) {
    	return x => sign * Math.exp(x);
    }

    function symlog$1(c) {
    	return x => Math.sign(x) * Math.log1p(Math.abs(x / c));
    }

    function symexp(c) {
    	return x => Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    }

    function pow$1(exponent) {
    	return function powFn(x) {
    		return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    	};
    }

    function getPadFunctions(scale) {
    	const scaleType = findScaleType(scale);

    	if (scaleType === 'log') {
    		const sign = Math.sign(scale.domain()[0]);
    		return { lift: log(sign), ground: exp(sign), scaleType };
    	}
    	if (scaleType === 'pow') {
    		const exponent = 1;
    		return { lift: pow$1(exponent), ground: pow$1(1 / exponent), scaleType };
    	}
    	if (scaleType === 'sqrt') {
    		const exponent = 0.5;
    		return { lift: pow$1(exponent), ground: pow$1(1 / exponent), scaleType };
    	}
    	if (scaleType === 'symlog') {
    		const constant = 1;
    		return { lift: symlog$1(constant), ground: symexp(constant), scaleType };
    	}

    	return { lift: identity$2, ground: identity$2, scaleType };
    }

    /* --------------------------------------------
     *
     * Returns a modified scale domain by in/decreasing
     * the min/max by taking the desired difference
     * in pixels and converting it to units of data.
     * Returns an array that you can set as the new domain.
     * Padding contributed by @veltman.
     * See here for discussion of transforms: https://github.com/d3/d3-scale/issues/150
     *
     * --------------------------------------------
     */

    function padScale (scale, padding) {
    	if (typeof scale.range !== 'function') {
    		throw new Error('Scale method `range` must be a function');
    	}
    	if (typeof scale.domain !== 'function') {
    		throw new Error('Scale method `domain` must be a function');
    	}
    	if (!Array.isArray(padding)) {
    		return scale.domain();
    	}

    	if (scale.domain().length !== 2) {
    		console.warn('[LayerCake] The scale is expected to have a domain of length 2 to use padding. Are you sure you want to use padding? Your scale\'s domain is:', scale.domain());
    	}
    	if (scale.range().length !== 2) {
    		console.warn('[LayerCake] The scale is expected to have a range of length 2 to use padding. Are you sure you want to use padding? Your scale\'s range is:', scale.range());
    	}

    	const { lift, ground } = getPadFunctions(scale);

    	const d0 = scale.domain()[0];

    	const isTime = Object.prototype.toString.call(d0) === '[object Date]';

    	const [d1, d2] = scale.domain().map(d => {
    		return isTime ? lift(d.getTime()) : lift(d);
    	});
    	const [r1, r2] = scale.range();
    	const paddingLeft = padding[0] || 0;
    	const paddingRight = padding[1] || 0;

    	const step = (d2 - d1) / (Math.abs(r2 - r1) - paddingLeft - paddingRight); // Math.abs() to properly handle reversed scales

    	return [d1 - paddingLeft * step, paddingRight * step + d2].map(d => {
    		return isTime ? ground(new Date(d)) : ground(d);
    	});
    }

    /* eslint-disable no-nested-ternary */
    function calcBaseRange(s, width, height, reverse, percentRange) {
    	let min;
    	let max;
    	if (percentRange === true) {
    		min = 0;
    		max = 100;
    	} else {
    		min = s === 'r' ? 1 : 0;
    		max = s === 'y' ? height : s === 'r' ? 25 : width;
    	}
    	return reverse === true ? [max, min] : [min, max];
    }

    function getDefaultRange(s, width, height, reverse, range, percentRange) {
    	return !range
    		? calcBaseRange(s, width, height, reverse, percentRange)
    		: typeof range === 'function'
    			? range({ width, height })
    			: range;
    }

    function createScale (s) {
    	return function scaleCreator ([$scale, $extents, $domain, $padding, $nice, $reverse, $width, $height, $range, $percentScale]) {
    		if ($extents === null) {
    			return null;
    		}

    		const defaultRange = getDefaultRange(s, $width, $height, $reverse, $range, $percentScale);

    		const scale = $scale === defaultScales[s] ? $scale() : $scale.copy();

    		/* --------------------------------------------
    		 * On creation, `$domain` will already have any nulls filled in
    		 * But if we set it via the context it might not, so rerun it through partialDomain
    		 */
    		scale
    			.domain(partialDomain($extents[s], $domain))
    			.range(defaultRange);

    		if ($padding) {
    			scale.domain(padScale(scale, $padding));
    		}

    		if ($nice === true) {
    			if (typeof scale.nice === 'function') {
    				scale.nice();
    			} else {
    				console.error(`[Layer Cake] You set \`${s}Nice: true\` but the ${s}Scale does not have a \`.nice\` method. Ignoring...`);
    			}
    		}

    		return scale;
    	};
    }

    function createGetter ([$acc, $scale]) {
    	return d => {
    		const val = $acc(d);
    		if (Array.isArray(val)) {
    			return val.map(v => $scale(v));
    		}
    		return $scale(val);
    	};
    }

    function getRange([$scale]) {
    	if (typeof $scale === 'function') {
    		if (typeof $scale.range === 'function') {
    			return $scale.range();
    		}
    		console.error('[LayerCake] Your scale doesn\'t have a `.range` method?');
    	}
    	return null;
    }

    var defaultReverses = {
    	x: false,
    	y: true,
    	z: false,
    	r: false
    };

    /* node_modules/layercake/src/LayerCake.svelte generated by Svelte v3.43.1 */

    const { Object: Object_1$3, console: console_1$4 } = globals;
    const file$B = "node_modules/layercake/src/LayerCake.svelte";

    const get_default_slot_changes$2 = dirty => ({
    	element: dirty[0] & /*element*/ 4,
    	width: dirty[0] & /*$width_d*/ 64,
    	height: dirty[0] & /*$height_d*/ 128,
    	aspectRatio: dirty[0] & /*$aspectRatio_d*/ 256,
    	containerWidth: dirty[0] & /*$_containerWidth*/ 512,
    	containerHeight: dirty[0] & /*$_containerHeight*/ 1024
    });

    const get_default_slot_context$2 = ctx => ({
    	element: /*element*/ ctx[2],
    	width: /*$width_d*/ ctx[6],
    	height: /*$height_d*/ ctx[7],
    	aspectRatio: /*$aspectRatio_d*/ ctx[8],
    	containerWidth: /*$_containerWidth*/ ctx[9],
    	containerHeight: /*$_containerHeight*/ ctx[10]
    });

    // (308:0) {#if (ssr === true || typeof window !== 'undefined')}
    function create_if_block$m(ctx) {
    	let div;
    	let div_style_value;
    	let div_resize_listener;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[54].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[53], get_default_slot_context$2);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "layercake-container svelte-vhzpsp");

    			attr_dev(div, "style", div_style_value = "position:" + /*position*/ ctx[5] + "; " + (/*position*/ ctx[5] === 'absolute'
    			? 'top:0;right:0;bottom:0;left:0;'
    			: '') + " " + (/*pointerEvents*/ ctx[4] === false
    			? 'pointer-events:none;'
    			: '') + "");

    			add_render_callback(() => /*div_elementresize_handler*/ ctx[56].call(div));
    			add_location(div, file$B, 308, 1, 9512);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[55](div);
    			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[56].bind(div));
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*element, $width_d, $height_d, $aspectRatio_d, $_containerWidth, $_containerHeight*/ 1988 | dirty[1] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[53],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[53], dirty, get_default_slot_changes$2),
    						get_default_slot_context$2
    					);
    				}
    			}

    			if (!current || dirty[0] & /*position, pointerEvents*/ 48 && div_style_value !== (div_style_value = "position:" + /*position*/ ctx[5] + "; " + (/*position*/ ctx[5] === 'absolute'
    			? 'top:0;right:0;bottom:0;left:0;'
    			: '') + " " + (/*pointerEvents*/ ctx[4] === false
    			? 'pointer-events:none;'
    			: '') + "")) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[55](null);
    			div_resize_listener();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(308:0) {#if (ssr === true || typeof window !== 'undefined')}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = (/*ssr*/ ctx[3] === true || typeof window !== 'undefined') && create_if_block$m(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*ssr*/ ctx[3] === true || typeof window !== 'undefined') {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*ssr*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$m(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let context;
    	let $width_d;
    	let $height_d;
    	let $aspectRatio_d;
    	let $_containerWidth;
    	let $_containerHeight;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LayerCake', slots, ['default']);
    	let { ssr = false } = $$props;
    	let { pointerEvents = true } = $$props;
    	let { position = 'relative' } = $$props;
    	let { percentRange = false } = $$props;
    	let { width = undefined } = $$props;
    	let { height = undefined } = $$props;
    	let { containerWidth = width || 100 } = $$props;
    	let { containerHeight = height || 100 } = $$props;
    	let { element = undefined } = $$props;
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { z = undefined } = $$props;
    	let { r = undefined } = $$props;
    	let { custom = {} } = $$props;
    	let { data = [] } = $$props;
    	let { xDomain = undefined } = $$props;
    	let { yDomain = undefined } = $$props;
    	let { zDomain = undefined } = $$props;
    	let { rDomain = undefined } = $$props;
    	let { xNice = false } = $$props;
    	let { yNice = false } = $$props;
    	let { zNice = false } = $$props;
    	let { rNice = false } = $$props;
    	let { xReverse = defaultReverses.x } = $$props;
    	let { yReverse = defaultReverses.y } = $$props;
    	let { zReverse = defaultReverses.z } = $$props;
    	let { rReverse = defaultReverses.r } = $$props;
    	let { xPadding = undefined } = $$props;
    	let { yPadding = undefined } = $$props;
    	let { zPadding = undefined } = $$props;
    	let { rPadding = undefined } = $$props;
    	let { xScale = defaultScales.x } = $$props;
    	let { yScale = defaultScales.y } = $$props;
    	let { zScale = defaultScales.y } = $$props;
    	let { rScale = defaultScales.r } = $$props;
    	let { xRange = undefined } = $$props;
    	let { yRange = undefined } = $$props;
    	let { zRange = undefined } = $$props;
    	let { rRange = undefined } = $$props;
    	let { padding = {} } = $$props;
    	let { extents = {} } = $$props;
    	let { flatData = undefined } = $$props;

    	/* --------------------------------------------
     * Preserve a copy of our passed in settings before we modify them
     * Return this to the user's context so they can reference things if need be
     * Add the active keys since those aren't on our settings object.
     * This is mostly an escape-hatch
     */
    	const config = {};

    	/* --------------------------------------------
     * Make store versions of each parameter
     * Prefix these with `_` to keep things organized
     */
    	const _percentRange = writable();

    	const _containerWidth = writable();
    	validate_store(_containerWidth, '_containerWidth');
    	component_subscribe($$self, _containerWidth, value => $$invalidate(9, $_containerWidth = value));
    	const _containerHeight = writable();
    	validate_store(_containerHeight, '_containerHeight');
    	component_subscribe($$self, _containerHeight, value => $$invalidate(10, $_containerHeight = value));
    	const _x = writable();
    	const _y = writable();
    	const _z = writable();
    	const _r = writable();
    	const _custom = writable();
    	const _data = writable();
    	const _xDomain = writable();
    	const _yDomain = writable();
    	const _zDomain = writable();
    	const _rDomain = writable();
    	const _xNice = writable();
    	const _yNice = writable();
    	const _zNice = writable();
    	const _rNice = writable();
    	const _xReverse = writable();
    	const _yReverse = writable();
    	const _zReverse = writable();
    	const _rReverse = writable();
    	const _xPadding = writable();
    	const _yPadding = writable();
    	const _zPadding = writable();
    	const _rPadding = writable();
    	const _xScale = writable();
    	const _yScale = writable();
    	const _zScale = writable();
    	const _rScale = writable();
    	const _xRange = writable();
    	const _yRange = writable();
    	const _zRange = writable();
    	const _rRange = writable();
    	const _padding = writable();
    	const _flatData = writable();
    	const _extents = writable();
    	const _config = writable(config);

    	/* --------------------------------------------
     * Create derived values
     * Suffix these with `_d`
     */
    	const activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {
    		const obj = {};

    		if ($x) {
    			obj.x = $x;
    		}

    		if ($y) {
    			obj.y = $y;
    		}

    		if ($z) {
    			obj.z = $z;
    		}

    		if ($r) {
    			obj.r = $r;
    		}

    		return obj;
    	});

    	const padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {
    		const defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };
    		return Object.assign(defaultPadding, $padding);
    	});

    	const box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {
    		const b = {};
    		b.top = $padding.top;
    		b.right = $containerWidth - $padding.right;
    		b.bottom = $containerHeight - $padding.bottom;
    		b.left = $padding.left;
    		b.width = b.right - b.left;
    		b.height = b.bottom - b.top;

    		if (b.width <= 0) {
    			console.error('[LayerCake] Target div has zero or negative width. Did you forget to set an explicit width in CSS on the container?');
    		}

    		if (b.height <= 0) {
    			console.error('[LayerCake] Target div has zero or negative height. Did you forget to set an explicit height in CSS on the container?');
    		}

    		return b;
    	});

    	const width_d = derived([box_d], ([$box]) => {
    		return $box.width;
    	});

    	validate_store(width_d, 'width_d');
    	component_subscribe($$self, width_d, value => $$invalidate(6, $width_d = value));

    	const height_d = derived([box_d], ([$box]) => {
    		return $box.height;
    	});

    	validate_store(height_d, 'height_d');
    	component_subscribe($$self, height_d, value => $$invalidate(7, $height_d = value));

    	/* --------------------------------------------
     * Calculate extents by taking the extent of the data
     * and filling that in with anything set by the user
     */
    	const extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {
    		const getters = filterObject($activeGetters, $extents);

    		if (Object.keys(getters).length > 0) {
    			return {
    				...calcExtents($flatData, getters),
    				...$extents
    			};
    		} else {
    			return {};
    		}
    	});

    	const xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));
    	const yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));
    	const zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));
    	const rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));

    	const xScale_d = derived(
    		[
    			_xScale,
    			extents_d,
    			xDomain_d,
    			_xPadding,
    			_xNice,
    			_xReverse,
    			width_d,
    			height_d,
    			_xRange,
    			_percentRange
    		],
    		createScale('x')
    	);

    	const xGet_d = derived([_x, xScale_d], createGetter);

    	const yScale_d = derived(
    		[
    			_yScale,
    			extents_d,
    			yDomain_d,
    			_yPadding,
    			_yNice,
    			_yReverse,
    			width_d,
    			height_d,
    			_yRange,
    			_percentRange
    		],
    		createScale('y')
    	);

    	const yGet_d = derived([_y, yScale_d], createGetter);

    	const zScale_d = derived(
    		[
    			_zScale,
    			extents_d,
    			zDomain_d,
    			_zPadding,
    			_zNice,
    			_zReverse,
    			width_d,
    			height_d,
    			_zRange,
    			_percentRange
    		],
    		createScale('z')
    	);

    	const zGet_d = derived([_z, zScale_d], createGetter);

    	const rScale_d = derived(
    		[
    			_rScale,
    			extents_d,
    			rDomain_d,
    			_rPadding,
    			_rNice,
    			_rReverse,
    			width_d,
    			height_d,
    			_rRange,
    			_percentRange
    		],
    		createScale('r')
    	);

    	const rGet_d = derived([_r, rScale_d], createGetter);
    	const xRange_d = derived([xScale_d], getRange);
    	const yRange_d = derived([yScale_d], getRange);
    	const zRange_d = derived([zScale_d], getRange);
    	const rRange_d = derived([rScale_d], getRange);

    	const aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {
    		return $width / $height;
    	});

    	validate_store(aspectRatio_d, 'aspectRatio_d');
    	component_subscribe($$self, aspectRatio_d, value => $$invalidate(8, $aspectRatio_d = value));

    	const writable_props = [
    		'ssr',
    		'pointerEvents',
    		'position',
    		'percentRange',
    		'width',
    		'height',
    		'containerWidth',
    		'containerHeight',
    		'element',
    		'x',
    		'y',
    		'z',
    		'r',
    		'custom',
    		'data',
    		'xDomain',
    		'yDomain',
    		'zDomain',
    		'rDomain',
    		'xNice',
    		'yNice',
    		'zNice',
    		'rNice',
    		'xReverse',
    		'yReverse',
    		'zReverse',
    		'rReverse',
    		'xPadding',
    		'yPadding',
    		'zPadding',
    		'rPadding',
    		'xScale',
    		'yScale',
    		'zScale',
    		'rScale',
    		'xRange',
    		'yRange',
    		'zRange',
    		'rRange',
    		'padding',
    		'extents',
    		'flatData'
    	];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<LayerCake> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(2, element);
    		});
    	}

    	function div_elementresize_handler() {
    		containerWidth = this.clientWidth;
    		containerHeight = this.clientHeight;
    		$$invalidate(0, containerWidth);
    		$$invalidate(1, containerHeight);
    	}

    	$$self.$$set = $$props => {
    		if ('ssr' in $$props) $$invalidate(3, ssr = $$props.ssr);
    		if ('pointerEvents' in $$props) $$invalidate(4, pointerEvents = $$props.pointerEvents);
    		if ('position' in $$props) $$invalidate(5, position = $$props.position);
    		if ('percentRange' in $$props) $$invalidate(16, percentRange = $$props.percentRange);
    		if ('width' in $$props) $$invalidate(17, width = $$props.width);
    		if ('height' in $$props) $$invalidate(18, height = $$props.height);
    		if ('containerWidth' in $$props) $$invalidate(0, containerWidth = $$props.containerWidth);
    		if ('containerHeight' in $$props) $$invalidate(1, containerHeight = $$props.containerHeight);
    		if ('element' in $$props) $$invalidate(2, element = $$props.element);
    		if ('x' in $$props) $$invalidate(19, x = $$props.x);
    		if ('y' in $$props) $$invalidate(20, y = $$props.y);
    		if ('z' in $$props) $$invalidate(21, z = $$props.z);
    		if ('r' in $$props) $$invalidate(22, r = $$props.r);
    		if ('custom' in $$props) $$invalidate(23, custom = $$props.custom);
    		if ('data' in $$props) $$invalidate(24, data = $$props.data);
    		if ('xDomain' in $$props) $$invalidate(25, xDomain = $$props.xDomain);
    		if ('yDomain' in $$props) $$invalidate(26, yDomain = $$props.yDomain);
    		if ('zDomain' in $$props) $$invalidate(27, zDomain = $$props.zDomain);
    		if ('rDomain' in $$props) $$invalidate(28, rDomain = $$props.rDomain);
    		if ('xNice' in $$props) $$invalidate(29, xNice = $$props.xNice);
    		if ('yNice' in $$props) $$invalidate(30, yNice = $$props.yNice);
    		if ('zNice' in $$props) $$invalidate(31, zNice = $$props.zNice);
    		if ('rNice' in $$props) $$invalidate(32, rNice = $$props.rNice);
    		if ('xReverse' in $$props) $$invalidate(33, xReverse = $$props.xReverse);
    		if ('yReverse' in $$props) $$invalidate(34, yReverse = $$props.yReverse);
    		if ('zReverse' in $$props) $$invalidate(35, zReverse = $$props.zReverse);
    		if ('rReverse' in $$props) $$invalidate(36, rReverse = $$props.rReverse);
    		if ('xPadding' in $$props) $$invalidate(37, xPadding = $$props.xPadding);
    		if ('yPadding' in $$props) $$invalidate(38, yPadding = $$props.yPadding);
    		if ('zPadding' in $$props) $$invalidate(39, zPadding = $$props.zPadding);
    		if ('rPadding' in $$props) $$invalidate(40, rPadding = $$props.rPadding);
    		if ('xScale' in $$props) $$invalidate(41, xScale = $$props.xScale);
    		if ('yScale' in $$props) $$invalidate(42, yScale = $$props.yScale);
    		if ('zScale' in $$props) $$invalidate(43, zScale = $$props.zScale);
    		if ('rScale' in $$props) $$invalidate(44, rScale = $$props.rScale);
    		if ('xRange' in $$props) $$invalidate(45, xRange = $$props.xRange);
    		if ('yRange' in $$props) $$invalidate(46, yRange = $$props.yRange);
    		if ('zRange' in $$props) $$invalidate(47, zRange = $$props.zRange);
    		if ('rRange' in $$props) $$invalidate(48, rRange = $$props.rRange);
    		if ('padding' in $$props) $$invalidate(49, padding = $$props.padding);
    		if ('extents' in $$props) $$invalidate(50, extents = $$props.extents);
    		if ('flatData' in $$props) $$invalidate(51, flatData = $$props.flatData);
    		if ('$$scope' in $$props) $$invalidate(53, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		writable,
    		derived,
    		makeAccessor,
    		filterObject,
    		calcExtents,
    		calcDomain,
    		createScale,
    		createGetter,
    		getRange,
    		defaultScales,
    		defaultReverses,
    		ssr,
    		pointerEvents,
    		position,
    		percentRange,
    		width,
    		height,
    		containerWidth,
    		containerHeight,
    		element,
    		x,
    		y,
    		z,
    		r,
    		custom,
    		data,
    		xDomain,
    		yDomain,
    		zDomain,
    		rDomain,
    		xNice,
    		yNice,
    		zNice,
    		rNice,
    		xReverse,
    		yReverse,
    		zReverse,
    		rReverse,
    		xPadding,
    		yPadding,
    		zPadding,
    		rPadding,
    		xScale,
    		yScale,
    		zScale,
    		rScale,
    		xRange,
    		yRange,
    		zRange,
    		rRange,
    		padding,
    		extents,
    		flatData,
    		config,
    		_percentRange,
    		_containerWidth,
    		_containerHeight,
    		_x,
    		_y,
    		_z,
    		_r,
    		_custom,
    		_data,
    		_xDomain,
    		_yDomain,
    		_zDomain,
    		_rDomain,
    		_xNice,
    		_yNice,
    		_zNice,
    		_rNice,
    		_xReverse,
    		_yReverse,
    		_zReverse,
    		_rReverse,
    		_xPadding,
    		_yPadding,
    		_zPadding,
    		_rPadding,
    		_xScale,
    		_yScale,
    		_zScale,
    		_rScale,
    		_xRange,
    		_yRange,
    		_zRange,
    		_rRange,
    		_padding,
    		_flatData,
    		_extents,
    		_config,
    		activeGetters_d,
    		padding_d,
    		box_d,
    		width_d,
    		height_d,
    		extents_d,
    		xDomain_d,
    		yDomain_d,
    		zDomain_d,
    		rDomain_d,
    		xScale_d,
    		xGet_d,
    		yScale_d,
    		yGet_d,
    		zScale_d,
    		zGet_d,
    		rScale_d,
    		rGet_d,
    		xRange_d,
    		yRange_d,
    		zRange_d,
    		rRange_d,
    		aspectRatio_d,
    		context,
    		$width_d,
    		$height_d,
    		$aspectRatio_d,
    		$_containerWidth,
    		$_containerHeight
    	});

    	$$self.$inject_state = $$props => {
    		if ('ssr' in $$props) $$invalidate(3, ssr = $$props.ssr);
    		if ('pointerEvents' in $$props) $$invalidate(4, pointerEvents = $$props.pointerEvents);
    		if ('position' in $$props) $$invalidate(5, position = $$props.position);
    		if ('percentRange' in $$props) $$invalidate(16, percentRange = $$props.percentRange);
    		if ('width' in $$props) $$invalidate(17, width = $$props.width);
    		if ('height' in $$props) $$invalidate(18, height = $$props.height);
    		if ('containerWidth' in $$props) $$invalidate(0, containerWidth = $$props.containerWidth);
    		if ('containerHeight' in $$props) $$invalidate(1, containerHeight = $$props.containerHeight);
    		if ('element' in $$props) $$invalidate(2, element = $$props.element);
    		if ('x' in $$props) $$invalidate(19, x = $$props.x);
    		if ('y' in $$props) $$invalidate(20, y = $$props.y);
    		if ('z' in $$props) $$invalidate(21, z = $$props.z);
    		if ('r' in $$props) $$invalidate(22, r = $$props.r);
    		if ('custom' in $$props) $$invalidate(23, custom = $$props.custom);
    		if ('data' in $$props) $$invalidate(24, data = $$props.data);
    		if ('xDomain' in $$props) $$invalidate(25, xDomain = $$props.xDomain);
    		if ('yDomain' in $$props) $$invalidate(26, yDomain = $$props.yDomain);
    		if ('zDomain' in $$props) $$invalidate(27, zDomain = $$props.zDomain);
    		if ('rDomain' in $$props) $$invalidate(28, rDomain = $$props.rDomain);
    		if ('xNice' in $$props) $$invalidate(29, xNice = $$props.xNice);
    		if ('yNice' in $$props) $$invalidate(30, yNice = $$props.yNice);
    		if ('zNice' in $$props) $$invalidate(31, zNice = $$props.zNice);
    		if ('rNice' in $$props) $$invalidate(32, rNice = $$props.rNice);
    		if ('xReverse' in $$props) $$invalidate(33, xReverse = $$props.xReverse);
    		if ('yReverse' in $$props) $$invalidate(34, yReverse = $$props.yReverse);
    		if ('zReverse' in $$props) $$invalidate(35, zReverse = $$props.zReverse);
    		if ('rReverse' in $$props) $$invalidate(36, rReverse = $$props.rReverse);
    		if ('xPadding' in $$props) $$invalidate(37, xPadding = $$props.xPadding);
    		if ('yPadding' in $$props) $$invalidate(38, yPadding = $$props.yPadding);
    		if ('zPadding' in $$props) $$invalidate(39, zPadding = $$props.zPadding);
    		if ('rPadding' in $$props) $$invalidate(40, rPadding = $$props.rPadding);
    		if ('xScale' in $$props) $$invalidate(41, xScale = $$props.xScale);
    		if ('yScale' in $$props) $$invalidate(42, yScale = $$props.yScale);
    		if ('zScale' in $$props) $$invalidate(43, zScale = $$props.zScale);
    		if ('rScale' in $$props) $$invalidate(44, rScale = $$props.rScale);
    		if ('xRange' in $$props) $$invalidate(45, xRange = $$props.xRange);
    		if ('yRange' in $$props) $$invalidate(46, yRange = $$props.yRange);
    		if ('zRange' in $$props) $$invalidate(47, zRange = $$props.zRange);
    		if ('rRange' in $$props) $$invalidate(48, rRange = $$props.rRange);
    		if ('padding' in $$props) $$invalidate(49, padding = $$props.padding);
    		if ('extents' in $$props) $$invalidate(50, extents = $$props.extents);
    		if ('flatData' in $$props) $$invalidate(51, flatData = $$props.flatData);
    		if ('context' in $$props) $$invalidate(52, context = $$props.context);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*x*/ 524288) {
    			if (x) config.x = x;
    		}

    		if ($$self.$$.dirty[0] & /*y*/ 1048576) {
    			if (y) config.y = y;
    		}

    		if ($$self.$$.dirty[0] & /*z*/ 2097152) {
    			if (z) config.z = z;
    		}

    		if ($$self.$$.dirty[0] & /*r*/ 4194304) {
    			if (r) config.r = r;
    		}

    		if ($$self.$$.dirty[0] & /*xDomain*/ 33554432) {
    			if (xDomain) config.xDomain = xDomain;
    		}

    		if ($$self.$$.dirty[0] & /*yDomain*/ 67108864) {
    			if (yDomain) config.yDomain = yDomain;
    		}

    		if ($$self.$$.dirty[0] & /*zDomain*/ 134217728) {
    			if (zDomain) config.zDomain = zDomain;
    		}

    		if ($$self.$$.dirty[0] & /*rDomain*/ 268435456) {
    			if (rDomain) config.rDomain = rDomain;
    		}

    		if ($$self.$$.dirty[1] & /*xRange*/ 16384) {
    			if (xRange) config.xRange = xRange;
    		}

    		if ($$self.$$.dirty[1] & /*yRange*/ 32768) {
    			if (yRange) config.yRange = yRange;
    		}

    		if ($$self.$$.dirty[1] & /*zRange*/ 65536) {
    			if (zRange) config.zRange = zRange;
    		}

    		if ($$self.$$.dirty[1] & /*rRange*/ 131072) {
    			if (rRange) config.rRange = rRange;
    		}

    		if ($$self.$$.dirty[0] & /*percentRange*/ 65536) {
    			_percentRange.set(percentRange);
    		}

    		if ($$self.$$.dirty[0] & /*containerWidth*/ 1) {
    			_containerWidth.set(containerWidth);
    		}

    		if ($$self.$$.dirty[0] & /*containerHeight*/ 2) {
    			_containerHeight.set(containerHeight);
    		}

    		if ($$self.$$.dirty[0] & /*x*/ 524288) {
    			_x.set(makeAccessor(x));
    		}

    		if ($$self.$$.dirty[0] & /*y*/ 1048576) {
    			_y.set(makeAccessor(y));
    		}

    		if ($$self.$$.dirty[0] & /*z*/ 2097152) {
    			_z.set(makeAccessor(z));
    		}

    		if ($$self.$$.dirty[0] & /*r*/ 4194304) {
    			_r.set(makeAccessor(r));
    		}

    		if ($$self.$$.dirty[0] & /*xDomain*/ 33554432) {
    			_xDomain.set(xDomain);
    		}

    		if ($$self.$$.dirty[0] & /*yDomain*/ 67108864) {
    			_yDomain.set(yDomain);
    		}

    		if ($$self.$$.dirty[0] & /*zDomain*/ 134217728) {
    			_zDomain.set(zDomain);
    		}

    		if ($$self.$$.dirty[0] & /*rDomain*/ 268435456) {
    			_rDomain.set(rDomain);
    		}

    		if ($$self.$$.dirty[0] & /*custom*/ 8388608) {
    			_custom.set(custom);
    		}

    		if ($$self.$$.dirty[0] & /*data*/ 16777216) {
    			_data.set(data);
    		}

    		if ($$self.$$.dirty[0] & /*xNice*/ 536870912) {
    			_xNice.set(xNice);
    		}

    		if ($$self.$$.dirty[0] & /*yNice*/ 1073741824) {
    			_yNice.set(yNice);
    		}

    		if ($$self.$$.dirty[1] & /*zNice*/ 1) {
    			_zNice.set(zNice);
    		}

    		if ($$self.$$.dirty[1] & /*rNice*/ 2) {
    			_rNice.set(rNice);
    		}

    		if ($$self.$$.dirty[1] & /*xReverse*/ 4) {
    			_xReverse.set(xReverse);
    		}

    		if ($$self.$$.dirty[1] & /*yReverse*/ 8) {
    			_yReverse.set(yReverse);
    		}

    		if ($$self.$$.dirty[1] & /*zReverse*/ 16) {
    			_zReverse.set(zReverse);
    		}

    		if ($$self.$$.dirty[1] & /*rReverse*/ 32) {
    			_rReverse.set(rReverse);
    		}

    		if ($$self.$$.dirty[1] & /*xPadding*/ 64) {
    			_xPadding.set(xPadding);
    		}

    		if ($$self.$$.dirty[1] & /*yPadding*/ 128) {
    			_yPadding.set(yPadding);
    		}

    		if ($$self.$$.dirty[1] & /*zPadding*/ 256) {
    			_zPadding.set(zPadding);
    		}

    		if ($$self.$$.dirty[1] & /*rPadding*/ 512) {
    			_rPadding.set(rPadding);
    		}

    		if ($$self.$$.dirty[1] & /*xScale*/ 1024) {
    			_xScale.set(xScale);
    		}

    		if ($$self.$$.dirty[1] & /*yScale*/ 2048) {
    			_yScale.set(yScale);
    		}

    		if ($$self.$$.dirty[1] & /*zScale*/ 4096) {
    			_zScale.set(zScale);
    		}

    		if ($$self.$$.dirty[1] & /*rScale*/ 8192) {
    			_rScale.set(rScale);
    		}

    		if ($$self.$$.dirty[1] & /*xRange*/ 16384) {
    			_xRange.set(xRange);
    		}

    		if ($$self.$$.dirty[1] & /*yRange*/ 32768) {
    			_yRange.set(yRange);
    		}

    		if ($$self.$$.dirty[1] & /*zRange*/ 65536) {
    			_zRange.set(zRange);
    		}

    		if ($$self.$$.dirty[1] & /*rRange*/ 131072) {
    			_rRange.set(rRange);
    		}

    		if ($$self.$$.dirty[1] & /*padding*/ 262144) {
    			_padding.set(padding);
    		}

    		if ($$self.$$.dirty[1] & /*extents*/ 524288) {
    			_extents.set(filterObject(extents));
    		}

    		if ($$self.$$.dirty[0] & /*data*/ 16777216 | $$self.$$.dirty[1] & /*flatData*/ 1048576) {
    			_flatData.set(flatData || data);
    		}

    		if ($$self.$$.dirty[1] & /*context*/ 2097152) {
    			setContext('LayerCake', context);
    		}
    	};

    	$$invalidate(52, context = {
    		activeGetters: activeGetters_d,
    		width: width_d,
    		height: height_d,
    		percentRange: _percentRange,
    		aspectRatio: aspectRatio_d,
    		containerWidth: _containerWidth,
    		containerHeight: _containerHeight,
    		x: _x,
    		y: _y,
    		z: _z,
    		r: _r,
    		custom: _custom,
    		data: _data,
    		xNice: _xNice,
    		yNice: _yNice,
    		zNice: _zNice,
    		rNice: _rNice,
    		xReverse: _xReverse,
    		yReverse: _yReverse,
    		zReverse: _zReverse,
    		rReverse: _rReverse,
    		xPadding: _xPadding,
    		yPadding: _yPadding,
    		zPadding: _zPadding,
    		rPadding: _rPadding,
    		padding: padding_d,
    		flatData: _flatData,
    		extents: extents_d,
    		xDomain: xDomain_d,
    		yDomain: yDomain_d,
    		zDomain: zDomain_d,
    		rDomain: rDomain_d,
    		xRange: xRange_d,
    		yRange: yRange_d,
    		zRange: zRange_d,
    		rRange: rRange_d,
    		config: _config,
    		xScale: xScale_d,
    		xGet: xGet_d,
    		yScale: yScale_d,
    		yGet: yGet_d,
    		zScale: zScale_d,
    		zGet: zGet_d,
    		rScale: rScale_d,
    		rGet: rGet_d
    	});

    	return [
    		containerWidth,
    		containerHeight,
    		element,
    		ssr,
    		pointerEvents,
    		position,
    		$width_d,
    		$height_d,
    		$aspectRatio_d,
    		$_containerWidth,
    		$_containerHeight,
    		_containerWidth,
    		_containerHeight,
    		width_d,
    		height_d,
    		aspectRatio_d,
    		percentRange,
    		width,
    		height,
    		x,
    		y,
    		z,
    		r,
    		custom,
    		data,
    		xDomain,
    		yDomain,
    		zDomain,
    		rDomain,
    		xNice,
    		yNice,
    		zNice,
    		rNice,
    		xReverse,
    		yReverse,
    		zReverse,
    		rReverse,
    		xPadding,
    		yPadding,
    		zPadding,
    		rPadding,
    		xScale,
    		yScale,
    		zScale,
    		rScale,
    		xRange,
    		yRange,
    		zRange,
    		rRange,
    		padding,
    		extents,
    		flatData,
    		context,
    		$$scope,
    		slots,
    		div_binding,
    		div_elementresize_handler
    	];
    }

    class LayerCake extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$F,
    			create_fragment$F,
    			safe_not_equal,
    			{
    				ssr: 3,
    				pointerEvents: 4,
    				position: 5,
    				percentRange: 16,
    				width: 17,
    				height: 18,
    				containerWidth: 0,
    				containerHeight: 1,
    				element: 2,
    				x: 19,
    				y: 20,
    				z: 21,
    				r: 22,
    				custom: 23,
    				data: 24,
    				xDomain: 25,
    				yDomain: 26,
    				zDomain: 27,
    				rDomain: 28,
    				xNice: 29,
    				yNice: 30,
    				zNice: 31,
    				rNice: 32,
    				xReverse: 33,
    				yReverse: 34,
    				zReverse: 35,
    				rReverse: 36,
    				xPadding: 37,
    				yPadding: 38,
    				zPadding: 39,
    				rPadding: 40,
    				xScale: 41,
    				yScale: 42,
    				zScale: 43,
    				rScale: 44,
    				xRange: 45,
    				yRange: 46,
    				zRange: 47,
    				rRange: 48,
    				padding: 49,
    				extents: 50,
    				flatData: 51
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LayerCake",
    			options,
    			id: create_fragment$F.name
    		});
    	}

    	get ssr() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ssr(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pointerEvents() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointerEvents(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get position() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set position(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get percentRange() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set percentRange(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerWidth() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerWidth(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerHeight() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerHeight(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get element() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get z() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set z(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get r() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set r(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get custom() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set custom(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xDomain() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xDomain(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yDomain() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yDomain(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zDomain() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zDomain(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rDomain() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rDomain(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xNice() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xNice(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yNice() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yNice(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zNice() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zNice(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rNice() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rNice(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xReverse() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xReverse(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yReverse() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yReverse(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zReverse() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zReverse(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rReverse() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rReverse(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xPadding() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xPadding(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yPadding() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yPadding(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zPadding() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zPadding(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rPadding() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rPadding(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xScale() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xScale(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yScale() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yScale(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zScale() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zScale(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rScale() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rScale(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xRange() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xRange(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yRange() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yRange(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zRange() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zRange(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rRange() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rRange(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get padding() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set padding(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extents() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extents(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flatData() {
    		throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flatData(value) {
    		throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/layercake/src/layouts/Html.svelte generated by Svelte v3.43.1 */
    const file$A = "node_modules/layercake/src/layouts/Html.svelte";
    const get_default_slot_changes$1 = dirty => ({ element: dirty & /*element*/ 1 });
    const get_default_slot_context$1 = ctx => ({ element: /*element*/ ctx[0] });

    function create_fragment$E(ctx) {
    	let div;
    	let div_style_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "layercake-layout-html svelte-1bu60uu");
    			attr_dev(div, "style", div_style_value = "top: " + /*$padding*/ ctx[3].top + "px; right:" + /*$padding*/ ctx[3].right + "px; bottom:" + /*$padding*/ ctx[3].bottom + "px; left:" + /*$padding*/ ctx[3].left + "px;" + /*zIndexStyle*/ ctx[1] + /*pointerEventsStyle*/ ctx[2]);
    			add_location(div, file$A, 16, 0, 422);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[9](div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, element*/ 129)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}

    			if (!current || dirty & /*$padding, zIndexStyle, pointerEventsStyle*/ 14 && div_style_value !== (div_style_value = "top: " + /*$padding*/ ctx[3].top + "px; right:" + /*$padding*/ ctx[3].right + "px; bottom:" + /*$padding*/ ctx[3].bottom + "px; left:" + /*$padding*/ ctx[3].left + "px;" + /*zIndexStyle*/ ctx[1] + /*pointerEventsStyle*/ ctx[2])) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[9](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let $padding;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Html', slots, ['default']);
    	let { element = undefined } = $$props;
    	let { zIndex = undefined } = $$props;
    	let { pointerEvents = undefined } = $$props;
    	let zIndexStyle = '';
    	let pointerEventsStyle = '';
    	const { padding } = getContext('LayerCake');
    	validate_store(padding, 'padding');
    	component_subscribe($$self, padding, value => $$invalidate(3, $padding = value));
    	const writable_props = ['element', 'zIndex', 'pointerEvents'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Html> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(0, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    		if ('zIndex' in $$props) $$invalidate(5, zIndex = $$props.zIndex);
    		if ('pointerEvents' in $$props) $$invalidate(6, pointerEvents = $$props.pointerEvents);
    		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		element,
    		zIndex,
    		pointerEvents,
    		zIndexStyle,
    		pointerEventsStyle,
    		padding,
    		$padding
    	});

    	$$self.$inject_state = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    		if ('zIndex' in $$props) $$invalidate(5, zIndex = $$props.zIndex);
    		if ('pointerEvents' in $$props) $$invalidate(6, pointerEvents = $$props.pointerEvents);
    		if ('zIndexStyle' in $$props) $$invalidate(1, zIndexStyle = $$props.zIndexStyle);
    		if ('pointerEventsStyle' in $$props) $$invalidate(2, pointerEventsStyle = $$props.pointerEventsStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*zIndex*/ 32) {
    			$$invalidate(1, zIndexStyle = typeof zIndex !== 'undefined'
    			? `z-index:${zIndex};`
    			: '');
    		}

    		if ($$self.$$.dirty & /*pointerEvents*/ 64) {
    			$$invalidate(2, pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '');
    		}
    	};

    	return [
    		element,
    		zIndexStyle,
    		pointerEventsStyle,
    		$padding,
    		padding,
    		zIndex,
    		pointerEvents,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Html extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$E, create_fragment$E, safe_not_equal, { element: 0, zIndex: 5, pointerEvents: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Html",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get element() {
    		throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pointerEvents() {
    		throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointerEvents(value) {
    		throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/layercake/src/layouts/Svg.svelte generated by Svelte v3.43.1 */
    const file$z = "node_modules/layercake/src/layouts/Svg.svelte";
    const get_default_slot_changes = dirty => ({ element: dirty & /*element*/ 1 });
    const get_default_slot_context = ctx => ({ element: /*element*/ ctx[0] });
    const get_defs_slot_changes = dirty => ({ element: dirty & /*element*/ 1 });
    const get_defs_slot_context = ctx => ({ element: /*element*/ ctx[0] });

    function create_fragment$D(ctx) {
    	let svg;
    	let defs;
    	let g;
    	let g_transform_value;
    	let svg_style_value;
    	let current;
    	const defs_slot_template = /*#slots*/ ctx[13].defs;
    	const defs_slot = create_slot(defs_slot_template, ctx, /*$$scope*/ ctx[12], get_defs_slot_context);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			defs = svg_element("defs");
    			if (defs_slot) defs_slot.c();
    			g = svg_element("g");
    			if (default_slot) default_slot.c();
    			add_location(defs, file$z, 24, 1, 652);
    			attr_dev(g, "class", "layercake-layout-svg_g");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*$padding*/ ctx[6].left + ", " + /*$padding*/ ctx[6].top + ")");
    			add_location(g, file$z, 27, 1, 697);
    			attr_dev(svg, "class", "layercake-layout-svg svelte-u84d8d");
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
    			attr_dev(svg, "width", /*$containerWidth*/ ctx[4]);
    			attr_dev(svg, "height", /*$containerHeight*/ ctx[5]);
    			attr_dev(svg, "style", svg_style_value = "" + (/*zIndexStyle*/ ctx[2] + /*pointerEventsStyle*/ ctx[3]));
    			add_location(svg, file$z, 16, 0, 487);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, defs);

    			if (defs_slot) {
    				defs_slot.m(defs, null);
    			}

    			append_dev(svg, g);

    			if (default_slot) {
    				default_slot.m(g, null);
    			}

    			/*svg_binding*/ ctx[14](svg);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (defs_slot) {
    				if (defs_slot.p && (!current || dirty & /*$$scope, element*/ 4097)) {
    					update_slot_base(
    						defs_slot,
    						defs_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(defs_slot_template, /*$$scope*/ ctx[12], dirty, get_defs_slot_changes),
    						get_defs_slot_context
    					);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, element*/ 4097)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*$padding*/ 64 && g_transform_value !== (g_transform_value = "translate(" + /*$padding*/ ctx[6].left + ", " + /*$padding*/ ctx[6].top + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}

    			if (!current || dirty & /*viewBox*/ 2) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[1]);
    			}

    			if (!current || dirty & /*$containerWidth*/ 16) {
    				attr_dev(svg, "width", /*$containerWidth*/ ctx[4]);
    			}

    			if (!current || dirty & /*$containerHeight*/ 32) {
    				attr_dev(svg, "height", /*$containerHeight*/ ctx[5]);
    			}

    			if (!current || dirty & /*zIndexStyle, pointerEventsStyle*/ 12 && svg_style_value !== (svg_style_value = "" + (/*zIndexStyle*/ ctx[2] + /*pointerEventsStyle*/ ctx[3]))) {
    				attr_dev(svg, "style", svg_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(defs_slot, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(defs_slot, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (defs_slot) defs_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			/*svg_binding*/ ctx[14](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let $containerWidth;
    	let $containerHeight;
    	let $padding;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Svg', slots, ['defs','default']);
    	let { element = undefined } = $$props;
    	let { viewBox = undefined } = $$props;
    	let { zIndex = undefined } = $$props;
    	let { pointerEvents = undefined } = $$props;
    	let zIndexStyle = '';
    	let pointerEventsStyle = '';
    	const { containerWidth, containerHeight, padding } = getContext('LayerCake');
    	validate_store(containerWidth, 'containerWidth');
    	component_subscribe($$self, containerWidth, value => $$invalidate(4, $containerWidth = value));
    	validate_store(containerHeight, 'containerHeight');
    	component_subscribe($$self, containerHeight, value => $$invalidate(5, $containerHeight = value));
    	validate_store(padding, 'padding');
    	component_subscribe($$self, padding, value => $$invalidate(6, $padding = value));
    	const writable_props = ['element', 'viewBox', 'zIndex', 'pointerEvents'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Svg> was created with unknown prop '${key}'`);
    	});

    	function svg_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(0, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    		if ('viewBox' in $$props) $$invalidate(1, viewBox = $$props.viewBox);
    		if ('zIndex' in $$props) $$invalidate(10, zIndex = $$props.zIndex);
    		if ('pointerEvents' in $$props) $$invalidate(11, pointerEvents = $$props.pointerEvents);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		element,
    		viewBox,
    		zIndex,
    		pointerEvents,
    		zIndexStyle,
    		pointerEventsStyle,
    		containerWidth,
    		containerHeight,
    		padding,
    		$containerWidth,
    		$containerHeight,
    		$padding
    	});

    	$$self.$inject_state = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    		if ('viewBox' in $$props) $$invalidate(1, viewBox = $$props.viewBox);
    		if ('zIndex' in $$props) $$invalidate(10, zIndex = $$props.zIndex);
    		if ('pointerEvents' in $$props) $$invalidate(11, pointerEvents = $$props.pointerEvents);
    		if ('zIndexStyle' in $$props) $$invalidate(2, zIndexStyle = $$props.zIndexStyle);
    		if ('pointerEventsStyle' in $$props) $$invalidate(3, pointerEventsStyle = $$props.pointerEventsStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*zIndex*/ 1024) {
    			$$invalidate(2, zIndexStyle = typeof zIndex !== 'undefined'
    			? `z-index:${zIndex};`
    			: '');
    		}

    		if ($$self.$$.dirty & /*pointerEvents*/ 2048) {
    			$$invalidate(3, pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '');
    		}
    	};

    	return [
    		element,
    		viewBox,
    		zIndexStyle,
    		pointerEventsStyle,
    		$containerWidth,
    		$containerHeight,
    		$padding,
    		containerWidth,
    		containerHeight,
    		padding,
    		zIndex,
    		pointerEvents,
    		$$scope,
    		slots,
    		svg_binding
    	];
    }

    class Svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$D, create_fragment$D, safe_not_equal, {
    			element: 0,
    			viewBox: 1,
    			zIndex: 10,
    			pointerEvents: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Svg",
    			options,
    			id: create_fragment$D.name
    		});
    	}

    	get element() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pointerEvents() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointerEvents(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* --------------------------------------------
     *
     * Flatten arrays of arrays one level deep
     *
     * --------------------------------------------
     */
    function flatten (arr) {
    	if (Array.isArray(arr) && Array.isArray(arr[0])) {
    		let flat = [];
    		const l = arr.length;
    		for (let i = 0; i < l; i += 1) {
    			flat = flat.concat(arr[i]);
    		}
    		return flat;
    	}
    	return arr;
    }

    function ascending(a, b) {
      return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare1 = f;
      let compare2 = f;

      if (f.length !== 2) {
        delta = (d, x) => f(d) - x;
        compare1 = ascending;
        compare2 = (d, x) => ascending(f(d), x);
      }

      function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) <= 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function number$1(x) {
      return x === null ? NaN : +x;
    }

    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    bisector(number$1).center;
    var bisect = bisectRight;

    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (entries != null) for (const [key, value] of entries) this.set(key, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }

    function intern_get({_intern, _key}, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }

    function intern_set({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }

    function intern_delete({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
      }
      return value;
    }

    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) * step;
      } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function range(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    const implicit = Symbol("implicit");

    function ordinal() {
      var index = new InternMap(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
          if (unknown !== implicit) return unknown;
          index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new InternMap();
        for (const value of _) {
          if (index.has(value)) continue;
          index.set(value, domain.push(value) - 1);
        }
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function band() {
      var scale = ordinal().unknown(undefined),
          domain = scale.domain,
          ordinalRange = scale.range,
          r0 = 0,
          r1 = 1,
          step,
          bandwidth,
          round = false,
          paddingInner = 0,
          paddingOuter = 0,
          align = 0.5;

      delete scale.unknown;

      function rescale() {
        var n = domain().length,
            reverse = r1 < r0,
            start = reverse ? r1 : r0,
            stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range(n).map(function(i) { return start + step * i; });
        return ordinalRange(reverse ? values.reverse() : values);
      }

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };

      scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
      };

      scale.bandwidth = function() {
        return bandwidth;
      };

      scale.step = function() {
        return step;
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
      };

      scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
      };

      scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
      };

      scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
      };

      scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
      };

      scale.copy = function() {
        return band(domain(), [r0, r1])
            .round(round)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align);
      };

      return initRange.apply(rescale(), arguments);
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb$1(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb$1, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var constant = x => () => x;

    function linear$1(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear$1(a, d) : constant(isNaN(a) ? b : a);
    }

    var rgb = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb(start, end) {
        var r = color((start = rgb$1(start)).r, (end = rgb$1(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb.gamma = rgbGamma;

      return rgb;
    })(1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)
          : b instanceof color ? rgb
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : interpolateNumber)(a, b);
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$1(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisect(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer() {
      var domain = unit,
          range = unit,
          interpolate$1 = interpolate,
          transform,
          untransform,
          unknown,
          clamp = identity$1,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer()(identity$1, identity$1);
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear() {
      var scale = continuous();

      scale.copy = function() {
        return copy(scale, linear());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function transformSymlog(c) {
      return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
      };
    }

    function transformSymexp(c) {
      return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
      };
    }

    function symlogish(transform) {
      var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
      };

      return linearish(scale);
    }

    function symlog() {
      var scale = symlogish(transformer());

      scale.copy = function() {
        return copy(scale, symlog()).constant(scale.constant());
      };

      return initRange.apply(scale, arguments);
    }

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function get_interpolator(a, b) {
        if (a === b || a !== a)
            return () => a;
        const type = typeof a;
        if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
            throw new Error('Cannot interpolate values of different type');
        }
        if (Array.isArray(a)) {
            const arr = b.map((bi, i) => {
                return get_interpolator(a[i], bi);
            });
            return t => arr.map(fn => fn(t));
        }
        if (type === 'object') {
            if (!a || !b)
                throw new Error('Object cannot be null');
            if (is_date(a) && is_date(b)) {
                a = a.getTime();
                b = b.getTime();
                const delta = b - a;
                return t => new Date(a + t * delta);
            }
            const keys = Object.keys(b);
            const interpolators = {};
            keys.forEach(key => {
                interpolators[key] = get_interpolator(a[key], b[key]);
            });
            return t => {
                const result = {};
                keys.forEach(key => {
                    result[key] = interpolators[key](t);
                });
                return result;
            };
        }
        if (type === 'number') {
            const delta = b - a;
            return t => a + t * delta;
        }
        throw new Error(`Cannot interpolate ${type} values`);
    }
    function tweened(value, defaults = {}) {
        const store = writable(value);
        let task;
        let target_value = value;
        function set(new_value, opts) {
            if (value == null) {
                store.set(value = new_value);
                return Promise.resolve();
            }
            target_value = new_value;
            let previous_task = task;
            let started = false;
            let { delay = 0, duration = 400, easing = identity$5, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
            if (duration === 0) {
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                store.set(value = target_value);
                return Promise.resolve();
            }
            const start = now() + delay;
            let fn;
            task = loop(now => {
                if (now < start)
                    return true;
                if (!started) {
                    fn = interpolate(value, new_value);
                    if (typeof duration === 'function')
                        duration = duration(value, new_value);
                    started = true;
                }
                if (previous_task) {
                    previous_task.abort();
                    previous_task = null;
                }
                const elapsed = now - start;
                if (elapsed > duration) {
                    store.set(value = new_value);
                    return false;
                }
                // @ts-ignore
                store.set(value = fn(easing(elapsed / duration)));
                return true;
            });
            return task.promise;
        }
        return {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe
        };
    }

    function groupData(data, domain, key) {
      let groups = [];
      if (key) {
        domain.forEach(group => {
          groups.push(data.filter(d => d[key] == group));
        });
      } else {
        groups = [data];
      }
      return groups;
    }

    function stackData(data, domain, valKey, grpKey) {
      let groups = [];
      let base = JSON.parse(JSON.stringify(data.filter(d => d[grpKey] == domain[0])));
      base.forEach(d => d[valKey] = 0);
      domain.forEach(group => {
        let clone = JSON.parse(JSON.stringify(data.filter(d => d[grpKey] == group)));
        clone.forEach((d, i) => {
          d[valKey] += base[i][valKey];
          base[i][valKey] = d[valKey];
        });
        groups.push(clone);
      });
      return groups;
    }

    const seed = 1;
    const randomness1 = 5;
    const randomness2 = 2;

    class AccurateBeeswarm {
      constructor(items, radiusFun, xFun, padding, yOffset) {
        this.items = items;
        this.radiusFun = radiusFun;
        this.xFun = xFun;
        this.padding = padding;
        this.yOffset = yOffset;
        this.tieBreakFn = this._sfc32(0x9E3779B9, 0x243F6A88, 0xB7E15162, seed);
        this.maxR = Math.max(...items.map(d => radiusFun(d)));
        this.rng = this._sfc32(1, 2, 3, seed);
      }

      calculateYPositions() {
        let all = this.items
          .map((d, i) => ({
            datum: d,
            originalIndex: i,
            x: this.xFun(d),
            r: this.radiusFun(d) + this.padding,
            y: null,
            placed: false
          }))
          .sort((a, b) => a.x - b.x);
        all.forEach(function(d, i) {
          d.index = i;
        });
        let tieBreakFn = this.tieBreakFn;
        all.forEach(function(d) {
          d.tieBreaker = tieBreakFn(d.x);
        });
        let allSortedByPriority = [...all].sort((a, b) => {
          let key_a = this.radiusFun(a.datum) + a.tieBreaker * randomness1;
          let key_b = this.radiusFun(b.datum) + b.tieBreaker * randomness1;
          if (key_a != key_b) return key_b - key_a;
          return a.x - b.x;
        });
        for (let item of allSortedByPriority) {
          item.placed = true;
          item.y = this._getBestYPosition(item, all);
        }
        all.sort((a, b) => a.originalIndex - b.originalIndex);
        return all.map(d => ({
          x: d.x,
          y: d.y + this.yOffset,
          r: this.radiusFun(d.datum)
        }));
      }

      // Random number generator (for reproducibility)
      // https://stackoverflow.com/a/47593316
      _sfc32(a, b, c, d) {
        let rng = function() {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var t = (a + b) | 0;
          a = b ^ (b >>> 9);
          b = (c + (c << 3)) | 0;
          c = (c << 21) | (c >>> 11);
          d = (d + 1) | 0;
          t = (t + d) | 0;
          c = (c + t) | 0;
          return (t >>> 0) / 4294967296;
        };
        for (let i = 0; i < 10; i++) {
          rng();
        }
        return rng;
      }

      _getBestYPosition(item, all) {
        let forbiddenIntervals = [];
        for (let step of [-1, 1]) {
          let xDist;
          let r = item.r;
          for (
            let i = item.index + step;
            i >= 0 &&
            i < all.length &&
            (xDist = Math.abs(item.x - all[i].x)) < r + this.maxR;
            i += step
          ) {
            let other = all[i];
            if (!other.placed) continue;
            let sumOfRadii = r + other.r;
            if (xDist >= r + other.r) continue;
            let yDist = Math.sqrt(sumOfRadii * sumOfRadii - xDist * xDist);
            let forbiddenInterval = [other.y - yDist, other.y + yDist];
            forbiddenIntervals.push(forbiddenInterval);
          }
        }
        if (forbiddenIntervals.length == 0) {
          return item.r * (this.rng() - .5) * randomness2;
        }
        let candidatePositions = forbiddenIntervals.flat();
        candidatePositions.push(0);
        candidatePositions.sort((a, b) => {
          let abs_a = Math.abs(a);
          let abs_b = Math.abs(b);
          if (abs_a < abs_b) return -1;
          if (abs_a > abs_b) return 1;
          return a - b;
        });
        // find first candidate position that is not in any of the
        // forbidden intervals
        for (let i = 0; i < candidatePositions.length; i++) {
          let position = candidatePositions[i];
          if (
            forbiddenIntervals.every(
              interval => position <= interval[0] || position >= interval[1]
            )
          ) {
            return position;
          }
        }
      }
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/SetCoords.svelte generated by Svelte v3.43.1 */

    function create_fragment$C(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let $yScale;
    	let $xScale;
    	let $yRange;
    	let $xGet;
    	let $rRange;
    	let $rGet;
    	let $yGet;
    	let $width;
    	let $r;
    	let $y;
    	let $x;
    	let $custom;
    	let $data;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SetCoords', slots, []);
    	const { data, x, y, r, xGet, yGet, rGet, xScale, yScale, yRange, rRange, custom, width } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(18, $data = value));
    	validate_store(x, 'x');
    	component_subscribe($$self, x, value => $$invalidate(16, $x = value));
    	validate_store(y, 'y');
    	component_subscribe($$self, y, value => $$invalidate(15, $y = value));
    	validate_store(r, 'r');
    	component_subscribe($$self, r, value => $$invalidate(14, $r = value));
    	validate_store(xGet, 'xGet');
    	component_subscribe($$self, xGet, value => $$invalidate(23, $xGet = value));
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(26, $yGet = value));
    	validate_store(rGet, 'rGet');
    	component_subscribe($$self, rGet, value => $$invalidate(25, $rGet = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(21, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(20, $yScale = value));
    	validate_store(yRange, 'yRange');
    	component_subscribe($$self, yRange, value => $$invalidate(22, $yRange = value));
    	validate_store(rRange, 'rRange');
    	component_subscribe($$self, rRange, value => $$invalidate(24, $rRange = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(17, $custom = value));
    	validate_store(width, 'width');
    	component_subscribe($$self, width, value => $$invalidate(13, $width = value));
    	let coords = $custom.coords;
    	let type = $custom.type;
    	let prevWidth = $width;

    	function setCoords(data, custom, x, y, r, width) {
    		let mode = custom.mode;
    		let padding = custom.padding;

    		let duration = custom.animation && width == prevWidth
    		? custom.duration
    		: 0;

    		prevWidth = width;
    		let newcoords;

    		if (type == 'bar') {
    			newcoords = data.map((d, i) => d.map((e, j) => {
    				return {
    					x: mode == 'default' || mode == 'grouped' || (mode == 'comparison' || mode == 'stacked') && i == 0
    					? 0
    					: mode == 'stacked' ? x(data[i - 1][j]) : x(e),
    					y: mode == 'grouped'
    					? $yGet(e) + i * (1 / data.length) * $yScale.bandwidth()
    					: $yGet(e),
    					w: mode == 'default' || mode == 'grouped' || (mode == 'comparison' || mode == 'stacked') && i == 0
    					? x(e)
    					: mode == 'stacked' ? x(e) - x(data[i - 1][j]) : 0,
    					h: mode == 'grouped'
    					? $yScale.bandwidth() / data.length
    					: $yScale.bandwidth()
    				};
    			}));
    		} else if (type == 'column') {
    			newcoords = data.map((d, i) => d.map((e, j) => {
    				return {
    					x: mode == 'grouped' && $xScale.bandwidth
    					? $xGet(e) + i * (1 / data.length) * $xScale.bandwidth()
    					: mode == 'grouped'
    						? $xGet(e)[0] + i * (1 / data.length) * Math.max(0, $xGet(e)[1] - $xGet(e)[0])
    						: $xScale.bandwidth ? $xGet(e) : $xGet(e)[0],
    					y: y(e),
    					w: mode == 'grouped' && $xScale.bandwidth
    					? $xScale.bandwidth() / data.length
    					: mode == 'grouped'
    						? Math.max(0, $xGet(e)[1] - $xGet(e)[0]) / data.length
    						: $xScale.bandwidth
    							? $xScale.bandwidth()
    							: Math.max(0, $xGet(e)[1] - $xGet(e)[0]),
    					h: mode == 'default' || mode == 'grouped' || (mode == 'comparison' || mode == 'stacked') && i == 0
    					? y(e)
    					: mode == 'stacked' ? y(e) - y(data[i - 1][j]) : 0
    				};
    			}));
    		} else if (type == 'scatter') {
    			let rVal = d => r ? $rGet(d) : $rRange[0];

    			newcoords = y
    			? data.map(d => ({ x: x(d), y: y(d), r: rVal(d) }))
    			: new AccurateBeeswarm(data, d => rVal(d), d => $xGet(d), padding, $yRange[0] / 2).calculateYPositions().map(d => ({
    					x: $xScale.invert(d.x),
    					y: $yScale.invert(d.y),
    					r: d.r
    				}));
    		} else if (type == 'line') {
    			newcoords = data.map(d => d.map(e => {
    				return { x: x(e), y: y(e) };
    			}));
    		}

    		coords.set(newcoords, { duration });
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SetCoords> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		getContext,
    		AccurateBeeswarm,
    		data,
    		x,
    		y,
    		r,
    		xGet,
    		yGet,
    		rGet,
    		xScale,
    		yScale,
    		yRange,
    		rRange,
    		custom,
    		width,
    		coords,
    		type,
    		prevWidth,
    		setCoords,
    		$yScale,
    		$xScale,
    		$yRange,
    		$xGet,
    		$rRange,
    		$rGet,
    		$yGet,
    		$width,
    		$r,
    		$y,
    		$x,
    		$custom,
    		$data
    	});

    	$$self.$inject_state = $$props => {
    		if ('coords' in $$props) coords = $$props.coords;
    		if ('type' in $$props) type = $$props.type;
    		if ('prevWidth' in $$props) prevWidth = $$props.prevWidth;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$data, $custom, $x, $y, $r, $width*/ 516096) {
    			setCoords($data, $custom, $x, $y, $r, $width);
    		}
    	};

    	return [
    		data,
    		x,
    		y,
    		r,
    		xGet,
    		yGet,
    		rGet,
    		xScale,
    		yScale,
    		yRange,
    		rRange,
    		custom,
    		width,
    		$width,
    		$r,
    		$y,
    		$x,
    		$custom,
    		$data
    	];
    }

    class SetCoords extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SetCoords",
    			options,
    			id: create_fragment$C.name
    		});
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Line.svelte generated by Svelte v3.43.1 */
    const file$y = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Line.svelte";

    function get_each_context$k(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[33] = list[i];
    	child_ctx[35] = i;
    	return child_ctx;
    }

    function get_each_context_1$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[33] = list[i];
    	child_ctx[35] = i;
    	return child_ctx;
    }

    // (53:0) {#if $coords}
    function create_if_block$l(ctx) {
    	let g;
    	let each_1_anchor;
    	let each_value_1 = /*$coords*/ ctx[5];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$7(get_each_context_1$7(ctx, each_value_1, i));
    	}

    	let if_block = /*idKey*/ ctx[16] && (/*hover*/ ctx[3] || /*selected*/ ctx[1] || /*highlighted*/ ctx[4][0]) && create_if_block_1$f(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			if (if_block) if_block.c();
    			attr_dev(g, "class", "line-group");
    			add_location(g, file$y, 53, 0, 1185);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			append_dev(g, each_1_anchor);
    			if (if_block) if_block.m(g, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*makePath, $coords, $config, $zGet, $data, lineWidth, doHover, doSelect*/ 7340516) {
    				each_value_1 = /*$coords*/ ctx[5];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$7(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*idKey*/ ctx[16] && (/*hover*/ ctx[3] || /*selected*/ ctx[1] || /*highlighted*/ ctx[4][0])) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$f(ctx);
    					if_block.c();
    					if_block.m(g, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(53:0) {#if $coords}",
    		ctx
    	});

    	return block;
    }

    // (55:1) {#each $coords as group, i}
    function create_each_block_1$7(ctx) {
    	let path0;
    	let path0_d_value;
    	let path1;
    	let path1_d_value;
    	let path1_stroke_value;
    	let mounted;
    	let dispose;

    	function mouseover_handler(...args) {
    		return /*mouseover_handler*/ ctx[24](/*i*/ ctx[35], ...args);
    	}

    	function focus_handler(...args) {
    		return /*focus_handler*/ ctx[26](/*i*/ ctx[35], ...args);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[28](/*i*/ ctx[35], ...args);
    	}

    	const block = {
    		c: function create() {
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "class", "path-hover svelte-rh3b33");
    			attr_dev(path0, "d", path0_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]));
    			add_location(path0, file$y, 55, 2, 1239);
    			attr_dev(path1, "class", "path-line svelte-rh3b33");
    			attr_dev(path1, "d", path1_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]));

    			attr_dev(path1, "stroke", path1_stroke_value = /*$config*/ ctx[7].z
    			? /*$zGet*/ ctx[8](/*$data*/ ctx[6][/*i*/ ctx[35]][0])
    			: /*$config*/ ctx[7].zRange[0]);

    			attr_dev(path1, "stroke-width", /*lineWidth*/ ctx[2]);
    			add_location(path1, file$y, 64, 3, 1502);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path0, anchor);
    			insert_dev(target, path1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(path0, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(path0, "mouseleave", /*mouseleave_handler*/ ctx[25], false, false, false),
    					listen_dev(path0, "focus", focus_handler, false, false, false),
    					listen_dev(path0, "blur", /*blur_handler*/ ctx[27], false, false, false),
    					listen_dev(path0, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$coords*/ 32 && path0_d_value !== (path0_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty[0] & /*$coords*/ 32 && path1_d_value !== (path1_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty[0] & /*$config, $zGet, $data*/ 448 && path1_stroke_value !== (path1_stroke_value = /*$config*/ ctx[7].z
    			? /*$zGet*/ ctx[8](/*$data*/ ctx[6][/*i*/ ctx[35]][0])
    			: /*$config*/ ctx[7].zRange[0])) {
    				attr_dev(path1, "stroke", path1_stroke_value);
    			}

    			if (dirty[0] & /*lineWidth*/ 4) {
    				attr_dev(path1, "stroke-width", /*lineWidth*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path0);
    			if (detaching) detach_dev(path1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$7.name,
    		type: "each",
    		source: "(55:1) {#each $coords as group, i}",
    		ctx
    	});

    	return block;
    }

    // (76:1) {#if idKey && (hover || selected || highlighted[0])}
    function create_if_block_1$f(ctx) {
    	let each_1_anchor;
    	let each_value = /*$coords*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$k(get_each_context$k(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*makePath, $coords, $data, idKey, hovered, colorHover, selected, colorSelect, colorHighlight, lineWidth, highlighted*/ 2031735) {
    				each_value = /*$coords*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$k(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$k(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(76:1) {#if idKey && (hover || selected || highlighted[0])}",
    		ctx
    	});

    	return block;
    }

    // (78:2) {#if [hovered, selected, ...highlighted].includes($data[i][0][idKey]) }
    function create_if_block_2$a(ctx) {
    	let path;
    	let path_d_value;
    	let path_stroke_value;
    	let path_stroke_width_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "path-overlay svelte-rh3b33");
    			attr_dev(path, "d", path_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]));

    			attr_dev(path, "stroke", path_stroke_value = /*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[17]
    			: /*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]] == /*selected*/ ctx[1]
    				? /*colorSelect*/ ctx[18]
    				: /*colorHighlight*/ ctx[19]);

    			attr_dev(path, "stroke-width", path_stroke_width_value = /*lineWidth*/ ctx[2] + 1.5);
    			add_location(path, file$y, 78, 3, 1840);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$coords*/ 32 && path_d_value !== (path_d_value = /*makePath*/ ctx[20](/*group*/ ctx[33]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*$data, hovered, selected*/ 67 && path_stroke_value !== (path_stroke_value = /*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[17]
    			: /*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]] == /*selected*/ ctx[1]
    				? /*colorSelect*/ ctx[18]
    				: /*colorHighlight*/ ctx[19])) {
    				attr_dev(path, "stroke", path_stroke_value);
    			}

    			if (dirty[0] & /*lineWidth*/ 4 && path_stroke_width_value !== (path_stroke_width_value = /*lineWidth*/ ctx[2] + 1.5)) {
    				attr_dev(path, "stroke-width", path_stroke_width_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(78:2) {#if [hovered, selected, ...highlighted].includes($data[i][0][idKey]) }",
    		ctx
    	});

    	return block;
    }

    // (77:1) {#each $coords as group, i}
    function create_each_block$k(ctx) {
    	let show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[1], .../*highlighted*/ ctx[4]].includes(/*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_2$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*hovered, selected, highlighted, $data*/ 83) show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[1], .../*highlighted*/ ctx[4]].includes(/*$data*/ ctx[6][/*i*/ ctx[35]][0][/*idKey*/ ctx[16]]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$a(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$k.name,
    		type: "each",
    		source: "(77:1) {#each $coords as group, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[5] && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$coords*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$l(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let $yScale;
    	let $xScale;
    	let $custom;
    	let $coords;
    	let $data;
    	let $config;
    	let $zGet;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Line', slots, []);
    	const { data, xScale, yScale, zGet, config, custom } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(6, $data = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(30, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(29, $yScale = value));
    	validate_store(zGet, 'zGet');
    	component_subscribe($$self, zGet, value => $$invalidate(8, $zGet = value));
    	validate_store(config, 'config');
    	component_subscribe($$self, config, value => $$invalidate(7, $config = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(31, $custom = value));
    	const dispatch = createEventDispatcher();
    	let { lineWidth = 2.5 } = $$props;
    	let { hover = false } = $$props;
    	let { hovered = null } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let { highlighted = [] } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(5, $coords = value));
    	let idKey = $custom.idKey;
    	let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';
    	let colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';

    	let colorHighlight = $custom.colorHighlight
    	? $custom.colorHighlight
    	: '#206095';

    	// Function to make SVG path
    	const makePath = group => {
    		let path = 'M' + group.map(d => {
    			return $xScale(d.x) + ',' + $yScale(d.y);
    		}).join('L');

    		return path;
    	};

    	function doHover(e, d) {
    		if (hover) {
    			$$invalidate(0, hovered = d ? d[0][idKey] : null);
    			dispatch('hover', { id: hovered, data: d, event: e });
    		}
    	}

    	function doSelect(e, d) {
    		if (select) {
    			$$invalidate(1, selected = d ? d[0][idKey] : null);
    			dispatch('select', { id: selected, data: d, event: e });
    		}
    	}

    	const writable_props = ['lineWidth', 'hover', 'hovered', 'select', 'selected', 'highlighted'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Line> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = (i, e) => doHover(e, $data[i]);
    	const mouseleave_handler = e => doHover(e, null);
    	const focus_handler = (i, e) => doHover(e, $data[i]);
    	const blur_handler = e => doHover(e, null);
    	const click_handler = (i, e) => doSelect(e, $data[i]);

    	$$self.$$set = $$props => {
    		if ('lineWidth' in $$props) $$invalidate(2, lineWidth = $$props.lineWidth);
    		if ('hover' in $$props) $$invalidate(3, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(23, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(4, highlighted = $$props.highlighted);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		data,
    		xScale,
    		yScale,
    		zGet,
    		config,
    		custom,
    		dispatch,
    		lineWidth,
    		hover,
    		hovered,
    		select,
    		selected,
    		highlighted,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		makePath,
    		doHover,
    		doSelect,
    		$yScale,
    		$xScale,
    		$custom,
    		$coords,
    		$data,
    		$config,
    		$zGet
    	});

    	$$self.$inject_state = $$props => {
    		if ('lineWidth' in $$props) $$invalidate(2, lineWidth = $$props.lineWidth);
    		if ('hover' in $$props) $$invalidate(3, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(23, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(4, highlighted = $$props.highlighted);
    		if ('coords' in $$props) $$invalidate(15, coords = $$props.coords);
    		if ('idKey' in $$props) $$invalidate(16, idKey = $$props.idKey);
    		if ('colorHover' in $$props) $$invalidate(17, colorHover = $$props.colorHover);
    		if ('colorSelect' in $$props) $$invalidate(18, colorSelect = $$props.colorSelect);
    		if ('colorHighlight' in $$props) $$invalidate(19, colorHighlight = $$props.colorHighlight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hovered,
    		selected,
    		lineWidth,
    		hover,
    		highlighted,
    		$coords,
    		$data,
    		$config,
    		$zGet,
    		data,
    		xScale,
    		yScale,
    		zGet,
    		config,
    		custom,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		makePath,
    		doHover,
    		doSelect,
    		select,
    		mouseover_handler,
    		mouseleave_handler,
    		focus_handler,
    		blur_handler,
    		click_handler
    	];
    }

    class Line$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$B,
    			create_fragment$B,
    			safe_not_equal,
    			{
    				lineWidth: 2,
    				hover: 3,
    				hovered: 0,
    				select: 23,
    				selected: 1,
    				highlighted: 4
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Line",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get lineWidth() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineWidth(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hovered() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get select() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set select(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlighted() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlighted(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Area.svelte generated by Svelte v3.43.1 */
    const file$x = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Area.svelte";

    function get_each_context$j(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[21] = i;
    	return child_ctx;
    }

    // (36:0) {#if $coords}
    function create_if_block$k(ctx) {
    	let g;
    	let each_value = /*$coords*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$j(get_each_context$j(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "area-group");
    			add_location(g, file$x, 36, 0, 780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*makeArea, $coords, $config, $zGet, $data, $zRange, opacity*/ 16447) {
    				each_value = /*$coords*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$j(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$j(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(36:0) {#if $coords}",
    		ctx
    	});

    	return block;
    }

    // (38:1) {#each $coords as group, i}
    function create_each_block$j(ctx) {
    	let path;
    	let path_d_value;
    	let path_fill_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "path-area");
    			attr_dev(path, "d", path_d_value = /*makeArea*/ ctx[14](/*group*/ ctx[19], /*i*/ ctx[21]));

    			attr_dev(path, "fill", path_fill_value = /*$config*/ ctx[2].z
    			? /*$zGet*/ ctx[3](/*$data*/ ctx[4][/*i*/ ctx[21]][0])
    			: /*$zRange*/ ctx[5][0]);

    			attr_dev(path, "opacity", /*opacity*/ ctx[0]);
    			add_location(path, file$x, 38, 1, 833);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$coords*/ 2 && path_d_value !== (path_d_value = /*makeArea*/ ctx[14](/*group*/ ctx[19], /*i*/ ctx[21]))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*$config, $zGet, $data, $zRange*/ 60 && path_fill_value !== (path_fill_value = /*$config*/ ctx[2].z
    			? /*$zGet*/ ctx[3](/*$data*/ ctx[4][/*i*/ ctx[21]][0])
    			: /*$zRange*/ ctx[5][0])) {
    				attr_dev(path, "fill", path_fill_value);
    			}

    			if (dirty & /*opacity*/ 1) {
    				attr_dev(path, "opacity", /*opacity*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$j.name,
    		type: "each",
    		source: "(38:1) {#each $coords as group, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[1] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$coords*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let $yScale;
    	let $xScale;
    	let $coords;
    	let $custom;
    	let $config;
    	let $zGet;
    	let $data;
    	let $zRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Area', slots, []);
    	const { data, xScale, yScale, zGet, zRange, config, custom } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(4, $data = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(16, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(15, $yScale = value));
    	validate_store(zGet, 'zGet');
    	component_subscribe($$self, zGet, value => $$invalidate(3, $zGet = value));
    	validate_store(zRange, 'zRange');
    	component_subscribe($$self, zRange, value => $$invalidate(5, $zRange = value));
    	validate_store(config, 'config');
    	component_subscribe($$self, config, value => $$invalidate(2, $config = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(17, $custom = value));
    	let { opacity = 1 } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(1, $coords = value));
    	let idKey = $custom.idKey;

    	// Function to make SVG path
    	const makeArea = (group, i) => {
    		let yRange = $yScale.range();

    		let path1 = 'M' + group.map(d => {
    			return $xScale(d.x) + ',' + $yScale(d.y);
    		}).join('L');

    		let path2 = i == 0
    		? 'L' + group.map(d => {
    				return $xScale(d.x) + ',' + yRange[0];
    			}).reverse().join('L')
    		: 'L' + [...$coords[i - 1]].reverse().map(d => {
    				return $xScale(d.x) + ',' + $yScale(d.y);
    			}).join('L');

    		let area = path1 + path2 + 'Z';
    		return area;
    	};

    	const writable_props = ['opacity'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Area> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('opacity' in $$props) $$invalidate(0, opacity = $$props.opacity);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		xScale,
    		yScale,
    		zGet,
    		zRange,
    		config,
    		custom,
    		opacity,
    		coords,
    		idKey,
    		makeArea,
    		$yScale,
    		$xScale,
    		$coords,
    		$custom,
    		$config,
    		$zGet,
    		$data,
    		$zRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('opacity' in $$props) $$invalidate(0, opacity = $$props.opacity);
    		if ('coords' in $$props) $$invalidate(13, coords = $$props.coords);
    		if ('idKey' in $$props) idKey = $$props.idKey;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		opacity,
    		$coords,
    		$config,
    		$zGet,
    		$data,
    		$zRange,
    		data,
    		xScale,
    		yScale,
    		zGet,
    		zRange,
    		config,
    		custom,
    		coords,
    		makeArea
    	];
    }

    class Area extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, { opacity: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Area",
    			options,
    			id: create_fragment$A.name
    		});
    	}

    	get opacity() {
    		throw new Error("<Area>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set opacity(value) {
    		throw new Error("<Area>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/AxisX.svelte generated by Svelte v3.43.1 */
    const file$w = "node_modules/@onsvisual/svelte-charts/src/charts/shared/AxisX.svelte";

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	child_ctx[26] = i;
    	return child_ctx;
    }

    // (46:3) {#if gridlines !== false}
    function create_if_block_1$e(ctx) {
    	let line;
    	let line_y__value;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "gridline svelte-r9f2bw");
    			attr_dev(line, "y1", line_y__value = /*$height*/ ctx[17] * -1);
    			attr_dev(line, "y2", "0");
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", "0");
    			set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			toggle_class(line, "dashed", /*tickDashed*/ ctx[1]);
    			add_location(line, file$w, 46, 4, 1135);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$height*/ 131072 && line_y__value !== (line_y__value = /*$height*/ ctx[17] * -1)) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*tickColor*/ 8) {
    				set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			}

    			if (dirty & /*tickDashed*/ 2) {
    				toggle_class(line, "dashed", /*tickDashed*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(46:3) {#if gridlines !== false}",
    		ctx
    	});

    	return block;
    }

    // (49:3) {#if tickMarks === true}
    function create_if_block$j(ctx) {
    	let line;
    	let line_x__value;
    	let line_x__value_1;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "tick-mark svelte-r9f2bw");
    			attr_dev(line, "y1", 0);
    			attr_dev(line, "y2", 6);

    			attr_dev(line, "x1", line_x__value = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0);

    			attr_dev(line, "x2", line_x__value_1 = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0);

    			set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			add_location(line, file$w, 49, 4, 1302);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xTick, isBandwidth, $xScale*/ 24704 && line_x__value !== (line_x__value = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0)) {
    				attr_dev(line, "x1", line_x__value);
    			}

    			if (dirty & /*xTick, isBandwidth, $xScale*/ 24704 && line_x__value_1 !== (line_x__value_1 = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0)) {
    				attr_dev(line, "x2", line_x__value_1);
    			}

    			if (dirty & /*tickColor*/ 8) {
    				set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(49:3) {#if tickMarks === true}",
    		ctx
    	});

    	return block;
    }

    // (44:1) {#each tickVals as tick, i}
    function create_each_block$i(ctx) {
    	let g;
    	let if_block0_anchor;
    	let text_1;

    	let t_value = (/*i*/ ctx[26] == /*tickVals*/ ctx[15].length - 1
    	? /*prefix*/ ctx[11] + /*formatTick*/ ctx[5](/*tick*/ ctx[24]) + /*suffix*/ ctx[12]
    	: /*formatTick*/ ctx[5](/*tick*/ ctx[24])) + "";

    	let t;
    	let text_1_x_value;
    	let g_class_value;
    	let g_transform_value;
    	let if_block0 = /*gridlines*/ ctx[0] !== false && create_if_block_1$e(ctx);
    	let if_block1 = /*tickMarks*/ ctx[2] === true && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			text_1 = svg_element("text");
    			t = text(t_value);

    			attr_dev(text_1, "x", text_1_x_value = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0);

    			attr_dev(text_1, "y", /*yTick*/ ctx[8]);
    			attr_dev(text_1, "dx", /*dxTick*/ ctx[9]);
    			attr_dev(text_1, "dy", /*dyTick*/ ctx[10]);
    			attr_dev(text_1, "text-anchor", /*textAnchor*/ ctx[21](/*i*/ ctx[26]));
    			set_style(text_1, "fill", /*textColor*/ ctx[4]);
    			attr_dev(text_1, "class", "svelte-r9f2bw");
    			add_location(text_1, file$w, 51, 3, 1508);
    			attr_dev(g, "class", g_class_value = "tick tick-" + /*tick*/ ctx[24] + " svelte-r9f2bw");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*$xScale*/ ctx[14](/*tick*/ ctx[24]) + "," + /*$yRange*/ ctx[16][0] + ")");
    			add_location(g, file$w, 44, 2, 1021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, if_block0_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gridlines*/ ctx[0] !== false) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$e(ctx);
    					if_block0.c();
    					if_block0.m(g, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*tickMarks*/ ctx[2] === true) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$j(ctx);
    					if_block1.c();
    					if_block1.m(g, text_1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*tickVals, prefix, formatTick, suffix*/ 38944 && t_value !== (t_value = (/*i*/ ctx[26] == /*tickVals*/ ctx[15].length - 1
    			? /*prefix*/ ctx[11] + /*formatTick*/ ctx[5](/*tick*/ ctx[24]) + /*suffix*/ ctx[12]
    			: /*formatTick*/ ctx[5](/*tick*/ ctx[24])) + "")) set_data_dev(t, t_value);

    			if (dirty & /*xTick, isBandwidth, $xScale*/ 24704 && text_1_x_value !== (text_1_x_value = /*xTick*/ ctx[7] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*yTick*/ 256) {
    				attr_dev(text_1, "y", /*yTick*/ ctx[8]);
    			}

    			if (dirty & /*dxTick*/ 512) {
    				attr_dev(text_1, "dx", /*dxTick*/ ctx[9]);
    			}

    			if (dirty & /*dyTick*/ 1024) {
    				attr_dev(text_1, "dy", /*dyTick*/ ctx[10]);
    			}

    			if (dirty & /*textColor*/ 16) {
    				set_style(text_1, "fill", /*textColor*/ ctx[4]);
    			}

    			if (dirty & /*tickVals*/ 32768 && g_class_value !== (g_class_value = "tick tick-" + /*tick*/ ctx[24] + " svelte-r9f2bw")) {
    				attr_dev(g, "class", g_class_value);
    			}

    			if (dirty & /*$xScale, tickVals, $yRange*/ 114688 && g_transform_value !== (g_transform_value = "translate(" + /*$xScale*/ ctx[14](/*tick*/ ctx[24]) + "," + /*$yRange*/ ctx[16][0] + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(44:1) {#each tickVals as tick, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let g;
    	let each_value = /*tickVals*/ ctx[15];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$i(get_each_context$i(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "axis x-axis svelte-r9f2bw");
    			toggle_class(g, "snapTicks", /*snapTicks*/ ctx[6]);
    			add_location(g, file$w, 42, 0, 950);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*tickVals, $xScale, $yRange, xTick, isBandwidth, yTick, dxTick, dyTick, textAnchor, textColor, prefix, formatTick, suffix, tickColor, tickMarks, $height, tickDashed, gridlines*/ 2359231) {
    				each_value = /*tickVals*/ ctx[15];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$i(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$i(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*snapTicks*/ 64) {
    				toggle_class(g, "snapTicks", /*snapTicks*/ ctx[6]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $xScale;
    	let $yRange;
    	let $height;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisX', slots, []);
    	const { width, height, xScale, yRange } = getContext('LayerCake');
    	validate_store(height, 'height');
    	component_subscribe($$self, height, value => $$invalidate(17, $height = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(14, $xScale = value));
    	validate_store(yRange, 'yRange');
    	component_subscribe($$self, yRange, value => $$invalidate(16, $yRange = value));
    	let { gridlines = true } = $$props;
    	let { tickDashed = false } = $$props;
    	let { tickMarks = false } = $$props;
    	let { tickColor = '#bbb' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { snapTicks = false } = $$props;
    	let { ticks = undefined } = $$props;
    	let { xTick = undefined } = $$props;
    	let { yTick = 16 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = 0 } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;

    	function textAnchor(i) {
    		if (snapTicks === true) {
    			if (i === 0) {
    				return 'start';
    			}

    			if (i === tickVals.length - 1) {
    				return 'end';
    			}
    		}

    		return 'middle';
    	}

    	const writable_props = [
    		'gridlines',
    		'tickDashed',
    		'tickMarks',
    		'tickColor',
    		'textColor',
    		'formatTick',
    		'snapTicks',
    		'ticks',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'prefix',
    		'suffix'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisX> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('gridlines' in $$props) $$invalidate(0, gridlines = $$props.gridlines);
    		if ('tickDashed' in $$props) $$invalidate(1, tickDashed = $$props.tickDashed);
    		if ('tickMarks' in $$props) $$invalidate(2, tickMarks = $$props.tickMarks);
    		if ('tickColor' in $$props) $$invalidate(3, tickColor = $$props.tickColor);
    		if ('textColor' in $$props) $$invalidate(4, textColor = $$props.textColor);
    		if ('formatTick' in $$props) $$invalidate(5, formatTick = $$props.formatTick);
    		if ('snapTicks' in $$props) $$invalidate(6, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(22, ticks = $$props.ticks);
    		if ('xTick' in $$props) $$invalidate(7, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(8, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(9, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(10, dyTick = $$props.dyTick);
    		if ('prefix' in $$props) $$invalidate(11, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(12, suffix = $$props.suffix);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		width,
    		height,
    		xScale,
    		yRange,
    		gridlines,
    		tickDashed,
    		tickMarks,
    		tickColor,
    		textColor,
    		formatTick,
    		snapTicks,
    		ticks,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		prefix,
    		suffix,
    		textAnchor,
    		tickVals,
    		isBandwidth,
    		$xScale,
    		$yRange,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ('gridlines' in $$props) $$invalidate(0, gridlines = $$props.gridlines);
    		if ('tickDashed' in $$props) $$invalidate(1, tickDashed = $$props.tickDashed);
    		if ('tickMarks' in $$props) $$invalidate(2, tickMarks = $$props.tickMarks);
    		if ('tickColor' in $$props) $$invalidate(3, tickColor = $$props.tickColor);
    		if ('textColor' in $$props) $$invalidate(4, textColor = $$props.textColor);
    		if ('formatTick' in $$props) $$invalidate(5, formatTick = $$props.formatTick);
    		if ('snapTicks' in $$props) $$invalidate(6, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(22, ticks = $$props.ticks);
    		if ('xTick' in $$props) $$invalidate(7, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(8, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(9, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(10, dyTick = $$props.dyTick);
    		if ('prefix' in $$props) $$invalidate(11, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(12, suffix = $$props.suffix);
    		if ('tickVals' in $$props) $$invalidate(15, tickVals = $$props.tickVals);
    		if ('isBandwidth' in $$props) $$invalidate(13, isBandwidth = $$props.isBandwidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$xScale*/ 16384) {
    			$$invalidate(13, isBandwidth = typeof $xScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $xScale*/ 4218880) {
    			$$invalidate(15, tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth
    				? $xScale.domain()
    				: typeof ticks === 'function'
    					? ticks($xScale.ticks())
    					: $xScale.ticks(ticks));
    		}
    	};

    	return [
    		gridlines,
    		tickDashed,
    		tickMarks,
    		tickColor,
    		textColor,
    		formatTick,
    		snapTicks,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		prefix,
    		suffix,
    		isBandwidth,
    		$xScale,
    		tickVals,
    		$yRange,
    		$height,
    		height,
    		xScale,
    		yRange,
    		textAnchor,
    		ticks
    	];
    }

    class AxisX$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
    			gridlines: 0,
    			tickDashed: 1,
    			tickMarks: 2,
    			tickColor: 3,
    			textColor: 4,
    			formatTick: 5,
    			snapTicks: 6,
    			ticks: 22,
    			xTick: 7,
    			yTick: 8,
    			dxTick: 9,
    			dyTick: 10,
    			prefix: 11,
    			suffix: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisX",
    			options,
    			id: create_fragment$z.name
    		});
    	}

    	get gridlines() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickDashed() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickDashed(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickMarks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickMarks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get snapTicks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set snapTicks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/AxisY.svelte generated by Svelte v3.43.1 */
    const file$v = "node_modules/@onsvisual/svelte-charts/src/charts/shared/AxisY.svelte";

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	child_ctx[24] = i;
    	return child_ctx;
    }

    // (34:3) {#if gridlines !== false}
    function create_if_block_1$d(ctx) {
    	let line;
    	let line_y__value;
    	let line_y__value_1;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "gridline svelte-f7wn4m");
    			attr_dev(line, "x2", "100%");

    			attr_dev(line, "y1", line_y__value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			attr_dev(line, "y2", line_y__value_1 = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			toggle_class(line, "dashed", /*tickDashed*/ ctx[2]);
    			add_location(line, file$v, 34, 4, 997);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24704 && line_y__value !== (line_y__value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24704 && line_y__value_1 !== (line_y__value_1 = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*tickColor*/ 8) {
    				set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			}

    			if (dirty & /*tickDashed*/ 4) {
    				toggle_class(line, "dashed", /*tickDashed*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(34:3) {#if gridlines !== false}",
    		ctx
    	});

    	return block;
    }

    // (44:3) {#if tickMarks === true}
    function create_if_block$i(ctx) {
    	let line;
    	let line_x__value;
    	let line_y__value;
    	let line_y__value_1;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "tick-mark svelte-f7wn4m");
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", line_x__value = /*isBandwidth*/ ctx[13] ? -6 : 6);

    			attr_dev(line, "y1", line_y__value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			attr_dev(line, "y2", line_y__value_1 = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			add_location(line, file$v, 44, 4, 1286);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*isBandwidth*/ 8192 && line_x__value !== (line_x__value = /*isBandwidth*/ ctx[13] ? -6 : 6)) {
    				attr_dev(line, "x2", line_x__value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24704 && line_y__value !== (line_y__value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24704 && line_y__value_1 !== (line_y__value_1 = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*tickColor*/ 8) {
    				set_style(line, "stroke", /*tickColor*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(44:3) {#if tickMarks === true}",
    		ctx
    	});

    	return block;
    }

    // (32:1) {#each tickVals as tick, i}
    function create_each_block$h(ctx) {
    	let g;
    	let if_block0_anchor;
    	let text_1;

    	let t_value = (/*i*/ ctx[24] == /*tickVals*/ ctx[15].length - 1
    	? /*prefix*/ ctx[11] + /*formatTick*/ ctx[5](/*tick*/ ctx[22]) + /*suffix*/ ctx[12]
    	: /*formatTick*/ ctx[5](/*tick*/ ctx[22])) + "";

    	let t;
    	let text_1_y_value;
    	let text_1_dx_value;
    	let text_1_dy_value;
    	let g_class_value;
    	let g_transform_value;
    	let if_block0 = /*gridlines*/ ctx[1] !== false && create_if_block_1$d(ctx);
    	let if_block1 = /*tickMarks*/ ctx[0] === true && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();
    			if (if_block1) if_block1.c();
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "x", /*xTick*/ ctx[6]);

    			attr_dev(text_1, "y", text_1_y_value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			attr_dev(text_1, "dx", text_1_dx_value = /*isBandwidth*/ ctx[13] ? -4 : /*dxTick*/ ctx[8]);
    			attr_dev(text_1, "dy", text_1_dy_value = /*isBandwidth*/ ctx[13] ? 4 : /*dyTick*/ ctx[9]);
    			set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[13] ? 'end' : /*textAnchor*/ ctx[10]);
    			set_style(text_1, "fill", /*textColor*/ ctx[4]);
    			add_location(text_1, file$v, 53, 3, 1546);
    			attr_dev(g, "class", g_class_value = "tick tick-" + /*tick*/ ctx[22] + " svelte-f7wn4m");
    			attr_dev(g, "transform", g_transform_value = "translate(" + (/*$xRange*/ ctx[17][0] + (/*isBandwidth*/ ctx[13] ? /*$padding*/ ctx[16].left : 0)) + ", " + /*$yScale*/ ctx[14](/*tick*/ ctx[22]) + ")");
    			add_location(g, file$v, 32, 2, 846);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, if_block0_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gridlines*/ ctx[1] !== false) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$d(ctx);
    					if_block0.c();
    					if_block0.m(g, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*tickMarks*/ ctx[0] === true) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$i(ctx);
    					if_block1.c();
    					if_block1.m(g, text_1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*tickVals, prefix, formatTick, suffix*/ 38944 && t_value !== (t_value = (/*i*/ ctx[24] == /*tickVals*/ ctx[15].length - 1
    			? /*prefix*/ ctx[11] + /*formatTick*/ ctx[5](/*tick*/ ctx[22]) + /*suffix*/ ctx[12]
    			: /*formatTick*/ ctx[5](/*tick*/ ctx[22])) + "")) set_data_dev(t, t_value);

    			if (dirty & /*xTick*/ 64) {
    				attr_dev(text_1, "x", /*xTick*/ ctx[6]);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24704 && text_1_y_value !== (text_1_y_value = /*yTick*/ ctx[7] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*isBandwidth, dxTick*/ 8448 && text_1_dx_value !== (text_1_dx_value = /*isBandwidth*/ ctx[13] ? -4 : /*dxTick*/ ctx[8])) {
    				attr_dev(text_1, "dx", text_1_dx_value);
    			}

    			if (dirty & /*isBandwidth, dyTick*/ 8704 && text_1_dy_value !== (text_1_dy_value = /*isBandwidth*/ ctx[13] ? 4 : /*dyTick*/ ctx[9])) {
    				attr_dev(text_1, "dy", text_1_dy_value);
    			}

    			if (dirty & /*isBandwidth, textAnchor*/ 9216) {
    				set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[13] ? 'end' : /*textAnchor*/ ctx[10]);
    			}

    			if (dirty & /*textColor*/ 16) {
    				set_style(text_1, "fill", /*textColor*/ ctx[4]);
    			}

    			if (dirty & /*tickVals*/ 32768 && g_class_value !== (g_class_value = "tick tick-" + /*tick*/ ctx[22] + " svelte-f7wn4m")) {
    				attr_dev(g, "class", g_class_value);
    			}

    			if (dirty & /*$xRange, isBandwidth, $padding, $yScale, tickVals*/ 253952 && g_transform_value !== (g_transform_value = "translate(" + (/*$xRange*/ ctx[17][0] + (/*isBandwidth*/ ctx[13] ? /*$padding*/ ctx[16].left : 0)) + ", " + /*$yScale*/ ctx[14](/*tick*/ ctx[22]) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(32:1) {#each tickVals as tick, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let g;
    	let g_transform_value;
    	let each_value = /*tickVals*/ ctx[15];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "axis y-axis");
    			attr_dev(g, "transform", g_transform_value = "translate(" + -/*$padding*/ ctx[16].left + ", 0)");
    			add_location(g, file$v, 30, 0, 748);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*tickVals, $xRange, isBandwidth, $padding, $yScale, xTick, yTick, dxTick, dyTick, textAnchor, textColor, prefix, formatTick, suffix, tickColor, tickMarks, tickDashed, gridlines*/ 262143) {
    				each_value = /*tickVals*/ ctx[15];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$padding*/ 65536 && g_transform_value !== (g_transform_value = "translate(" + -/*$padding*/ ctx[16].left + ", 0)")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $yScale;
    	let $padding;
    	let $xRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisY', slots, []);
    	const { padding, xRange, yScale } = getContext('LayerCake');
    	validate_store(padding, 'padding');
    	component_subscribe($$self, padding, value => $$invalidate(16, $padding = value));
    	validate_store(xRange, 'xRange');
    	component_subscribe($$self, xRange, value => $$invalidate(17, $xRange = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(14, $yScale = value));
    	let { ticks = 4 } = $$props;
    	let { tickMarks = false } = $$props;
    	let { gridlines = true } = $$props;
    	let { tickDashed = false } = $$props;
    	let { tickColor = '#bbb' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { xTick = 0 } = $$props;
    	let { yTick = 0 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = -4 } = $$props;
    	let { textAnchor = 'start' } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;

    	const writable_props = [
    		'ticks',
    		'tickMarks',
    		'gridlines',
    		'tickDashed',
    		'tickColor',
    		'textColor',
    		'formatTick',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'textAnchor',
    		'prefix',
    		'suffix'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisY> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ticks' in $$props) $$invalidate(21, ticks = $$props.ticks);
    		if ('tickMarks' in $$props) $$invalidate(0, tickMarks = $$props.tickMarks);
    		if ('gridlines' in $$props) $$invalidate(1, gridlines = $$props.gridlines);
    		if ('tickDashed' in $$props) $$invalidate(2, tickDashed = $$props.tickDashed);
    		if ('tickColor' in $$props) $$invalidate(3, tickColor = $$props.tickColor);
    		if ('textColor' in $$props) $$invalidate(4, textColor = $$props.textColor);
    		if ('formatTick' in $$props) $$invalidate(5, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(6, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(7, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(8, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(9, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(10, textAnchor = $$props.textAnchor);
    		if ('prefix' in $$props) $$invalidate(11, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(12, suffix = $$props.suffix);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		padding,
    		xRange,
    		yScale,
    		ticks,
    		tickMarks,
    		gridlines,
    		tickDashed,
    		tickColor,
    		textColor,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		prefix,
    		suffix,
    		isBandwidth,
    		tickVals,
    		$yScale,
    		$padding,
    		$xRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('ticks' in $$props) $$invalidate(21, ticks = $$props.ticks);
    		if ('tickMarks' in $$props) $$invalidate(0, tickMarks = $$props.tickMarks);
    		if ('gridlines' in $$props) $$invalidate(1, gridlines = $$props.gridlines);
    		if ('tickDashed' in $$props) $$invalidate(2, tickDashed = $$props.tickDashed);
    		if ('tickColor' in $$props) $$invalidate(3, tickColor = $$props.tickColor);
    		if ('textColor' in $$props) $$invalidate(4, textColor = $$props.textColor);
    		if ('formatTick' in $$props) $$invalidate(5, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(6, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(7, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(8, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(9, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(10, textAnchor = $$props.textAnchor);
    		if ('prefix' in $$props) $$invalidate(11, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(12, suffix = $$props.suffix);
    		if ('isBandwidth' in $$props) $$invalidate(13, isBandwidth = $$props.isBandwidth);
    		if ('tickVals' in $$props) $$invalidate(15, tickVals = $$props.tickVals);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$yScale*/ 16384) {
    			$$invalidate(13, isBandwidth = typeof $yScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $yScale*/ 2121728) {
    			$$invalidate(15, tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth
    				? $yScale.domain()
    				: typeof ticks === 'function'
    					? ticks($yScale.ticks())
    					: $yScale.ticks(ticks));
    		}
    	};

    	return [
    		tickMarks,
    		gridlines,
    		tickDashed,
    		tickColor,
    		textColor,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		prefix,
    		suffix,
    		isBandwidth,
    		$yScale,
    		tickVals,
    		$padding,
    		$xRange,
    		padding,
    		xRange,
    		yScale,
    		ticks
    	];
    }

    class AxisY$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {
    			ticks: 21,
    			tickMarks: 0,
    			gridlines: 1,
    			tickDashed: 2,
    			tickColor: 3,
    			textColor: 4,
    			formatTick: 5,
    			xTick: 6,
    			yTick: 7,
    			dxTick: 8,
    			dyTick: 9,
    			textAnchor: 10,
    			prefix: 11,
    			suffix: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisY",
    			options,
    			id: create_fragment$y.name
    		});
    	}

    	get ticks() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickMarks() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickMarks(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gridlines() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickDashed() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickDashed(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tickColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tickColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textAnchor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textAnchor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Legend.svelte generated by Svelte v3.43.1 */

    const file$u = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Legend.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (12:0) {#if Array.isArray(domain) && Array.isArray(colors)}
    function create_if_block$h(ctx) {
    	let ul;
    	let each_value = /*domain*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "legend svelte-1w19nmy");
    			add_location(ul, file$u, 12, 2, 483);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*domain, colors, horizontal, line, comparison, markerWidth, markerLength, round*/ 255) {
    				each_value = /*domain*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(12:0) {#if Array.isArray(domain) && Array.isArray(colors)}",
    		ctx
    	});

    	return block;
    }

    // (14:4) {#each domain as label, i}
    function create_each_block$g(ctx) {
    	let li;
    	let div;
    	let t0;
    	let t1_value = /*label*/ ctx[8] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(div, "class", "bullet svelte-1w19nmy");
    			set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);

    			set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			toggle_class(div, "round", /*round*/ ctx[7]);
    			add_location(div, file$u, 15, 8, 553);
    			attr_dev(li, "class", "svelte-1w19nmy");
    			add_location(li, file$u, 14, 6, 540);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*colors*/ 2) {
    				set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*round*/ 128) {
    				toggle_class(div, "round", /*round*/ ctx[7]);
    			}

    			if (dirty & /*domain*/ 1 && t1_value !== (t1_value = /*label*/ ctx[8] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(14:4) {#each domain as label, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let show_if = Array.isArray(/*domain*/ ctx[0]) && Array.isArray(/*colors*/ ctx[1]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*domain, colors*/ 3) show_if = Array.isArray(/*domain*/ ctx[0]) && Array.isArray(/*colors*/ ctx[1]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Legend', slots, []);
    	let { domain = null } = $$props;
    	let { colors = null } = $$props;
    	let { line = false } = $$props;
    	let { comparison = false } = $$props;
    	let { horizontal = true } = $$props;
    	let { markerWidth = 2.5 } = $$props;
    	let { markerLength = 13 } = $$props;
    	let { round = false } = $$props;

    	const writable_props = [
    		'domain',
    		'colors',
    		'line',
    		'comparison',
    		'horizontal',
    		'markerWidth',
    		'markerLength',
    		'round'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Legend> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	$$self.$capture_state = () => ({
    		domain,
    		colors,
    		line,
    		comparison,
    		horizontal,
    		markerWidth,
    		markerLength,
    		round
    	});

    	$$self.$inject_state = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [domain, colors, line, comparison, horizontal, markerWidth, markerLength, round];
    }

    class Legend$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {
    			domain: 0,
    			colors: 1,
    			line: 2,
    			comparison: 3,
    			horizontal: 4,
    			markerWidth: 5,
    			markerLength: 6,
    			round: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Legend",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get domain() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set domain(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get colors() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set colors(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get line() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get comparison() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comparison(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get horizontal() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set horizontal(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerWidth() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerWidth(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerLength() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerLength(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get round() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set round(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Title.svelte generated by Svelte v3.43.1 */

    const file$t = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Title.svelte";

    function create_fragment$w(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "title svelte-b06b69");
    			add_location(div, file$t, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Title', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Title> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Title extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Title",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Footer.svelte generated by Svelte v3.43.1 */

    const file$s = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Footer.svelte";

    function create_fragment$v(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "footer svelte-7jvwfp");
    			add_location(div, file$s, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Labels.svelte generated by Svelte v3.43.1 */
    const file$r = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Labels.svelte";

    function get_each_context_1$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    // (15:0) {#if $coords.length == $data.length}
    function create_if_block$g(ctx) {
    	let g;

    	function select_block_type(ctx, dirty) {
    		if (/*$coords*/ ctx[3][0] && /*$coords*/ ctx[3][0].x) return create_if_block_1$c;
    		if (/*$coords*/ ctx[3][0] && /*$coords*/ ctx[3][0][0] && /*$coords*/ ctx[3][0][0].x) return create_if_block_4$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block) if_block.c();
    			attr_dev(g, "class", "label-group");
    			add_location(g, file$r, 15, 0, 494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block) if_block.m(g, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(15:0) {#if $coords.length == $data.length}",
    		ctx
    	});

    	return block;
    }

    // (56:58) 
    function create_if_block_4$6(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*$coords*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$6(get_each_context_1$6(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords, $yScale, $data, labelKey, hovered, selected, idKey*/ 12413) {
    				each_value_1 = /*$coords*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$6(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(56:58) ",
    		ctx
    	});

    	return block;
    }

    // (17:1) {#if $coords[0] && $coords[0].x}
    function create_if_block_1$c(ctx) {
    	let each_1_anchor;
    	let each_value = /*$coords*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Math, $data, $xScale, $coords, $yScale, labelKey, placeLabel, hovered, selected, idKey*/ 12415) {
    				each_value = /*$coords*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(17:1) {#if $coords[0] && $coords[0].x}",
    		ctx
    	});

    	return block;
    }

    // (58:2) {#if [hovered, selected].includes($data[i][0][idKey])}
    function create_if_block_5$6(ctx) {
    	let text_1;
    	let t_value = /*$data*/ ctx[4][/*i*/ ctx[17]][0][/*labelKey*/ ctx[13]] + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "label svelte-gjdahk");
    			attr_dev(text_1, "transform", "translate(2,3)");
    			attr_dev(text_1, "filter", "url(#bgfill)");
    			attr_dev(text_1, "fill", "#333");
    			attr_dev(text_1, "x", text_1_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15][/*d*/ ctx[15].length - 1].x));
    			attr_dev(text_1, "y", text_1_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15][/*d*/ ctx[15].length - 1].y));
    			add_location(text_1, file$r, 58, 2, 1591);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$data*/ 16 && t_value !== (t_value = /*$data*/ ctx[4][/*i*/ ctx[17]][0][/*labelKey*/ ctx[13]] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$xScale, $coords*/ 40 && text_1_x_value !== (text_1_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15][/*d*/ ctx[15].length - 1].x))) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 72 && text_1_y_value !== (text_1_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15][/*d*/ ctx[15].length - 1].y))) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$6.name,
    		type: "if",
    		source: "(58:2) {#if [hovered, selected].includes($data[i][0][idKey])}",
    		ctx
    	});

    	return block;
    }

    // (57:1) {#each $coords as d, i}
    function create_each_block_1$6(ctx) {
    	let show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2]].includes(/*$data*/ ctx[4][/*i*/ ctx[17]][0][/*idKey*/ ctx[12]]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_5$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hovered, selected, $data*/ 21) show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2]].includes(/*$data*/ ctx[4][/*i*/ ctx[17]][0][/*idKey*/ ctx[12]]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_5$6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$6.name,
    		type: "each",
    		source: "(57:1) {#each $coords as d, i}",
    		ctx
    	});

    	return block;
    }

    // (19:2) {#if [hovered, selected].includes($data[i][idKey])}
    function create_if_block_2$9(ctx) {
    	let if_block_anchor;
    	let if_block = /*placeLabel*/ ctx[1] == /*$data*/ ctx[4][/*i*/ ctx[17]]['unique'] && create_if_block_3$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*placeLabel*/ ctx[1] == /*$data*/ ctx[4][/*i*/ ctx[17]]['unique']) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(19:2) {#if [hovered, selected].includes($data[i][idKey])}",
    		ctx
    	});

    	return block;
    }

    // (20:2) {#if placeLabel == $data[i]['unique']}
    function create_if_block_3$7(ctx) {
    	let rect;
    	let rect_x_value;
    	let rect_y_value;
    	let text0;
    	let t0;
    	let text0_x_value;
    	let text0_y_value;
    	let text1;
    	let t1_value = Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]][/*labelKey*/ ctx[13]] * 10) / 10 + "";
    	let t1;
    	let text1_x_value;
    	let text1_y_value;
    	let text2;

    	let t2_value = "(" + (Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 < 0
    	? ""
    	: "+") + Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 + ")" + "";

    	let t2;
    	let text2_fill_value;
    	let text2_x_value;
    	let text2_y_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			text0 = svg_element("text");
    			t0 = text(/*placeLabel*/ ctx[1]);
    			text1 = svg_element("text");
    			t1 = text(t1_value);
    			text2 = svg_element("text");
    			t2 = text(t2_value);
    			attr_dev(rect, "fill", "rgba(255,255,255,0.8)");
    			attr_dev(rect, "x", rect_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x));
    			attr_dev(rect, "y", rect_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y));
    			attr_dev(rect, "transform", "translate(5,-45)");
    			attr_dev(rect, "width", "150");
    			attr_dev(rect, "height", "50");
    			attr_dev(rect, "rx", "15");
    			add_location(rect, file$r, 20, 2, 674);
    			attr_dev(text0, "class", "label-bold svelte-gjdahk");
    			attr_dev(text0, "transform", "translate(10,-25)");
    			attr_dev(text0, "fill", "#333");
    			attr_dev(text0, "x", text0_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x));
    			attr_dev(text0, "y", text0_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y));
    			add_location(text0, file$r, 28, 2, 826);
    			attr_dev(text1, "class", "label svelte-gjdahk");
    			attr_dev(text1, "transform", "translate(10,-5)");
    			attr_dev(text1, "fill", "#333");
    			attr_dev(text1, "x", text1_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x));
    			attr_dev(text1, "y", text1_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y));
    			add_location(text1, file$r, 36, 2, 971);
    			attr_dev(text2, "class", "label svelte-gjdahk");
    			attr_dev(text2, "transform", "translate(55,-5)");

    			attr_dev(text2, "fill", text2_fill_value = Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 < 0
    			? "#FF0000"
    			: "#228C22");

    			attr_dev(text2, "x", text2_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x));
    			attr_dev(text2, "y", text2_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y));
    			add_location(text2, file$r, 44, 2, 1138);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    			insert_dev(target, text0, anchor);
    			append_dev(text0, t0);
    			insert_dev(target, text1, anchor);
    			append_dev(text1, t1);
    			insert_dev(target, text2, anchor);
    			append_dev(text2, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords*/ 40 && rect_x_value !== (rect_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x))) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 72 && rect_y_value !== (rect_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y))) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (dirty & /*placeLabel*/ 2) set_data_dev(t0, /*placeLabel*/ ctx[1]);

    			if (dirty & /*$xScale, $coords*/ 40 && text0_x_value !== (text0_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x))) {
    				attr_dev(text0, "x", text0_x_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 72 && text0_y_value !== (text0_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y))) {
    				attr_dev(text0, "y", text0_y_value);
    			}

    			if (dirty & /*$data*/ 16 && t1_value !== (t1_value = Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]][/*labelKey*/ ctx[13]] * 10) / 10 + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*$xScale, $coords*/ 40 && text1_x_value !== (text1_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x))) {
    				attr_dev(text1, "x", text1_x_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 72 && text1_y_value !== (text1_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y))) {
    				attr_dev(text1, "y", text1_y_value);
    			}

    			if (dirty & /*$data*/ 16 && t2_value !== (t2_value = "(" + (Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 < 0
    			? ""
    			: "+") + Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 + ")" + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$data*/ 16 && text2_fill_value !== (text2_fill_value = Math.round(/*$data*/ ctx[4][/*i*/ ctx[17]]['change'] * 10) / 10 < 0
    			? "#FF0000"
    			: "#228C22")) {
    				attr_dev(text2, "fill", text2_fill_value);
    			}

    			if (dirty & /*$xScale, $coords*/ 40 && text2_x_value !== (text2_x_value = /*$xScale*/ ctx[5](/*d*/ ctx[15].x))) {
    				attr_dev(text2, "x", text2_x_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 72 && text2_y_value !== (text2_y_value = /*$yScale*/ ctx[6](/*d*/ ctx[15].y))) {
    				attr_dev(text2, "y", text2_y_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    			if (detaching) detach_dev(text0);
    			if (detaching) detach_dev(text1);
    			if (detaching) detach_dev(text2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(20:2) {#if placeLabel == $data[i]['unique']}",
    		ctx
    	});

    	return block;
    }

    // (18:1) {#each $coords as d, i}
    function create_each_block$f(ctx) {
    	let show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2]].includes(/*$data*/ ctx[4][/*i*/ ctx[17]][/*idKey*/ ctx[12]]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_2$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hovered, selected, $data*/ 21) show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2]].includes(/*$data*/ ctx[4][/*i*/ ctx[17]][/*idKey*/ ctx[12]]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(18:1) {#each $coords as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[3].length == /*$data*/ ctx[4].length && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$coords*/ ctx[3].length == /*$data*/ ctx[4].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let $custom;
    	let $coords;
    	let $data;
    	let $xScale;
    	let $yScale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Labels', slots, []);
    	const { data, xScale, yScale, custom } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(4, $data = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(5, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(6, $yScale = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(14, $custom = value));
    	let { hovered = null } = $$props;
    	let { placeLabel = null } = $$props;
    	let { selected = null } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(3, $coords = value));
    	let idKey = $custom.idKey;
    	let labelKey = $custom.labelKey;
    	const writable_props = ['hovered', 'placeLabel', 'selected'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Labels> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('placeLabel' in $$props) $$invalidate(1, placeLabel = $$props.placeLabel);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		xScale,
    		yScale,
    		custom,
    		hovered,
    		placeLabel,
    		selected,
    		coords,
    		idKey,
    		labelKey,
    		$custom,
    		$coords,
    		$data,
    		$xScale,
    		$yScale
    	});

    	$$self.$inject_state = $$props => {
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('placeLabel' in $$props) $$invalidate(1, placeLabel = $$props.placeLabel);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('coords' in $$props) $$invalidate(11, coords = $$props.coords);
    		if ('idKey' in $$props) $$invalidate(12, idKey = $$props.idKey);
    		if ('labelKey' in $$props) $$invalidate(13, labelKey = $$props.labelKey);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hovered,
    		placeLabel,
    		selected,
    		$coords,
    		$data,
    		$xScale,
    		$yScale,
    		data,
    		xScale,
    		yScale,
    		custom,
    		coords,
    		idKey,
    		labelKey
    	];
    }

    class Labels extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { hovered: 0, placeLabel: 1, selected: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Labels",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get hovered() {
    		throw new Error("<Labels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Labels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeLabel() {
    		throw new Error("<Labels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeLabel(value) {
    		throw new Error("<Labels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Labels>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Labels>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/LineChart.svelte generated by Svelte v3.43.1 */
    const file$q = "node_modules/@onsvisual/svelte-charts/src/charts/LineChart.svelte";
    const get_front_slot_changes$2 = dirty => ({});
    const get_front_slot_context$2 = ctx => ({});
    const get_svg_slot_changes$2 = dirty => ({});
    const get_svg_slot_context$2 = ctx => ({});
    const get_back_slot_changes$2 = dirty => ({});
    const get_back_slot_context$2 = ctx => ({});
    const get_options_slot_changes$2 = dirty => ({});
    const get_options_slot_context$2 = ctx => ({});

    // (102:0) {#if title}
    function create_if_block_8$1(ctx) {
    	let title_1;
    	let current;

    	title_1 = new Title({
    			props: {
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(title_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(title_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const title_1_changes = {};

    			if (dirty[0] & /*title*/ 131072 | dirty[1] & /*$$scope*/ 4194304) {
    				title_1_changes.$$scope = { dirty, ctx };
    			}

    			title_1.$set(title_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(title_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(102:0) {#if title}",
    		ctx
    	});

    	return block;
    }

    // (103:2) <Title>
    function create_default_slot_3$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*title*/ ctx[17]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*title*/ 131072) set_data_dev(t, /*title*/ ctx[17]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(103:2) <Title>",
    		ctx
    	});

    	return block;
    }

    // (133:3) {#if width > 80}
    function create_if_block_2$8(ctx) {
    	let setcoords;
    	let t0;
    	let t1;
    	let svg;
    	let t2;
    	let current;
    	setcoords = new SetCoords({ $$inline: true });
    	const back_slot_template = /*#slots*/ ctx[48].back;
    	const back_slot = create_slot(back_slot_template, ctx, /*$$scope*/ ctx[53], get_back_slot_context$2);

    	svg = new Svg({
    			props: {
    				pointerEvents: /*interactive*/ ctx[29],
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const front_slot_template = /*#slots*/ ctx[48].front;
    	const front_slot = create_slot(front_slot_template, ctx, /*$$scope*/ ctx[53], get_front_slot_context$2);

    	const block = {
    		c: function create() {
    			create_component(setcoords.$$.fragment);
    			t0 = space();
    			if (back_slot) back_slot.c();
    			t1 = space();
    			create_component(svg.$$.fragment);
    			t2 = space();
    			if (front_slot) front_slot.c();
    		},
    		m: function mount(target, anchor) {
    			mount_component(setcoords, target, anchor);
    			insert_dev(target, t0, anchor);

    			if (back_slot) {
    				back_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			mount_component(svg, target, anchor);
    			insert_dev(target, t2, anchor);

    			if (front_slot) {
    				front_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (back_slot) {
    				if (back_slot.p && (!current || dirty[1] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						back_slot,
    						back_slot_template,
    						ctx,
    						/*$$scope*/ ctx[53],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
    						: get_slot_changes(back_slot_template, /*$$scope*/ ctx[53], dirty, get_back_slot_changes$2),
    						get_back_slot_context$2
    					);
    				}
    			}

    			const svg_changes = {};
    			if (dirty[0] & /*interactive*/ 536870912) svg_changes.pointerEvents = /*interactive*/ ctx[29];

    			if (dirty[0] & /*hovered, selected, labels, lineWidth, line, mode, areaOpacity, area, yTicks, yFormatTick, yAxis, xTicks, snapTicks, xPrefix, xAxis*/ 1408364547 | dirty[1] & /*$$scope, select, hover, highlighted, yPrefix, ySuffix, xSuffix*/ 4194479) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);

    			if (front_slot) {
    				if (front_slot.p && (!current || dirty[1] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						front_slot,
    						front_slot_template,
    						ctx,
    						/*$$scope*/ ctx[53],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
    						: get_slot_changes(front_slot_template, /*$$scope*/ ctx[53], dirty, get_front_slot_changes$2),
    						get_front_slot_context$2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(setcoords.$$.fragment, local);
    			transition_in(back_slot, local);
    			transition_in(svg.$$.fragment, local);
    			transition_in(front_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(setcoords.$$.fragment, local);
    			transition_out(back_slot, local);
    			transition_out(svg.$$.fragment, local);
    			transition_out(front_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(setcoords, detaching);
    			if (detaching) detach_dev(t0);
    			if (back_slot) back_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(svg, detaching);
    			if (detaching) detach_dev(t2);
    			if (front_slot) front_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(133:3) {#if width > 80}",
    		ctx
    	});

    	return block;
    }

    // (137:6) {#if xAxis}
    function create_if_block_7$2(ctx) {
    	let axisx;
    	let current;

    	axisx = new AxisX$2({
    			props: {
    				ticks: /*xTicks*/ ctx[15],
    				snapTicks: /*snapTicks*/ ctx[21],
    				prefix: /*xPrefix*/ ctx[30],
    				suffix: /*xSuffix*/ ctx[31]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(axisx.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisx, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const axisx_changes = {};
    			if (dirty[0] & /*xTicks*/ 32768) axisx_changes.ticks = /*xTicks*/ ctx[15];
    			if (dirty[0] & /*snapTicks*/ 2097152) axisx_changes.snapTicks = /*snapTicks*/ ctx[21];
    			if (dirty[0] & /*xPrefix*/ 1073741824) axisx_changes.prefix = /*xPrefix*/ ctx[30];
    			if (dirty[1] & /*xSuffix*/ 1) axisx_changes.suffix = /*xSuffix*/ ctx[31];
    			axisx.$set(axisx_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisx.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisx.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisx, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(137:6) {#if xAxis}",
    		ctx
    	});

    	return block;
    }

    // (140:6) {#if yAxis}
    function create_if_block_6$2(ctx) {
    	let axisy;
    	let current;

    	axisy = new AxisY$2({
    			props: {
    				ticks: /*yTicks*/ ctx[16],
    				formatTick: /*yFormatTick*/ ctx[12],
    				prefix: /*yPrefix*/ ctx[32],
    				suffix: /*ySuffix*/ ctx[33]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(axisy.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisy, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const axisy_changes = {};
    			if (dirty[0] & /*yTicks*/ 65536) axisy_changes.ticks = /*yTicks*/ ctx[16];
    			if (dirty[0] & /*yFormatTick*/ 4096) axisy_changes.formatTick = /*yFormatTick*/ ctx[12];
    			if (dirty[1] & /*yPrefix*/ 2) axisy_changes.prefix = /*yPrefix*/ ctx[32];
    			if (dirty[1] & /*ySuffix*/ 4) axisy_changes.suffix = /*ySuffix*/ ctx[33];
    			axisy.$set(axisy_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisy.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisy.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisy, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(140:6) {#if yAxis}",
    		ctx
    	});

    	return block;
    }

    // (143:6) {#if area}
    function create_if_block_5$5(ctx) {
    	let area_1;
    	let current;

    	area_1 = new Area({
    			props: {
    				mode: /*mode*/ ctx[24],
    				opacity: /*areaOpacity*/ ctx[25]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(area_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(area_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const area_1_changes = {};
    			if (dirty[0] & /*mode*/ 16777216) area_1_changes.mode = /*mode*/ ctx[24];
    			if (dirty[0] & /*areaOpacity*/ 33554432) area_1_changes.opacity = /*areaOpacity*/ ctx[25];
    			area_1.$set(area_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(area_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(area_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(area_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$5.name,
    		type: "if",
    		source: "(143:6) {#if area}",
    		ctx
    	});

    	return block;
    }

    // (146:6) {#if line}
    function create_if_block_4$5(ctx) {
    	let line_1;
    	let updating_selected;
    	let updating_hovered;
    	let current;

    	function line_1_selected_binding(value) {
    		/*line_1_selected_binding*/ ctx[49](value);
    	}

    	function line_1_hovered_binding(value) {
    		/*line_1_hovered_binding*/ ctx[50](value);
    	}

    	let line_1_props = {
    		lineWidth: /*lineWidth*/ ctx[28],
    		select: /*select*/ ctx[36],
    		hover: /*hover*/ ctx[34],
    		highlighted: /*highlighted*/ ctx[38]
    	};

    	if (/*selected*/ ctx[1] !== void 0) {
    		line_1_props.selected = /*selected*/ ctx[1];
    	}

    	if (/*hovered*/ ctx[0] !== void 0) {
    		line_1_props.hovered = /*hovered*/ ctx[0];
    	}

    	line_1 = new Line$1({ props: line_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(line_1, 'selected', line_1_selected_binding));
    	binding_callbacks.push(() => bind(line_1, 'hovered', line_1_hovered_binding));
    	line_1.$on("hover", /*hover_handler*/ ctx[51]);
    	line_1.$on("select", /*select_handler*/ ctx[52]);

    	const block = {
    		c: function create() {
    			create_component(line_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(line_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const line_1_changes = {};
    			if (dirty[0] & /*lineWidth*/ 268435456) line_1_changes.lineWidth = /*lineWidth*/ ctx[28];
    			if (dirty[1] & /*select*/ 32) line_1_changes.select = /*select*/ ctx[36];
    			if (dirty[1] & /*hover*/ 8) line_1_changes.hover = /*hover*/ ctx[34];
    			if (dirty[1] & /*highlighted*/ 128) line_1_changes.highlighted = /*highlighted*/ ctx[38];

    			if (!updating_selected && dirty[0] & /*selected*/ 2) {
    				updating_selected = true;
    				line_1_changes.selected = /*selected*/ ctx[1];
    				add_flush_callback(() => updating_selected = false);
    			}

    			if (!updating_hovered && dirty[0] & /*hovered*/ 1) {
    				updating_hovered = true;
    				line_1_changes.hovered = /*hovered*/ ctx[0];
    				add_flush_callback(() => updating_hovered = false);
    			}

    			line_1.$set(line_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(line_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(line_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(line_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(146:6) {#if line}",
    		ctx
    	});

    	return block;
    }

    // (149:3) {#if labels}
    function create_if_block_3$6(ctx) {
    	let labels_1;
    	let current;

    	labels_1 = new Labels({
    			props: {
    				hovered: /*hovered*/ ctx[0],
    				selected: /*selected*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(labels_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labels_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labels_1_changes = {};
    			if (dirty[0] & /*hovered*/ 1) labels_1_changes.hovered = /*hovered*/ ctx[0];
    			if (dirty[0] & /*selected*/ 2) labels_1_changes.selected = /*selected*/ ctx[1];
    			labels_1.$set(labels_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labels_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labels_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labels_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(149:3) {#if labels}",
    		ctx
    	});

    	return block;
    }

    // (136:2) <Svg pointerEvents={interactive}>
    function create_default_slot_2$4(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let current;
    	let if_block0 = /*xAxis*/ ctx[13] && create_if_block_7$2(ctx);
    	let if_block1 = /*yAxis*/ ctx[14] && create_if_block_6$2(ctx);
    	let if_block2 = /*area*/ ctx[23] && create_if_block_5$5(ctx);
    	let if_block3 = /*line*/ ctx[22] && create_if_block_4$5(ctx);
    	let if_block4 = /*labels*/ ctx[20] && create_if_block_3$6(ctx);
    	const svg_slot_template = /*#slots*/ ctx[48].svg;
    	const svg_slot = create_slot(svg_slot_template, ctx, /*$$scope*/ ctx[53], get_svg_slot_context$2);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (if_block3) if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (svg_slot) svg_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert_dev(target, t4, anchor);

    			if (svg_slot) {
    				svg_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*xAxis*/ ctx[13]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*xAxis*/ 8192) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*yAxis*/ ctx[14]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*yAxis*/ 16384) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*area*/ ctx[23]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*area*/ 8388608) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_5$5(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*line*/ ctx[22]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*line*/ 4194304) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_4$5(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(t3.parentNode, t3);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*labels*/ ctx[20]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*labels*/ 1048576) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_3$6(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(t4.parentNode, t4);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (svg_slot) {
    				if (svg_slot.p && (!current || dirty[1] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						svg_slot,
    						svg_slot_template,
    						ctx,
    						/*$$scope*/ ctx[53],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
    						: get_slot_changes(svg_slot_template, /*$$scope*/ ctx[53], dirty, get_svg_slot_changes$2),
    						get_svg_slot_context$2
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(svg_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(svg_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (svg_slot) svg_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(136:2) <Svg pointerEvents={interactive}>",
    		ctx
    	});

    	return block;
    }

    // (107:1) <LayerCake   {padding}   x={xKey}   y={yKey}   z={zKey}   yDomain={$yDomain}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}   zScale={scaleOrdinal()}   {zDomain}   zRange={colors}   data={groupedData}   flatData={data}   custom={{    type: 'line',    mode,    idKey,    labelKey,    coords,    colorSelect,    colorHover,    colorHighlight,       animation,       duration     }}   let:width  >
    function create_default_slot_1$5(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*width*/ ctx[60] > 80 && create_if_block_2$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*width*/ ctx[60] > 80) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[1] & /*width*/ 536870912) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(107:1) <LayerCake   {padding}   x={xKey}   y={yKey}   z={zKey}   yDomain={$yDomain}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}   zScale={scaleOrdinal()}   {zDomain}   zRange={colors}   data={groupedData}   flatData={data}   custom={{    type: 'line',    mode,    idKey,    labelKey,    coords,    colorSelect,    colorHover,    colorHighlight,       animation,       duration     }}   let:width  >",
    		ctx
    	});

    	return block;
    }

    // (158:0) {#if legend && zDomain}
    function create_if_block_1$b(ctx) {
    	let legend_1;
    	let current;

    	legend_1 = new Legend$2({
    			props: {
    				domain: /*zDomain*/ ctx[40],
    				colors: /*colors*/ ctx[27],
    				line: /*line*/ ctx[22],
    				markerWidth: /*lineWidth*/ ctx[28]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(legend_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(legend_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const legend_1_changes = {};
    			if (dirty[1] & /*zDomain*/ 512) legend_1_changes.domain = /*zDomain*/ ctx[40];
    			if (dirty[0] & /*colors*/ 134217728) legend_1_changes.colors = /*colors*/ ctx[27];
    			if (dirty[0] & /*line*/ 4194304) legend_1_changes.line = /*line*/ ctx[22];
    			if (dirty[0] & /*lineWidth*/ 268435456) legend_1_changes.markerWidth = /*lineWidth*/ ctx[28];
    			legend_1.$set(legend_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(legend_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(legend_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(legend_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(158:0) {#if legend && zDomain}",
    		ctx
    	});

    	return block;
    }

    // (161:0) {#if footer}
    function create_if_block$f(ctx) {
    	let footer_1;
    	let current;

    	footer_1 = new Footer({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(footer_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(footer_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const footer_1_changes = {};

    			if (dirty[0] & /*footer*/ 262144 | dirty[1] & /*$$scope*/ 4194304) {
    				footer_1_changes.$$scope = { dirty, ctx };
    			}

    			footer_1.$set(footer_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(footer_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(161:0) {#if footer}",
    		ctx
    	});

    	return block;
    }

    // (162:2) <Footer>
    function create_default_slot$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*footer*/ ctx[18]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*footer*/ 262144) set_data_dev(t, /*footer*/ ctx[18]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(162:2) <Footer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let t0;
    	let t1;
    	let div;
    	let layercake;
    	let t2;
    	let t3;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*title*/ ctx[17] && create_if_block_8$1(ctx);
    	const options_slot_template = /*#slots*/ ctx[48].options;
    	const options_slot = create_slot(options_slot_template, ctx, /*$$scope*/ ctx[53], get_options_slot_context$2);

    	layercake = new LayerCake({
    			props: {
    				padding: /*padding*/ ctx[26],
    				x: /*xKey*/ ctx[6],
    				y: /*yKey*/ ctx[7],
    				z: /*zKey*/ ctx[8],
    				yDomain: /*$yDomain*/ ctx[42],
    				yScale: /*yScale*/ ctx[11] == 'log'
    				? symlog()
    				: linear(),
    				zScale: ordinal(),
    				zDomain: /*zDomain*/ ctx[40],
    				zRange: /*colors*/ ctx[27],
    				data: /*groupedData*/ ctx[41],
    				flatData: /*data*/ ctx[2],
    				custom: {
    					type: 'line',
    					mode: /*mode*/ ctx[24],
    					idKey: /*idKey*/ ctx[9],
    					labelKey: /*labelKey*/ ctx[10],
    					coords: /*coords*/ ctx[43],
    					colorSelect: /*colorSelect*/ ctx[37],
    					colorHover: /*colorHover*/ ctx[35],
    					colorHighlight: /*colorHighlight*/ ctx[39],
    					animation: /*animation*/ ctx[4],
    					duration: /*duration*/ ctx[5]
    				},
    				$$slots: {
    					default: [
    						create_default_slot_1$5,
    						({ width }) => ({ 60: width }),
    						({ width }) => [0, width ? 536870912 : 0]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block1 = /*legend*/ ctx[19] && /*zDomain*/ ctx[40] && create_if_block_1$b(ctx);
    	let if_block2 = /*footer*/ ctx[18] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (options_slot) options_slot.c();
    			t1 = space();
    			div = element("div");
    			create_component(layercake.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(div, "class", "chart-container svelte-1dnlmiu");

    			set_style(div, "height", typeof /*height*/ ctx[3] == 'number'
    			? /*height*/ ctx[3] + 'px'
    			: /*height*/ ctx[3]);

    			add_location(div, file$q, 105, 0, 3481);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);

    			if (options_slot) {
    				options_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(layercake, div, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*title*/ ctx[17]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*title*/ 131072) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_8$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (options_slot) {
    				if (options_slot.p && (!current || dirty[1] & /*$$scope*/ 4194304)) {
    					update_slot_base(
    						options_slot,
    						options_slot_template,
    						ctx,
    						/*$$scope*/ ctx[53],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
    						: get_slot_changes(options_slot_template, /*$$scope*/ ctx[53], dirty, get_options_slot_changes$2),
    						get_options_slot_context$2
    					);
    				}
    			}

    			const layercake_changes = {};
    			if (dirty[0] & /*padding*/ 67108864) layercake_changes.padding = /*padding*/ ctx[26];
    			if (dirty[0] & /*xKey*/ 64) layercake_changes.x = /*xKey*/ ctx[6];
    			if (dirty[0] & /*yKey*/ 128) layercake_changes.y = /*yKey*/ ctx[7];
    			if (dirty[0] & /*zKey*/ 256) layercake_changes.z = /*zKey*/ ctx[8];
    			if (dirty[1] & /*$yDomain*/ 2048) layercake_changes.yDomain = /*$yDomain*/ ctx[42];

    			if (dirty[0] & /*yScale*/ 2048) layercake_changes.yScale = /*yScale*/ ctx[11] == 'log'
    			? symlog()
    			: linear();

    			if (dirty[1] & /*zDomain*/ 512) layercake_changes.zDomain = /*zDomain*/ ctx[40];
    			if (dirty[0] & /*colors*/ 134217728) layercake_changes.zRange = /*colors*/ ctx[27];
    			if (dirty[1] & /*groupedData*/ 1024) layercake_changes.data = /*groupedData*/ ctx[41];
    			if (dirty[0] & /*data*/ 4) layercake_changes.flatData = /*data*/ ctx[2];

    			if (dirty[0] & /*mode, idKey, labelKey, animation, duration*/ 16778800 | dirty[1] & /*colorSelect, colorHover, colorHighlight*/ 336) layercake_changes.custom = {
    				type: 'line',
    				mode: /*mode*/ ctx[24],
    				idKey: /*idKey*/ ctx[9],
    				labelKey: /*labelKey*/ ctx[10],
    				coords: /*coords*/ ctx[43],
    				colorSelect: /*colorSelect*/ ctx[37],
    				colorHover: /*colorHover*/ ctx[35],
    				colorHighlight: /*colorHighlight*/ ctx[39],
    				animation: /*animation*/ ctx[4],
    				duration: /*duration*/ ctx[5]
    			};

    			if (dirty[0] & /*interactive, hovered, selected, labels, lineWidth, line, mode, areaOpacity, area, yTicks, yFormatTick, yAxis, xTicks, snapTicks, xPrefix, xAxis*/ 1945235459 | dirty[1] & /*$$scope, select, hover, highlighted, yPrefix, ySuffix, xSuffix, width*/ 541065391) {
    				layercake_changes.$$scope = { dirty, ctx };
    			}

    			layercake.$set(layercake_changes);

    			if (!current || dirty[0] & /*height*/ 8) {
    				set_style(div, "height", typeof /*height*/ ctx[3] == 'number'
    				? /*height*/ ctx[3] + 'px'
    				: /*height*/ ctx[3]);
    			}

    			if (/*legend*/ ctx[19] && /*zDomain*/ ctx[40]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*legend*/ 524288 | dirty[1] & /*zDomain*/ 512) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$b(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*footer*/ ctx[18]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*footer*/ 262144) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$f(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(options_slot, local);
    			transition_in(layercake.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(options_slot, local);
    			transition_out(layercake.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (options_slot) options_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(layercake);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let zDomain;
    	let groupedData;
    	let $yDomain;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LineChart', slots, ['options','back','svg','front']);
    	let { data } = $$props;
    	let { height = 250 } = $$props;
    	let { animation = true } = $$props;
    	let { duration = 800 } = $$props;
    	let { xKey = 'x' } = $$props;
    	let { yKey = 'y' } = $$props;
    	let { zKey = null } = $$props;
    	let { idKey = zKey } = $$props;
    	let { labelKey = idKey } = $$props;
    	let { yScale = 'linear' } = $$props;
    	let { yFormatTick = d => d } = $$props;
    	let { yMax = null } = $$props;
    	let { yMin = 0 } = $$props;
    	let { xAxis = true } = $$props;
    	let { yAxis = true } = $$props;
    	let { xTicks = 4 } = $$props;
    	let { yTicks = 4 } = $$props;
    	let { title = null } = $$props;
    	let { footer = null } = $$props;
    	let { legend = false } = $$props;
    	let { labels = false } = $$props;
    	let { snapTicks = true } = $$props;
    	let { line = true } = $$props;
    	let { area = true } = $$props;
    	let { mode = 'default' } = $$props;
    	let { areaOpacity = 1 } = $$props;
    	let { padding = { top: 0, bottom: 20, left: 35, right: 0 } } = $$props;
    	let { color = null } = $$props;

    	let { colors = color
    	? [color]
    	: [
    			'#206095',
    			'#A8BD3A',
    			'#003C57',
    			'#27A0CC',
    			'#118C7B',
    			'#F66068',
    			'#746CB1',
    			'#22D0B6',
    			'lightgrey'
    		] } = $$props;

    	let { lineWidth = 2.5 } = $$props;
    	let { interactive = true } = $$props;
    	let { xPrefix = "" } = $$props;
    	let { xSuffix = "" } = $$props;
    	let { yPrefix = "" } = $$props;
    	let { ySuffix = "" } = $$props;
    	let { hover = false } = $$props;
    	let { hovered = null } = $$props;
    	let { colorHover = 'orange' } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let { colorSelect = '#206095' } = $$props;
    	let { highlighted = [] } = $$props;
    	let { colorHighlight = '#206095' } = $$props;
    	const tweenOptions = { duration, easing: cubicInOut };
    	const coords = tweened(undefined, tweenOptions);
    	const distinct = (d, i, arr) => arr.indexOf(d) == i;

    	function getTotals(data, keys) {
    		let arr = [];

    		keys.forEach(key => {
    			let vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);
    			let sum = vals.reduce((acc, curr) => acc + curr);
    			arr.push(sum);
    		});

    		return arr;
    	}

    	// Functions to animate yDomain
    	const yDomSet = (data, mode, yKey, yMax) => yMax
    	? [yMin, yMax]
    	: mode == 'stacked' && yKey
    		? [
    				yMin,
    				Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))
    			]
    		: [yMin, Math.max(...data.map(d => d[yKey]))];

    	function yDomUpdate(data, mode, yKey, yMax) {
    		let newYDom = yDomSet(data, mode, yKey, yMax);

    		if (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {
    			yDomain.set(newYDom, { duration: animation ? duration : 0 });
    			yDom = newYDom;
    		}
    	}

    	let yDom = yDomSet(data, mode, yKey, yMax);
    	const yDomain = tweened(yDom, tweenOptions);
    	validate_store(yDomain, 'yDomain');
    	component_subscribe($$self, yDomain, value => $$invalidate(42, $yDomain = value));

    	const writable_props = [
    		'data',
    		'height',
    		'animation',
    		'duration',
    		'xKey',
    		'yKey',
    		'zKey',
    		'idKey',
    		'labelKey',
    		'yScale',
    		'yFormatTick',
    		'yMax',
    		'yMin',
    		'xAxis',
    		'yAxis',
    		'xTicks',
    		'yTicks',
    		'title',
    		'footer',
    		'legend',
    		'labels',
    		'snapTicks',
    		'line',
    		'area',
    		'mode',
    		'areaOpacity',
    		'padding',
    		'color',
    		'colors',
    		'lineWidth',
    		'interactive',
    		'xPrefix',
    		'xSuffix',
    		'yPrefix',
    		'ySuffix',
    		'hover',
    		'hovered',
    		'colorHover',
    		'select',
    		'selected',
    		'colorSelect',
    		'highlighted',
    		'colorHighlight'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LineChart> was created with unknown prop '${key}'`);
    	});

    	function line_1_selected_binding(value) {
    		selected = value;
    		$$invalidate(1, selected);
    	}

    	function line_1_hovered_binding(value) {
    		hovered = value;
    		$$invalidate(0, hovered);
    	}

    	function hover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function select_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(2, data = $$props.data);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(4, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(5, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(6, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(7, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(8, zKey = $$props.zKey);
    		if ('idKey' in $$props) $$invalidate(9, idKey = $$props.idKey);
    		if ('labelKey' in $$props) $$invalidate(10, labelKey = $$props.labelKey);
    		if ('yScale' in $$props) $$invalidate(11, yScale = $$props.yScale);
    		if ('yFormatTick' in $$props) $$invalidate(12, yFormatTick = $$props.yFormatTick);
    		if ('yMax' in $$props) $$invalidate(45, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(46, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(13, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(14, yAxis = $$props.yAxis);
    		if ('xTicks' in $$props) $$invalidate(15, xTicks = $$props.xTicks);
    		if ('yTicks' in $$props) $$invalidate(16, yTicks = $$props.yTicks);
    		if ('title' in $$props) $$invalidate(17, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(18, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(19, legend = $$props.legend);
    		if ('labels' in $$props) $$invalidate(20, labels = $$props.labels);
    		if ('snapTicks' in $$props) $$invalidate(21, snapTicks = $$props.snapTicks);
    		if ('line' in $$props) $$invalidate(22, line = $$props.line);
    		if ('area' in $$props) $$invalidate(23, area = $$props.area);
    		if ('mode' in $$props) $$invalidate(24, mode = $$props.mode);
    		if ('areaOpacity' in $$props) $$invalidate(25, areaOpacity = $$props.areaOpacity);
    		if ('padding' in $$props) $$invalidate(26, padding = $$props.padding);
    		if ('color' in $$props) $$invalidate(47, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(27, colors = $$props.colors);
    		if ('lineWidth' in $$props) $$invalidate(28, lineWidth = $$props.lineWidth);
    		if ('interactive' in $$props) $$invalidate(29, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(30, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(31, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(32, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(33, ySuffix = $$props.ySuffix);
    		if ('hover' in $$props) $$invalidate(34, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('colorHover' in $$props) $$invalidate(35, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(36, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(37, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(38, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(39, colorHighlight = $$props.colorHighlight);
    		if ('$$scope' in $$props) $$invalidate(53, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		LayerCake,
    		Svg,
    		scaleOrdinal: ordinal,
    		scaleLinear: linear,
    		scaleSymlog: symlog,
    		tweened,
    		cubicInOut,
    		groupData,
    		stackData,
    		SetCoords,
    		Line: Line$1,
    		Area,
    		AxisX: AxisX$2,
    		AxisY: AxisY$2,
    		Legend: Legend$2,
    		Title,
    		Footer,
    		Labels,
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		idKey,
    		labelKey,
    		yScale,
    		yFormatTick,
    		yMax,
    		yMin,
    		xAxis,
    		yAxis,
    		xTicks,
    		yTicks,
    		title,
    		footer,
    		legend,
    		labels,
    		snapTicks,
    		line,
    		area,
    		mode,
    		areaOpacity,
    		padding,
    		color,
    		colors,
    		lineWidth,
    		interactive,
    		xPrefix,
    		xSuffix,
    		yPrefix,
    		ySuffix,
    		hover,
    		hovered,
    		colorHover,
    		select,
    		selected,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		tweenOptions,
    		coords,
    		distinct,
    		getTotals,
    		yDomSet,
    		yDomUpdate,
    		yDom,
    		yDomain,
    		zDomain,
    		groupedData,
    		$yDomain
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(2, data = $$props.data);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(4, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(5, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(6, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(7, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(8, zKey = $$props.zKey);
    		if ('idKey' in $$props) $$invalidate(9, idKey = $$props.idKey);
    		if ('labelKey' in $$props) $$invalidate(10, labelKey = $$props.labelKey);
    		if ('yScale' in $$props) $$invalidate(11, yScale = $$props.yScale);
    		if ('yFormatTick' in $$props) $$invalidate(12, yFormatTick = $$props.yFormatTick);
    		if ('yMax' in $$props) $$invalidate(45, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(46, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(13, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(14, yAxis = $$props.yAxis);
    		if ('xTicks' in $$props) $$invalidate(15, xTicks = $$props.xTicks);
    		if ('yTicks' in $$props) $$invalidate(16, yTicks = $$props.yTicks);
    		if ('title' in $$props) $$invalidate(17, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(18, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(19, legend = $$props.legend);
    		if ('labels' in $$props) $$invalidate(20, labels = $$props.labels);
    		if ('snapTicks' in $$props) $$invalidate(21, snapTicks = $$props.snapTicks);
    		if ('line' in $$props) $$invalidate(22, line = $$props.line);
    		if ('area' in $$props) $$invalidate(23, area = $$props.area);
    		if ('mode' in $$props) $$invalidate(24, mode = $$props.mode);
    		if ('areaOpacity' in $$props) $$invalidate(25, areaOpacity = $$props.areaOpacity);
    		if ('padding' in $$props) $$invalidate(26, padding = $$props.padding);
    		if ('color' in $$props) $$invalidate(47, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(27, colors = $$props.colors);
    		if ('lineWidth' in $$props) $$invalidate(28, lineWidth = $$props.lineWidth);
    		if ('interactive' in $$props) $$invalidate(29, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(30, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(31, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(32, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(33, ySuffix = $$props.ySuffix);
    		if ('hover' in $$props) $$invalidate(34, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('colorHover' in $$props) $$invalidate(35, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(36, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(37, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(38, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(39, colorHighlight = $$props.colorHighlight);
    		if ('yDom' in $$props) yDom = $$props.yDom;
    		if ('zDomain' in $$props) $$invalidate(40, zDomain = $$props.zDomain);
    		if ('groupedData' in $$props) $$invalidate(41, groupedData = $$props.groupedData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*data, mode, yKey*/ 16777348 | $$self.$$.dirty[1] & /*yMax*/ 16384) {
    			yDomUpdate(data, mode, yKey, yMax);
    		}

    		if ($$self.$$.dirty[0] & /*zKey, data*/ 260) {
    			// Function to update zDomain
    			$$invalidate(40, zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null);
    		}

    		if ($$self.$$.dirty[0] & /*mode, data, yKey, zKey*/ 16777604 | $$self.$$.dirty[1] & /*zDomain*/ 512) {
    			// Create a data series for each zKey (group)
    			$$invalidate(41, groupedData = mode == 'stacked'
    			? stackData(data, zDomain, yKey, zKey)
    			: groupData(data, zDomain, zKey));
    		}
    	};

    	return [
    		hovered,
    		selected,
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		idKey,
    		labelKey,
    		yScale,
    		yFormatTick,
    		xAxis,
    		yAxis,
    		xTicks,
    		yTicks,
    		title,
    		footer,
    		legend,
    		labels,
    		snapTicks,
    		line,
    		area,
    		mode,
    		areaOpacity,
    		padding,
    		colors,
    		lineWidth,
    		interactive,
    		xPrefix,
    		xSuffix,
    		yPrefix,
    		ySuffix,
    		hover,
    		colorHover,
    		select,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		zDomain,
    		groupedData,
    		$yDomain,
    		coords,
    		yDomain,
    		yMax,
    		yMin,
    		color,
    		slots,
    		line_1_selected_binding,
    		line_1_hovered_binding,
    		hover_handler,
    		select_handler,
    		$$scope
    	];
    }

    class LineChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$t,
    			create_fragment$t,
    			safe_not_equal,
    			{
    				data: 2,
    				height: 3,
    				animation: 4,
    				duration: 5,
    				xKey: 6,
    				yKey: 7,
    				zKey: 8,
    				idKey: 9,
    				labelKey: 10,
    				yScale: 11,
    				yFormatTick: 12,
    				yMax: 45,
    				yMin: 46,
    				xAxis: 13,
    				yAxis: 14,
    				xTicks: 15,
    				yTicks: 16,
    				title: 17,
    				footer: 18,
    				legend: 19,
    				labels: 20,
    				snapTicks: 21,
    				line: 22,
    				area: 23,
    				mode: 24,
    				areaOpacity: 25,
    				padding: 26,
    				color: 47,
    				colors: 27,
    				lineWidth: 28,
    				interactive: 29,
    				xPrefix: 30,
    				xSuffix: 31,
    				yPrefix: 32,
    				ySuffix: 33,
    				hover: 34,
    				hovered: 0,
    				colorHover: 35,
    				select: 36,
    				selected: 1,
    				colorSelect: 37,
    				highlighted: 38,
    				colorHighlight: 39
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LineChart",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[2] === undefined && !('data' in props)) {
    			console.warn("<LineChart> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		return this.$$.ctx[2];
    	}

    	set data(data) {
    		this.$$set({ data });
    		flush();
    	}

    	get height() {
    		return this.$$.ctx[3];
    	}

    	set height(height) {
    		this.$$set({ height });
    		flush();
    	}

    	get animation() {
    		return this.$$.ctx[4];
    	}

    	set animation(animation) {
    		this.$$set({ animation });
    		flush();
    	}

    	get duration() {
    		return this.$$.ctx[5];
    	}

    	set duration(duration) {
    		this.$$set({ duration });
    		flush();
    	}

    	get xKey() {
    		return this.$$.ctx[6];
    	}

    	set xKey(xKey) {
    		this.$$set({ xKey });
    		flush();
    	}

    	get yKey() {
    		return this.$$.ctx[7];
    	}

    	set yKey(yKey) {
    		this.$$set({ yKey });
    		flush();
    	}

    	get zKey() {
    		return this.$$.ctx[8];
    	}

    	set zKey(zKey) {
    		this.$$set({ zKey });
    		flush();
    	}

    	get idKey() {
    		return this.$$.ctx[9];
    	}

    	set idKey(idKey) {
    		this.$$set({ idKey });
    		flush();
    	}

    	get labelKey() {
    		return this.$$.ctx[10];
    	}

    	set labelKey(labelKey) {
    		this.$$set({ labelKey });
    		flush();
    	}

    	get yScale() {
    		return this.$$.ctx[11];
    	}

    	set yScale(yScale) {
    		this.$$set({ yScale });
    		flush();
    	}

    	get yFormatTick() {
    		return this.$$.ctx[12];
    	}

    	set yFormatTick(yFormatTick) {
    		this.$$set({ yFormatTick });
    		flush();
    	}

    	get yMax() {
    		return this.$$.ctx[45];
    	}

    	set yMax(yMax) {
    		this.$$set({ yMax });
    		flush();
    	}

    	get yMin() {
    		return this.$$.ctx[46];
    	}

    	set yMin(yMin) {
    		this.$$set({ yMin });
    		flush();
    	}

    	get xAxis() {
    		return this.$$.ctx[13];
    	}

    	set xAxis(xAxis) {
    		this.$$set({ xAxis });
    		flush();
    	}

    	get yAxis() {
    		return this.$$.ctx[14];
    	}

    	set yAxis(yAxis) {
    		this.$$set({ yAxis });
    		flush();
    	}

    	get xTicks() {
    		return this.$$.ctx[15];
    	}

    	set xTicks(xTicks) {
    		this.$$set({ xTicks });
    		flush();
    	}

    	get yTicks() {
    		return this.$$.ctx[16];
    	}

    	set yTicks(yTicks) {
    		this.$$set({ yTicks });
    		flush();
    	}

    	get title() {
    		return this.$$.ctx[17];
    	}

    	set title(title) {
    		this.$$set({ title });
    		flush();
    	}

    	get footer() {
    		return this.$$.ctx[18];
    	}

    	set footer(footer) {
    		this.$$set({ footer });
    		flush();
    	}

    	get legend() {
    		return this.$$.ctx[19];
    	}

    	set legend(legend) {
    		this.$$set({ legend });
    		flush();
    	}

    	get labels() {
    		return this.$$.ctx[20];
    	}

    	set labels(labels) {
    		this.$$set({ labels });
    		flush();
    	}

    	get snapTicks() {
    		return this.$$.ctx[21];
    	}

    	set snapTicks(snapTicks) {
    		this.$$set({ snapTicks });
    		flush();
    	}

    	get line() {
    		return this.$$.ctx[22];
    	}

    	set line(line) {
    		this.$$set({ line });
    		flush();
    	}

    	get area() {
    		return this.$$.ctx[23];
    	}

    	set area(area) {
    		this.$$set({ area });
    		flush();
    	}

    	get mode() {
    		return this.$$.ctx[24];
    	}

    	set mode(mode) {
    		this.$$set({ mode });
    		flush();
    	}

    	get areaOpacity() {
    		return this.$$.ctx[25];
    	}

    	set areaOpacity(areaOpacity) {
    		this.$$set({ areaOpacity });
    		flush();
    	}

    	get padding() {
    		return this.$$.ctx[26];
    	}

    	set padding(padding) {
    		this.$$set({ padding });
    		flush();
    	}

    	get color() {
    		return this.$$.ctx[47];
    	}

    	set color(color) {
    		this.$$set({ color });
    		flush();
    	}

    	get colors() {
    		return this.$$.ctx[27];
    	}

    	set colors(colors) {
    		this.$$set({ colors });
    		flush();
    	}

    	get lineWidth() {
    		return this.$$.ctx[28];
    	}

    	set lineWidth(lineWidth) {
    		this.$$set({ lineWidth });
    		flush();
    	}

    	get interactive() {
    		return this.$$.ctx[29];
    	}

    	set interactive(interactive) {
    		this.$$set({ interactive });
    		flush();
    	}

    	get xPrefix() {
    		return this.$$.ctx[30];
    	}

    	set xPrefix(xPrefix) {
    		this.$$set({ xPrefix });
    		flush();
    	}

    	get xSuffix() {
    		return this.$$.ctx[31];
    	}

    	set xSuffix(xSuffix) {
    		this.$$set({ xSuffix });
    		flush();
    	}

    	get yPrefix() {
    		return this.$$.ctx[32];
    	}

    	set yPrefix(yPrefix) {
    		this.$$set({ yPrefix });
    		flush();
    	}

    	get ySuffix() {
    		return this.$$.ctx[33];
    	}

    	set ySuffix(ySuffix) {
    		this.$$set({ ySuffix });
    		flush();
    	}

    	get hover() {
    		return this.$$.ctx[34];
    	}

    	set hover(hover) {
    		this.$$set({ hover });
    		flush();
    	}

    	get hovered() {
    		return this.$$.ctx[0];
    	}

    	set hovered(hovered) {
    		this.$$set({ hovered });
    		flush();
    	}

    	get colorHover() {
    		return this.$$.ctx[35];
    	}

    	set colorHover(colorHover) {
    		this.$$set({ colorHover });
    		flush();
    	}

    	get select() {
    		return this.$$.ctx[36];
    	}

    	set select(select) {
    		this.$$set({ select });
    		flush();
    	}

    	get selected() {
    		return this.$$.ctx[1];
    	}

    	set selected(selected) {
    		this.$$set({ selected });
    		flush();
    	}

    	get colorSelect() {
    		return this.$$.ctx[37];
    	}

    	set colorSelect(colorSelect) {
    		this.$$set({ colorSelect });
    		flush();
    	}

    	get highlighted() {
    		return this.$$.ctx[38];
    	}

    	set highlighted(highlighted) {
    		this.$$set({ highlighted });
    		flush();
    	}

    	get colorHighlight() {
    		return this.$$.ctx[39];
    	}

    	set colorHighlight(colorHighlight) {
    		this.$$set({ colorHighlight });
    		flush();
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Column.svelte generated by Svelte v3.43.1 */
    const file$p = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Column.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	child_ctx[37] = i;
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	child_ctx[40] = i;
    	return child_ctx;
    }

    // (47:0) {#if $coords}
    function create_if_block$e(ctx) {
    	let g;
    	let each_value = /*$coords*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "column-group");
    			add_location(g, file$p, 47, 0, 1176);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$coords, mode, $yScale, markerWidth, $data, idKey, hovered, colorHover, selected, colorSelect, colorHighlight, highlighted, lineWidth, overlayFill, $config, $zGet, $zRange, doHover, doSelect*/ 66848767) {
    				each_value = /*$coords*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(47:0) {#if $coords}",
    		ctx
    	});

    	return block;
    }

    // (50:3) {#each group as d, j}
    function create_each_block_1$5(ctx) {
    	let rect;
    	let rect_x_value;
    	let rect_y_value;
    	let rect_height_value;
    	let rect_width_value;
    	let rect_stroke_value;
    	let rect_stroke_width_value;
    	let rect_fill_value;
    	let mounted;
    	let dispose;

    	function mouseover_handler(...args) {
    		return /*mouseover_handler*/ ctx[29](/*i*/ ctx[37], /*j*/ ctx[40], ...args);
    	}

    	function focus_handler(...args) {
    		return /*focus_handler*/ ctx[31](/*i*/ ctx[37], /*j*/ ctx[40], ...args);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[33](/*i*/ ctx[37], /*j*/ ctx[40], ...args);
    	}

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "column-rect");
    			attr_dev(rect, "data-id", /*j*/ ctx[40]);
    			attr_dev(rect, "x", rect_x_value = /*d*/ ctx[38].x);

    			attr_dev(rect, "y", rect_y_value = /*mode*/ ctx[4] == 'barcode' || /*mode*/ ctx[4] == 'comparison' && /*i*/ ctx[37] > 0
    			? /*$yScale*/ ctx[6](/*d*/ ctx[38].y) - /*markerWidth*/ ctx[23] / 2
    			: /*$yScale*/ ctx[6](/*d*/ ctx[38].y));

    			attr_dev(rect, "height", rect_height_value = (/*mode*/ ctx[4] == 'barcode' || /*mode*/ ctx[4] == 'comparison' && /*i*/ ctx[37] > 0) && /*$yScale*/ ctx[6](0) - /*$yScale*/ ctx[6](/*d*/ ctx[38].h) < /*markerWidth*/ ctx[23]
    			? /*markerWidth*/ ctx[23]
    			: /*$yScale*/ ctx[6](0) - /*$yScale*/ ctx[6](/*d*/ ctx[38].h));

    			attr_dev(rect, "width", rect_width_value = /*d*/ ctx[38].w * 1.4);

    			attr_dev(rect, "stroke", rect_stroke_value = /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[19]
    			: /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1]
    				? /*colorSelect*/ ctx[20]
    				: /*colorHighlight*/ ctx[21]);

    			attr_dev(rect, "stroke-width", rect_stroke_width_value = /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*hovered*/ ctx[0] || /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1] || /*highlighted*/ ctx[2].includes(/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]])
    			? /*lineWidth*/ ctx[22]
    			: 0);

    			attr_dev(rect, "fill", rect_fill_value = /*overlayFill*/ ctx[3] && /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1]
    			? /*colorSelect*/ ctx[20]
    			: /*overlayFill*/ ctx[3] && /*highlighted*/ ctx[2].includes(/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]])
    				? /*colorHighlight*/ ctx[21]
    				: /*$config*/ ctx[8].z
    					? /*$zGet*/ ctx[9](/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]])
    					: /*$zRange*/ ctx[10][0]);

    			add_location(rect, file$p, 50, 3, 1258);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(rect, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(rect, "mouseleave", /*mouseleave_handler*/ ctx[30], false, false, false),
    					listen_dev(rect, "focus", focus_handler, false, false, false),
    					listen_dev(rect, "blur", /*blur_handler*/ ctx[32], false, false, false),
    					listen_dev(rect, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$coords*/ 32 && rect_x_value !== (rect_x_value = /*d*/ ctx[38].x)) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty[0] & /*mode, $yScale, $coords*/ 112 && rect_y_value !== (rect_y_value = /*mode*/ ctx[4] == 'barcode' || /*mode*/ ctx[4] == 'comparison' && /*i*/ ctx[37] > 0
    			? /*$yScale*/ ctx[6](/*d*/ ctx[38].y) - /*markerWidth*/ ctx[23] / 2
    			: /*$yScale*/ ctx[6](/*d*/ ctx[38].y))) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (dirty[0] & /*mode, $yScale, $coords*/ 112 && rect_height_value !== (rect_height_value = (/*mode*/ ctx[4] == 'barcode' || /*mode*/ ctx[4] == 'comparison' && /*i*/ ctx[37] > 0) && /*$yScale*/ ctx[6](0) - /*$yScale*/ ctx[6](/*d*/ ctx[38].h) < /*markerWidth*/ ctx[23]
    			? /*markerWidth*/ ctx[23]
    			: /*$yScale*/ ctx[6](0) - /*$yScale*/ ctx[6](/*d*/ ctx[38].h))) {
    				attr_dev(rect, "height", rect_height_value);
    			}

    			if (dirty[0] & /*$coords*/ 32 && rect_width_value !== (rect_width_value = /*d*/ ctx[38].w * 1.4)) {
    				attr_dev(rect, "width", rect_width_value);
    			}

    			if (dirty[0] & /*$data, hovered, selected*/ 131 && rect_stroke_value !== (rect_stroke_value = /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[19]
    			: /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1]
    				? /*colorSelect*/ ctx[20]
    				: /*colorHighlight*/ ctx[21])) {
    				attr_dev(rect, "stroke", rect_stroke_value);
    			}

    			if (dirty[0] & /*$data, hovered, selected, highlighted*/ 135 && rect_stroke_width_value !== (rect_stroke_width_value = /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*hovered*/ ctx[0] || /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1] || /*highlighted*/ ctx[2].includes(/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]])
    			? /*lineWidth*/ ctx[22]
    			: 0)) {
    				attr_dev(rect, "stroke-width", rect_stroke_width_value);
    			}

    			if (dirty[0] & /*overlayFill, $data, selected, highlighted, $config, $zGet, $zRange*/ 1934 && rect_fill_value !== (rect_fill_value = /*overlayFill*/ ctx[3] && /*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]] == /*selected*/ ctx[1]
    			? /*colorSelect*/ ctx[20]
    			: /*overlayFill*/ ctx[3] && /*highlighted*/ ctx[2].includes(/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]][/*idKey*/ ctx[18]])
    				? /*colorHighlight*/ ctx[21]
    				: /*$config*/ ctx[8].z
    					? /*$zGet*/ ctx[9](/*$data*/ ctx[7][/*i*/ ctx[37]][/*j*/ ctx[40]])
    					: /*$zRange*/ ctx[10][0])) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(50:3) {#each group as d, j}",
    		ctx
    	});

    	return block;
    }

    // (49:1) {#each $coords as group, i}
    function create_each_block$e(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*group*/ ctx[35];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$coords, mode, $yScale, markerWidth, $data, idKey, hovered, colorHover, selected, colorSelect, colorHighlight, highlighted, lineWidth, overlayFill, $config, $zGet, $zRange, doHover, doSelect*/ 66848767) {
    				each_value_1 = /*group*/ ctx[35];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(49:1) {#each $coords as group, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[5] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$coords*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let mode;
    	let $custom;
    	let $coords;
    	let $yScale;
    	let $data;
    	let $config;
    	let $zGet;
    	let $zRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Column', slots, []);
    	const { data, yScale, zGet, zRange, config, custom } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(7, $data = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(6, $yScale = value));
    	validate_store(zGet, 'zGet');
    	component_subscribe($$self, zGet, value => $$invalidate(9, $zGet = value));
    	validate_store(zRange, 'zRange');
    	component_subscribe($$self, zRange, value => $$invalidate(10, $zRange = value));
    	validate_store(config, 'config');
    	component_subscribe($$self, config, value => $$invalidate(8, $config = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(28, $custom = value));
    	const dispatch = createEventDispatcher();
    	let { hover = false } = $$props;
    	let { hovered = null } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let { highlighted = [] } = $$props;
    	let { overlayFill = false } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(5, $coords = value));
    	let idKey = $custom.idKey;
    	let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';
    	let colorSelect = $custom.colorSelect ? $custom.colorSelect : 'black';

    	let colorHighlight = $custom.colorHighlight
    	? $custom.colorHighlight
    	: 'black';

    	let lineWidth = $custom.lineWidth ? $custom.lineWidth : 2;
    	let markerWidth = $custom.markerWidth ? $custom.markerWidth : 2.5;

    	function doHover(e, d) {
    		if (hover) {
    			$$invalidate(0, hovered = d ? d[idKey] : null);
    			dispatch('hover', { id: hovered, data: d, event: e });
    		}
    	}

    	function doSelect(e, d) {
    		if (select) {
    			$$invalidate(1, selected = d ? d[idKey] : null);
    			dispatch('select', { id: selected, data: d, event: e });
    		}
    	}

    	const writable_props = ['hover', 'hovered', 'select', 'selected', 'highlighted', 'overlayFill'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Column> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = (i, j, e) => doHover(e, $data[i][j]);
    	const mouseleave_handler = e => doHover(e, null);
    	const focus_handler = (i, j, e) => doHover(e, $data[i][j]);
    	const blur_handler = e => doHover(e, null);
    	const click_handler = (i, j, e) => doSelect(e, $data[i][j]);

    	$$self.$$set = $$props => {
    		if ('hover' in $$props) $$invalidate(26, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(27, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('overlayFill' in $$props) $$invalidate(3, overlayFill = $$props.overlayFill);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		data,
    		yScale,
    		zGet,
    		zRange,
    		config,
    		custom,
    		dispatch,
    		hover,
    		hovered,
    		select,
    		selected,
    		highlighted,
    		overlayFill,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		lineWidth,
    		markerWidth,
    		doHover,
    		doSelect,
    		mode,
    		$custom,
    		$coords,
    		$yScale,
    		$data,
    		$config,
    		$zGet,
    		$zRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('hover' in $$props) $$invalidate(26, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(27, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(2, highlighted = $$props.highlighted);
    		if ('overlayFill' in $$props) $$invalidate(3, overlayFill = $$props.overlayFill);
    		if ('coords' in $$props) $$invalidate(17, coords = $$props.coords);
    		if ('idKey' in $$props) $$invalidate(18, idKey = $$props.idKey);
    		if ('colorHover' in $$props) $$invalidate(19, colorHover = $$props.colorHover);
    		if ('colorSelect' in $$props) $$invalidate(20, colorSelect = $$props.colorSelect);
    		if ('colorHighlight' in $$props) $$invalidate(21, colorHighlight = $$props.colorHighlight);
    		if ('lineWidth' in $$props) $$invalidate(22, lineWidth = $$props.lineWidth);
    		if ('markerWidth' in $$props) $$invalidate(23, markerWidth = $$props.markerWidth);
    		if ('mode' in $$props) $$invalidate(4, mode = $$props.mode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$custom*/ 268435456) {
    			$$invalidate(4, mode = $custom.mode ? $custom.mode : 'default');
    		}
    	};

    	return [
    		hovered,
    		selected,
    		highlighted,
    		overlayFill,
    		mode,
    		$coords,
    		$yScale,
    		$data,
    		$config,
    		$zGet,
    		$zRange,
    		data,
    		yScale,
    		zGet,
    		zRange,
    		config,
    		custom,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		lineWidth,
    		markerWidth,
    		doHover,
    		doSelect,
    		hover,
    		select,
    		$custom,
    		mouseover_handler,
    		mouseleave_handler,
    		focus_handler,
    		blur_handler,
    		click_handler
    	];
    }

    class Column extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$s,
    			create_fragment$s,
    			safe_not_equal,
    			{
    				hover: 26,
    				hovered: 0,
    				select: 27,
    				selected: 1,
    				highlighted: 2,
    				overlayFill: 3
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Column",
    			options,
    			id: create_fragment$s.name
    		});
    	}

    	get hover() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hovered() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get select() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set select(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlighted() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlighted(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlayFill() {
    		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlayFill(value) {
    		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/ColumnChart.svelte generated by Svelte v3.43.1 */

    const { console: console_1$3 } = globals;
    const file$o = "node_modules/@onsvisual/svelte-charts/src/charts/ColumnChart.svelte";
    const get_front_slot_changes$1 = dirty => ({});
    const get_front_slot_context$1 = ctx => ({});
    const get_svg_slot_changes$1 = dirty => ({});
    const get_svg_slot_context$1 = ctx => ({});
    const get_back_slot_changes$1 = dirty => ({});
    const get_back_slot_context$1 = ctx => ({});
    const get_options_slot_changes$1 = dirty => ({});
    const get_options_slot_context$1 = ctx => ({});

    // (99:0) {#if title}
    function create_if_block_5$4(ctx) {
    	let title_1;
    	let current;

    	title_1 = new Title({
    			props: {
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(title_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(title_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const title_1_changes = {};

    			if (dirty[0] & /*title*/ 8192 | dirty[1] & /*$$scope*/ 65536) {
    				title_1_changes.$$scope = { dirty, ctx };
    			}

    			title_1.$set(title_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(title_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(99:0) {#if title}",
    		ctx
    	});

    	return block;
    }

    // (100:2) <Title>
    function create_default_slot_3$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*title*/ ctx[13]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*title*/ 8192) set_data_dev(t, /*title*/ ctx[13]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(100:2) <Title>",
    		ctx
    	});

    	return block;
    }

    // (132:3) {#if width > 80}
    function create_if_block_2$7(ctx) {
    	let setcoords;
    	let t0;
    	let t1;
    	let svg;
    	let t2;
    	let current;
    	setcoords = new SetCoords({ $$inline: true });
    	const back_slot_template = /*#slots*/ ctx[44].back;
    	const back_slot = create_slot(back_slot_template, ctx, /*$$scope*/ ctx[47], get_back_slot_context$1);

    	svg = new Svg({
    			props: {
    				pointerEvents: /*interactive*/ ctx[19],
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const front_slot_template = /*#slots*/ ctx[44].front;
    	const front_slot = create_slot(front_slot_template, ctx, /*$$scope*/ ctx[47], get_front_slot_context$1);

    	const block = {
    		c: function create() {
    			create_component(setcoords.$$.fragment);
    			t0 = space();
    			if (back_slot) back_slot.c();
    			t1 = space();
    			create_component(svg.$$.fragment);
    			t2 = space();
    			if (front_slot) front_slot.c();
    		},
    		m: function mount(target, anchor) {
    			mount_component(setcoords, target, anchor);
    			insert_dev(target, t0, anchor);

    			if (back_slot) {
    				back_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			mount_component(svg, target, anchor);
    			insert_dev(target, t2, anchor);

    			if (front_slot) {
    				front_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (back_slot) {
    				if (back_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						back_slot,
    						back_slot_template,
    						ctx,
    						/*$$scope*/ ctx[47],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[47])
    						: get_slot_changes(back_slot_template, /*$$scope*/ ctx[47], dirty, get_back_slot_changes$1),
    						get_back_slot_context$1
    					);
    				}
    			}

    			const svg_changes = {};
    			if (dirty[0] & /*interactive*/ 524288) svg_changes.pointerEvents = /*interactive*/ ctx[19];

    			if (dirty[0] & /*select, selected, hover, hovered, highlighted, overlayFill, yTicks, yFormatTick, yPrefix, yAxis, xAxis*/ 728768000 | dirty[1] & /*$$scope*/ 65536) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);

    			if (front_slot) {
    				if (front_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						front_slot,
    						front_slot_template,
    						ctx,
    						/*$$scope*/ ctx[47],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[47])
    						: get_slot_changes(front_slot_template, /*$$scope*/ ctx[47], dirty, get_front_slot_changes$1),
    						get_front_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(setcoords.$$.fragment, local);
    			transition_in(back_slot, local);
    			transition_in(svg.$$.fragment, local);
    			transition_in(front_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(setcoords.$$.fragment, local);
    			transition_out(back_slot, local);
    			transition_out(svg.$$.fragment, local);
    			transition_out(front_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(setcoords, detaching);
    			if (detaching) detach_dev(t0);
    			if (back_slot) back_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(svg, detaching);
    			if (detaching) detach_dev(t2);
    			if (front_slot) front_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(132:3) {#if width > 80}",
    		ctx
    	});

    	return block;
    }

    // (136:6) {#if xAxis}
    function create_if_block_4$4(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(136:6) {#if xAxis}",
    		ctx
    	});

    	return block;
    }

    // (139:6) {#if yAxis}
    function create_if_block_3$5(ctx) {
    	let axisy;
    	let current;

    	axisy = new AxisY$2({
    			props: {
    				ticks: /*yTicks*/ ctx[12],
    				formatTick: /*yFormatTick*/ ctx[9],
    				prefix: /*yPrefix*/ ctx[20],
    				suffix: "%"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(axisy.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisy, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const axisy_changes = {};
    			if (dirty[0] & /*yTicks*/ 4096) axisy_changes.ticks = /*yTicks*/ ctx[12];
    			if (dirty[0] & /*yFormatTick*/ 512) axisy_changes.formatTick = /*yFormatTick*/ ctx[9];
    			if (dirty[0] & /*yPrefix*/ 1048576) axisy_changes.prefix = /*yPrefix*/ ctx[20];
    			axisy.$set(axisy_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisy.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisy.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisy, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(139:6) {#if yAxis}",
    		ctx
    	});

    	return block;
    }

    // (135:2) <Svg pointerEvents={interactive}>
    function create_default_slot_2$3(ctx) {
    	let t0;
    	let t1;
    	let column;
    	let t2;
    	let current;
    	let if_block0 = /*xAxis*/ ctx[10] && create_if_block_4$4(ctx);
    	let if_block1 = /*yAxis*/ ctx[11] && create_if_block_3$5(ctx);

    	column = new Column({
    			props: {
    				select: /*select*/ ctx[24],
    				selected: /*selected*/ ctx[25],
    				hover: /*hover*/ ctx[21],
    				hovered: /*hovered*/ ctx[22],
    				highlighted: /*highlighted*/ ctx[27],
    				overlayFill: /*overlayFill*/ ctx[29]
    			},
    			$$inline: true
    		});

    	column.$on("hover", /*hover_handler*/ ctx[45]);
    	column.$on("select", /*select_handler*/ ctx[46]);
    	const svg_slot_template = /*#slots*/ ctx[44].svg;
    	const svg_slot = create_slot(svg_slot_template, ctx, /*$$scope*/ ctx[47], get_svg_slot_context$1);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			create_component(column.$$.fragment);
    			t2 = space();
    			if (svg_slot) svg_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(column, target, anchor);
    			insert_dev(target, t2, anchor);

    			if (svg_slot) {
    				svg_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*xAxis*/ ctx[10]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_4$4(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*yAxis*/ ctx[11]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*yAxis*/ 2048) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const column_changes = {};
    			if (dirty[0] & /*select*/ 16777216) column_changes.select = /*select*/ ctx[24];
    			if (dirty[0] & /*selected*/ 33554432) column_changes.selected = /*selected*/ ctx[25];
    			if (dirty[0] & /*hover*/ 2097152) column_changes.hover = /*hover*/ ctx[21];
    			if (dirty[0] & /*hovered*/ 4194304) column_changes.hovered = /*hovered*/ ctx[22];
    			if (dirty[0] & /*highlighted*/ 134217728) column_changes.highlighted = /*highlighted*/ ctx[27];
    			if (dirty[0] & /*overlayFill*/ 536870912) column_changes.overlayFill = /*overlayFill*/ ctx[29];
    			column.$set(column_changes);

    			if (svg_slot) {
    				if (svg_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						svg_slot,
    						svg_slot_template,
    						ctx,
    						/*$$scope*/ ctx[47],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[47])
    						: get_slot_changes(svg_slot_template, /*$$scope*/ ctx[47], dirty, get_svg_slot_changes$1),
    						get_svg_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(column.$$.fragment, local);
    			transition_in(svg_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(column.$$.fragment, local);
    			transition_out(svg_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(column, detaching);
    			if (detaching) detach_dev(t2);
    			if (svg_slot) svg_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(135:2) <Svg pointerEvents={interactive}>",
    		ctx
    	});

    	return block;
    }

    // (104:1) <LayerCake   {padding}   x={xKey}   y={yKey}   z={zKey}   {xDomain}   yDomain={$yDomain}   {zDomain}   xScale={scaleBand()}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}   zScale={scaleOrdinal()}   zRange={colors}   data={groupedData}   flatData={data}   custom={{    type: 'column',    mode,    idKey,       coords,    markerWidth,    colorSelect,    colorHover,    colorHighlight,       animation,       duration     }}   let:width  >
    function create_default_slot_1$4(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*width*/ ctx[54] > 80 && create_if_block_2$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*width*/ ctx[54] > 80) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[1] & /*width*/ 8388608) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(104:1) <LayerCake   {padding}   x={xKey}   y={yKey}   z={zKey}   {xDomain}   yDomain={$yDomain}   {zDomain}   xScale={scaleBand()}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}   zScale={scaleOrdinal()}   zRange={colors}   data={groupedData}   flatData={data}   custom={{    type: 'column',    mode,    idKey,       coords,    markerWidth,    colorSelect,    colorHover,    colorHighlight,       animation,       duration     }}   let:width  >",
    		ctx
    	});

    	return block;
    }

    // (149:0) {#if legend && zDomain}
    function create_if_block_1$a(ctx) {
    	let legend_1;
    	let current;

    	legend_1 = new Legend$2({
    			props: {
    				domain: /*zDomain*/ ctx[30],
    				colors: /*colors*/ ctx[17],
    				markerWidth: /*markerWidth*/ ctx[18],
    				line: /*mode*/ ctx[34] == 'barcode',
    				comparison: /*mode*/ ctx[34] == 'comparison'
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(legend_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(legend_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const legend_1_changes = {};
    			if (dirty[0] & /*zDomain*/ 1073741824) legend_1_changes.domain = /*zDomain*/ ctx[30];
    			if (dirty[0] & /*colors*/ 131072) legend_1_changes.colors = /*colors*/ ctx[17];
    			if (dirty[0] & /*markerWidth*/ 262144) legend_1_changes.markerWidth = /*markerWidth*/ ctx[18];
    			legend_1.$set(legend_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(legend_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(legend_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(legend_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(149:0) {#if legend && zDomain}",
    		ctx
    	});

    	return block;
    }

    // (152:0) {#if footer}
    function create_if_block$d(ctx) {
    	let footer_1;
    	let current;

    	footer_1 = new Footer({
    			props: {
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(footer_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(footer_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const footer_1_changes = {};

    			if (dirty[0] & /*footer*/ 16384 | dirty[1] & /*$$scope*/ 65536) {
    				footer_1_changes.$$scope = { dirty, ctx };
    			}

    			footer_1.$set(footer_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(footer_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(152:0) {#if footer}",
    		ctx
    	});

    	return block;
    }

    // (153:2) <Footer>
    function create_default_slot$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*footer*/ ctx[14]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*footer*/ 16384) set_data_dev(t, /*footer*/ ctx[14]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(153:2) <Footer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let t0;
    	let t1;
    	let div;
    	let layercake;
    	let t2;
    	let t3;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*title*/ ctx[13] && create_if_block_5$4(ctx);
    	const options_slot_template = /*#slots*/ ctx[44].options;
    	const options_slot = create_slot(options_slot_template, ctx, /*$$scope*/ ctx[47], get_options_slot_context$1);

    	layercake = new LayerCake({
    			props: {
    				padding: /*padding*/ ctx[16],
    				x: /*xKey*/ ctx[4],
    				y: /*yKey*/ ctx[5],
    				z: /*zKey*/ ctx[6],
    				xDomain: /*xDomain*/ ctx[32],
    				yDomain: /*$yDomain*/ ctx[33],
    				zDomain: /*zDomain*/ ctx[30],
    				xScale: band(),
    				yScale: /*yScale*/ ctx[8] == 'log'
    				? symlog()
    				: linear(),
    				zScale: ordinal(),
    				zRange: /*colors*/ ctx[17],
    				data: /*groupedData*/ ctx[31],
    				flatData: /*data*/ ctx[0],
    				custom: {
    					type: 'column',
    					mode: /*mode*/ ctx[34],
    					idKey: /*idKey*/ ctx[7],
    					coords: /*coords*/ ctx[35],
    					markerWidth: /*markerWidth*/ ctx[18],
    					colorSelect: /*colorSelect*/ ctx[26],
    					colorHover: /*colorHover*/ ctx[23],
    					colorHighlight: /*colorHighlight*/ ctx[28],
    					animation: /*animation*/ ctx[2],
    					duration: /*duration*/ ctx[3]
    				},
    				$$slots: {
    					default: [
    						create_default_slot_1$4,
    						({ width }) => ({ 54: width }),
    						({ width }) => [0, width ? 8388608 : 0]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block1 = /*legend*/ ctx[15] && /*zDomain*/ ctx[30] && create_if_block_1$a(ctx);
    	let if_block2 = /*footer*/ ctx[14] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (options_slot) options_slot.c();
    			t1 = space();
    			div = element("div");
    			create_component(layercake.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(div, "class", "chart-container svelte-1dnlmiu");

    			set_style(div, "height", typeof /*height*/ ctx[1] == 'number'
    			? /*height*/ ctx[1] + 'px'
    			: /*height*/ ctx[1]);

    			add_location(div, file$o, 102, 0, 3462);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);

    			if (options_slot) {
    				options_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(layercake, div, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*title*/ ctx[13]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*title*/ 8192) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (options_slot) {
    				if (options_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						options_slot,
    						options_slot_template,
    						ctx,
    						/*$$scope*/ ctx[47],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[47])
    						: get_slot_changes(options_slot_template, /*$$scope*/ ctx[47], dirty, get_options_slot_changes$1),
    						get_options_slot_context$1
    					);
    				}
    			}

    			const layercake_changes = {};
    			if (dirty[0] & /*padding*/ 65536) layercake_changes.padding = /*padding*/ ctx[16];
    			if (dirty[0] & /*xKey*/ 16) layercake_changes.x = /*xKey*/ ctx[4];
    			if (dirty[0] & /*yKey*/ 32) layercake_changes.y = /*yKey*/ ctx[5];
    			if (dirty[0] & /*zKey*/ 64) layercake_changes.z = /*zKey*/ ctx[6];
    			if (dirty[1] & /*xDomain*/ 2) layercake_changes.xDomain = /*xDomain*/ ctx[32];
    			if (dirty[1] & /*$yDomain*/ 4) layercake_changes.yDomain = /*$yDomain*/ ctx[33];
    			if (dirty[0] & /*zDomain*/ 1073741824) layercake_changes.zDomain = /*zDomain*/ ctx[30];

    			if (dirty[0] & /*yScale*/ 256) layercake_changes.yScale = /*yScale*/ ctx[8] == 'log'
    			? symlog()
    			: linear();

    			if (dirty[0] & /*colors*/ 131072) layercake_changes.zRange = /*colors*/ ctx[17];
    			if (dirty[1] & /*groupedData*/ 1) layercake_changes.data = /*groupedData*/ ctx[31];
    			if (dirty[0] & /*data*/ 1) layercake_changes.flatData = /*data*/ ctx[0];

    			if (dirty[0] & /*idKey, markerWidth, colorSelect, colorHover, colorHighlight, animation, duration*/ 344195212) layercake_changes.custom = {
    				type: 'column',
    				mode: /*mode*/ ctx[34],
    				idKey: /*idKey*/ ctx[7],
    				coords: /*coords*/ ctx[35],
    				markerWidth: /*markerWidth*/ ctx[18],
    				colorSelect: /*colorSelect*/ ctx[26],
    				colorHover: /*colorHover*/ ctx[23],
    				colorHighlight: /*colorHighlight*/ ctx[28],
    				animation: /*animation*/ ctx[2],
    				duration: /*duration*/ ctx[3]
    			};

    			if (dirty[0] & /*interactive, select, selected, hover, hovered, highlighted, overlayFill, yTicks, yFormatTick, yPrefix, yAxis, xAxis*/ 729292288 | dirty[1] & /*$$scope, width*/ 8454144) {
    				layercake_changes.$$scope = { dirty, ctx };
    			}

    			layercake.$set(layercake_changes);

    			if (!current || dirty[0] & /*height*/ 2) {
    				set_style(div, "height", typeof /*height*/ ctx[1] == 'number'
    				? /*height*/ ctx[1] + 'px'
    				: /*height*/ ctx[1]);
    			}

    			if (/*legend*/ ctx[15] && /*zDomain*/ ctx[30]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*legend, zDomain*/ 1073774592) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$a(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*footer*/ ctx[14]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*footer*/ 16384) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$d(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(options_slot, local);
    			transition_in(layercake.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(options_slot, local);
    			transition_out(layercake.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (options_slot) options_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(layercake);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let xDomain;
    	let zDomain;
    	let groupedData;
    	let $yDomain;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ColumnChart', slots, ['options','back','svg','front']);
    	let { data } = $$props;
    	let { height = 250 } = $$props;
    	let { animation = true } = $$props;
    	let { duration = 800 } = $$props;
    	let { xKey = 'x' } = $$props;
    	let { yKey = 'y' } = $$props;
    	let { zKey = null } = $$props;
    	let { idKey = xKey } = $$props;
    	let { yScale = 'linear' } = $$props;
    	let { yFormatTick = d => d } = $$props;
    	let { yMax = null } = $$props;
    	let { yMin = 0 } = $$props;
    	let { xAxis = true } = $$props;
    	let { yAxis = true } = $$props;
    	let { yTicks = 4 } = $$props;
    	let { title = null } = $$props;
    	let { footer = null } = $$props;
    	let { legend = false } = $$props;
    	let mode = 'grouped'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'
    	let { padding = { top: 0, bottom: 20, left: 35, right: 0 } } = $$props;
    	let { color = null } = $$props;

    	let { colors = color
    	? [color]
    	: [
    			'#206095',
    			'#27A0CC',
    			'#A8BD3A',
    			'#003C57',
    			'#118C7B',
    			'#F66068',
    			'#746CB1',
    			'#22D0B6',
    			'lightgrey'
    		] } = $$props;

    	let { markerWidth = 2.5 } = $$props;
    	let { spacing = 0.05 } = $$props; // proportion of bar width (1 = 100%)
    	let { interactive = true } = $$props;
    	let { xPrefix = "" } = $$props;
    	let { xSuffix = "" } = $$props;
    	let { yPrefix = "" } = $$props;
    	let { ySuffix = "" } = $$props;
    	let { hover = false } = $$props;
    	let { hovered = null } = $$props;
    	let { colorHover = 'orange' } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let { colorSelect = 'black' } = $$props;
    	let { highlighted = [] } = $$props;
    	let { colorHighlight = 'black' } = $$props;
    	let { overlayFill = false } = $$props;
    	const tweenOptions = { duration, easing: cubicInOut };
    	const coords = tweened(undefined, tweenOptions);
    	const distinct = (d, i, arr) => arr.indexOf(d) == i;

    	function getTotals(data, keys) {
    		let arr = [];

    		keys.forEach(key => {
    			let vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);
    			let sum = vals.reduce((a, b) => a + b, 0);
    			arr.push(sum);
    		});

    		return arr;
    	}

    	// Functions to animate yDomain
    	const yDomSet = (data, mode, yKey, yMax) => yMax
    	? [yMin, yMax]
    	: mode == 'stacked' && yKey
    		? [
    				yMin,
    				Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))
    			]
    		: [yMin, Math.max(...data.map(d => d[yKey]))];

    	function yDomUpdate(data, mode, yKey, yMax) {
    		let newYDom = yDomSet(data, mode, yKey, yMax);

    		if (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {
    			yDomain.set(newYDom, { duration: animation ? duration : 0 });
    			yDom = newYDom;
    		}
    	}

    	let yDom = yDomSet(data, mode, yKey, yMax);
    	const yDomain = tweened(yDom, tweenOptions);
    	validate_store(yDomain, 'yDomain');
    	component_subscribe($$self, yDomain, value => $$invalidate(33, $yDomain = value));

    	const writable_props = [
    		'data',
    		'height',
    		'animation',
    		'duration',
    		'xKey',
    		'yKey',
    		'zKey',
    		'idKey',
    		'yScale',
    		'yFormatTick',
    		'yMax',
    		'yMin',
    		'xAxis',
    		'yAxis',
    		'yTicks',
    		'title',
    		'footer',
    		'legend',
    		'padding',
    		'color',
    		'colors',
    		'markerWidth',
    		'spacing',
    		'interactive',
    		'xPrefix',
    		'xSuffix',
    		'yPrefix',
    		'ySuffix',
    		'hover',
    		'hovered',
    		'colorHover',
    		'select',
    		'selected',
    		'colorSelect',
    		'highlighted',
    		'colorHighlight',
    		'overlayFill'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<ColumnChart> was created with unknown prop '${key}'`);
    	});

    	function hover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function select_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(3, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(4, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(5, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(6, zKey = $$props.zKey);
    		if ('idKey' in $$props) $$invalidate(7, idKey = $$props.idKey);
    		if ('yScale' in $$props) $$invalidate(8, yScale = $$props.yScale);
    		if ('yFormatTick' in $$props) $$invalidate(9, yFormatTick = $$props.yFormatTick);
    		if ('yMax' in $$props) $$invalidate(37, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(38, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(10, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(11, yAxis = $$props.yAxis);
    		if ('yTicks' in $$props) $$invalidate(12, yTicks = $$props.yTicks);
    		if ('title' in $$props) $$invalidate(13, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(14, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(15, legend = $$props.legend);
    		if ('padding' in $$props) $$invalidate(16, padding = $$props.padding);
    		if ('color' in $$props) $$invalidate(39, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(17, colors = $$props.colors);
    		if ('markerWidth' in $$props) $$invalidate(18, markerWidth = $$props.markerWidth);
    		if ('spacing' in $$props) $$invalidate(40, spacing = $$props.spacing);
    		if ('interactive' in $$props) $$invalidate(19, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(41, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(42, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(20, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(43, ySuffix = $$props.ySuffix);
    		if ('hover' in $$props) $$invalidate(21, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(22, hovered = $$props.hovered);
    		if ('colorHover' in $$props) $$invalidate(23, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(24, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(25, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(26, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(27, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(28, colorHighlight = $$props.colorHighlight);
    		if ('overlayFill' in $$props) $$invalidate(29, overlayFill = $$props.overlayFill);
    		if ('$$scope' in $$props) $$invalidate(47, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		LayerCake,
    		Svg,
    		scaleBand: band,
    		scaleOrdinal: ordinal,
    		scaleLinear: linear,
    		scaleSymlog: symlog,
    		tweened,
    		cubicInOut,
    		groupData,
    		stackData,
    		SetCoords,
    		Column,
    		AxisX: AxisX$2,
    		AxisY: AxisY$2,
    		Legend: Legend$2,
    		Title,
    		Footer,
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		idKey,
    		yScale,
    		yFormatTick,
    		yMax,
    		yMin,
    		xAxis,
    		yAxis,
    		yTicks,
    		title,
    		footer,
    		legend,
    		mode,
    		padding,
    		color,
    		colors,
    		markerWidth,
    		spacing,
    		interactive,
    		xPrefix,
    		xSuffix,
    		yPrefix,
    		ySuffix,
    		hover,
    		hovered,
    		colorHover,
    		select,
    		selected,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		overlayFill,
    		tweenOptions,
    		coords,
    		distinct,
    		getTotals,
    		yDomSet,
    		yDomUpdate,
    		yDom,
    		yDomain,
    		zDomain,
    		groupedData,
    		xDomain,
    		$yDomain
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(2, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(3, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(4, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(5, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(6, zKey = $$props.zKey);
    		if ('idKey' in $$props) $$invalidate(7, idKey = $$props.idKey);
    		if ('yScale' in $$props) $$invalidate(8, yScale = $$props.yScale);
    		if ('yFormatTick' in $$props) $$invalidate(9, yFormatTick = $$props.yFormatTick);
    		if ('yMax' in $$props) $$invalidate(37, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(38, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(10, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(11, yAxis = $$props.yAxis);
    		if ('yTicks' in $$props) $$invalidate(12, yTicks = $$props.yTicks);
    		if ('title' in $$props) $$invalidate(13, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(14, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(15, legend = $$props.legend);
    		if ('mode' in $$props) $$invalidate(34, mode = $$props.mode);
    		if ('padding' in $$props) $$invalidate(16, padding = $$props.padding);
    		if ('color' in $$props) $$invalidate(39, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(17, colors = $$props.colors);
    		if ('markerWidth' in $$props) $$invalidate(18, markerWidth = $$props.markerWidth);
    		if ('spacing' in $$props) $$invalidate(40, spacing = $$props.spacing);
    		if ('interactive' in $$props) $$invalidate(19, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(41, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(42, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(20, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(43, ySuffix = $$props.ySuffix);
    		if ('hover' in $$props) $$invalidate(21, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(22, hovered = $$props.hovered);
    		if ('colorHover' in $$props) $$invalidate(23, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(24, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(25, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(26, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(27, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(28, colorHighlight = $$props.colorHighlight);
    		if ('overlayFill' in $$props) $$invalidate(29, overlayFill = $$props.overlayFill);
    		if ('yDom' in $$props) yDom = $$props.yDom;
    		if ('zDomain' in $$props) $$invalidate(30, zDomain = $$props.zDomain);
    		if ('groupedData' in $$props) $$invalidate(31, groupedData = $$props.groupedData);
    		if ('xDomain' in $$props) $$invalidate(32, xDomain = $$props.xDomain);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*data, yKey*/ 33 | $$self.$$.dirty[1] & /*yMax*/ 64) {
    			yDomUpdate(data, mode, yKey, yMax);
    		}

    		if ($$self.$$.dirty[0] & /*data, xKey*/ 17) {
    			// Functions to update xDomain & zDomain
    			$$invalidate(32, xDomain = data.map(d => d[xKey]).filter(distinct));
    		}

    		if ($$self.$$.dirty[0] & /*zKey, data*/ 65) {
    			$$invalidate(30, zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null);
    		}

    		if ($$self.$$.dirty[0] & /*data, zDomain, yKey, zKey*/ 1073741921) {
    			// Create a data series for each zKey (group)
    			$$invalidate(31, groupedData = mode == 'stacked'
    			? stackData(data, zDomain, yKey, zKey)
    			: groupData(data, zDomain, zKey));
    		}

    		if ($$self.$$.dirty[0] & /*data*/ 1) {
    			console.log('data2', data);
    		}
    	};

    	return [
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		idKey,
    		yScale,
    		yFormatTick,
    		xAxis,
    		yAxis,
    		yTicks,
    		title,
    		footer,
    		legend,
    		padding,
    		colors,
    		markerWidth,
    		interactive,
    		yPrefix,
    		hover,
    		hovered,
    		colorHover,
    		select,
    		selected,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		overlayFill,
    		zDomain,
    		groupedData,
    		xDomain,
    		$yDomain,
    		mode,
    		coords,
    		yDomain,
    		yMax,
    		yMin,
    		color,
    		spacing,
    		xPrefix,
    		xSuffix,
    		ySuffix,
    		slots,
    		hover_handler,
    		select_handler,
    		$$scope
    	];
    }

    class ColumnChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$r,
    			create_fragment$r,
    			safe_not_equal,
    			{
    				data: 0,
    				height: 1,
    				animation: 2,
    				duration: 3,
    				xKey: 4,
    				yKey: 5,
    				zKey: 6,
    				idKey: 7,
    				yScale: 8,
    				yFormatTick: 9,
    				yMax: 37,
    				yMin: 38,
    				xAxis: 10,
    				yAxis: 11,
    				yTicks: 12,
    				title: 13,
    				footer: 14,
    				legend: 15,
    				padding: 16,
    				color: 39,
    				colors: 17,
    				markerWidth: 18,
    				spacing: 40,
    				interactive: 19,
    				xPrefix: 41,
    				xSuffix: 42,
    				yPrefix: 20,
    				ySuffix: 43,
    				hover: 21,
    				hovered: 22,
    				colorHover: 23,
    				select: 24,
    				selected: 25,
    				colorSelect: 26,
    				highlighted: 27,
    				colorHighlight: 28,
    				overlayFill: 29
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColumnChart",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !('data' in props)) {
    			console_1$3.warn("<ColumnChart> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		return this.$$.ctx[0];
    	}

    	set data(data) {
    		this.$$set({ data });
    		flush();
    	}

    	get height() {
    		return this.$$.ctx[1];
    	}

    	set height(height) {
    		this.$$set({ height });
    		flush();
    	}

    	get animation() {
    		return this.$$.ctx[2];
    	}

    	set animation(animation) {
    		this.$$set({ animation });
    		flush();
    	}

    	get duration() {
    		return this.$$.ctx[3];
    	}

    	set duration(duration) {
    		this.$$set({ duration });
    		flush();
    	}

    	get xKey() {
    		return this.$$.ctx[4];
    	}

    	set xKey(xKey) {
    		this.$$set({ xKey });
    		flush();
    	}

    	get yKey() {
    		return this.$$.ctx[5];
    	}

    	set yKey(yKey) {
    		this.$$set({ yKey });
    		flush();
    	}

    	get zKey() {
    		return this.$$.ctx[6];
    	}

    	set zKey(zKey) {
    		this.$$set({ zKey });
    		flush();
    	}

    	get idKey() {
    		return this.$$.ctx[7];
    	}

    	set idKey(idKey) {
    		this.$$set({ idKey });
    		flush();
    	}

    	get yScale() {
    		return this.$$.ctx[8];
    	}

    	set yScale(yScale) {
    		this.$$set({ yScale });
    		flush();
    	}

    	get yFormatTick() {
    		return this.$$.ctx[9];
    	}

    	set yFormatTick(yFormatTick) {
    		this.$$set({ yFormatTick });
    		flush();
    	}

    	get yMax() {
    		return this.$$.ctx[37];
    	}

    	set yMax(yMax) {
    		this.$$set({ yMax });
    		flush();
    	}

    	get yMin() {
    		return this.$$.ctx[38];
    	}

    	set yMin(yMin) {
    		this.$$set({ yMin });
    		flush();
    	}

    	get xAxis() {
    		return this.$$.ctx[10];
    	}

    	set xAxis(xAxis) {
    		this.$$set({ xAxis });
    		flush();
    	}

    	get yAxis() {
    		return this.$$.ctx[11];
    	}

    	set yAxis(yAxis) {
    		this.$$set({ yAxis });
    		flush();
    	}

    	get yTicks() {
    		return this.$$.ctx[12];
    	}

    	set yTicks(yTicks) {
    		this.$$set({ yTicks });
    		flush();
    	}

    	get title() {
    		return this.$$.ctx[13];
    	}

    	set title(title) {
    		this.$$set({ title });
    		flush();
    	}

    	get footer() {
    		return this.$$.ctx[14];
    	}

    	set footer(footer) {
    		this.$$set({ footer });
    		flush();
    	}

    	get legend() {
    		return this.$$.ctx[15];
    	}

    	set legend(legend) {
    		this.$$set({ legend });
    		flush();
    	}

    	get padding() {
    		return this.$$.ctx[16];
    	}

    	set padding(padding) {
    		this.$$set({ padding });
    		flush();
    	}

    	get color() {
    		return this.$$.ctx[39];
    	}

    	set color(color) {
    		this.$$set({ color });
    		flush();
    	}

    	get colors() {
    		return this.$$.ctx[17];
    	}

    	set colors(colors) {
    		this.$$set({ colors });
    		flush();
    	}

    	get markerWidth() {
    		return this.$$.ctx[18];
    	}

    	set markerWidth(markerWidth) {
    		this.$$set({ markerWidth });
    		flush();
    	}

    	get spacing() {
    		return this.$$.ctx[40];
    	}

    	set spacing(spacing) {
    		this.$$set({ spacing });
    		flush();
    	}

    	get interactive() {
    		return this.$$.ctx[19];
    	}

    	set interactive(interactive) {
    		this.$$set({ interactive });
    		flush();
    	}

    	get xPrefix() {
    		return this.$$.ctx[41];
    	}

    	set xPrefix(xPrefix) {
    		this.$$set({ xPrefix });
    		flush();
    	}

    	get xSuffix() {
    		return this.$$.ctx[42];
    	}

    	set xSuffix(xSuffix) {
    		this.$$set({ xSuffix });
    		flush();
    	}

    	get yPrefix() {
    		return this.$$.ctx[20];
    	}

    	set yPrefix(yPrefix) {
    		this.$$set({ yPrefix });
    		flush();
    	}

    	get ySuffix() {
    		return this.$$.ctx[43];
    	}

    	set ySuffix(ySuffix) {
    		this.$$set({ ySuffix });
    		flush();
    	}

    	get hover() {
    		return this.$$.ctx[21];
    	}

    	set hover(hover) {
    		this.$$set({ hover });
    		flush();
    	}

    	get hovered() {
    		return this.$$.ctx[22];
    	}

    	set hovered(hovered) {
    		this.$$set({ hovered });
    		flush();
    	}

    	get colorHover() {
    		return this.$$.ctx[23];
    	}

    	set colorHover(colorHover) {
    		this.$$set({ colorHover });
    		flush();
    	}

    	get select() {
    		return this.$$.ctx[24];
    	}

    	set select(select) {
    		this.$$set({ select });
    		flush();
    	}

    	get selected() {
    		return this.$$.ctx[25];
    	}

    	set selected(selected) {
    		this.$$set({ selected });
    		flush();
    	}

    	get colorSelect() {
    		return this.$$.ctx[26];
    	}

    	set colorSelect(colorSelect) {
    		this.$$set({ colorSelect });
    		flush();
    	}

    	get highlighted() {
    		return this.$$.ctx[27];
    	}

    	set highlighted(highlighted) {
    		this.$$set({ highlighted });
    		flush();
    	}

    	get colorHighlight() {
    		return this.$$.ctx[28];
    	}

    	set colorHighlight(colorHighlight) {
    		this.$$set({ colorHighlight });
    		flush();
    	}

    	get overlayFill() {
    		return this.$$.ctx[29];
    	}

    	set overlayFill(overlayFill) {
    		this.$$set({ overlayFill });
    		flush();
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Scatter.svg.svelte generated by Svelte v3.43.1 */
    const file$n = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Scatter.svg.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	child_ctx[28] = i;
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	child_ctx[28] = i;
    	return child_ctx;
    }

    // (17:0) {#if $coords.length == $data.length}
    function create_if_block$c(ctx) {
    	let g;
    	let each_1_anchor;
    	let each_value_1 = /*$coords*/ ctx[5];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let if_block = /*idKey*/ ctx[20] && (/*hovered*/ ctx[0] || /*selected*/ ctx[2] || /*highlighted*/ ctx[3][0]) && create_if_block_1$9(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			if (if_block) if_block.c();
    			attr_dev(g, "class", "scatter-group");
    			add_location(g, file$n, 18, 0, 672);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			append_dev(g, each_1_anchor);
    			if (if_block) if_block.m(g, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords, $yScale, $z, $zGet, $data, $zRange*/ 4064) {
    				each_value_1 = /*$coords*/ ctx[5];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*idKey*/ ctx[20] && (/*hovered*/ ctx[0] || /*selected*/ ctx[2] || /*highlighted*/ ctx[3][0])) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$9(ctx);
    					if_block.c();
    					if_block.m(g, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(17:0) {#if $coords.length == $data.length}",
    		ctx
    	});

    	return block;
    }

    // (21:1) {#each $coords as d, i}
    function create_each_block_1$4(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let circle_r_value;
    	let circle_fill_value;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "");
    			attr_dev(circle, "cx", circle_cx_value = /*$xScale*/ ctx[7](/*d*/ ctx[26].x));
    			attr_dev(circle, "cy", circle_cy_value = /*$yScale*/ ctx[8](/*d*/ ctx[26].y));
    			attr_dev(circle, "r", circle_r_value = /*d*/ ctx[26].r);

    			attr_dev(circle, "fill", circle_fill_value = /*$z*/ ctx[9]
    			? /*$zGet*/ ctx[10](/*$data*/ ctx[6][/*i*/ ctx[28]])
    			: /*$zRange*/ ctx[11][0]);

    			add_location(circle, file$n, 21, 2, 726);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords*/ 160 && circle_cx_value !== (circle_cx_value = /*$xScale*/ ctx[7](/*d*/ ctx[26].x))) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 288 && circle_cy_value !== (circle_cy_value = /*$yScale*/ ctx[8](/*d*/ ctx[26].y))) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*$coords*/ 32 && circle_r_value !== (circle_r_value = /*d*/ ctx[26].r)) {
    				attr_dev(circle, "r", circle_r_value);
    			}

    			if (dirty & /*$z, $zGet, $data, $zRange*/ 3648 && circle_fill_value !== (circle_fill_value = /*$z*/ ctx[9]
    			? /*$zGet*/ ctx[10](/*$data*/ ctx[6][/*i*/ ctx[28]])
    			: /*$zRange*/ ctx[11][0])) {
    				attr_dev(circle, "fill", circle_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(21:1) {#each $coords as d, i}",
    		ctx
    	});

    	return block;
    }

    // (31:1) {#if idKey && (hovered || selected || highlighted[0])}
    function create_if_block_1$9(ctx) {
    	let each_1_anchor;
    	let each_value = /*$coords*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords, $yScale, overlayFill, $data, idKey, selected, colorSelect, highlighted, colorHighlight, hovered, colorHover, lineWidth, placeLabel*/ 32506367) {
    				each_value = /*$coords*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(31:1) {#if idKey && (hovered || selected || highlighted[0])}",
    		ctx
    	});

    	return block;
    }

    // (33:3) {#if [hovered, selected, ...highlighted].includes($data[i][idKey])}
    function create_if_block_2$6(ctx) {
    	let if_block_anchor;
    	let if_block = /*placeLabel*/ ctx[1] == /*$data*/ ctx[6][/*i*/ ctx[28]]['unique'] && create_if_block_3$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*placeLabel*/ ctx[1] == /*$data*/ ctx[6][/*i*/ ctx[28]]['unique']) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(33:3) {#if [hovered, selected, ...highlighted].includes($data[i][idKey])}",
    		ctx
    	});

    	return block;
    }

    // (34:3) {#if placeLabel == $data[i]['unique']}
    function create_if_block_3$4(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let circle_r_value;
    	let circle_fill_value;
    	let circle_stroke_value;
    	let circle_stroke_width_value;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "");
    			attr_dev(circle, "cx", circle_cx_value = /*$xScale*/ ctx[7](/*d*/ ctx[26].x));
    			attr_dev(circle, "cy", circle_cy_value = /*$yScale*/ ctx[8](/*d*/ ctx[26].y));
    			attr_dev(circle, "r", circle_r_value = /*d*/ ctx[26].r);

    			attr_dev(circle, "fill", circle_fill_value = /*overlayFill*/ ctx[4] && /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2]
    			? /*colorSelect*/ ctx[22]
    			: /*overlayFill*/ ctx[4] & /*highlighted*/ ctx[3].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]])
    				? /*colorHighlight*/ ctx[23]
    				: 'none');

    			attr_dev(circle, "stroke", circle_stroke_value = /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[21]
    			: /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2]
    				? /*colorSelect*/ ctx[22]
    				: /*colorHighlight*/ ctx[23]);

    			attr_dev(circle, "stroke-width", circle_stroke_width_value = /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*hovered*/ ctx[0] || /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2] || /*highlighted*/ ctx[3].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]])
    			? /*lineWidth*/ ctx[24]
    			: 0);

    			add_location(circle, file$n, 34, 3, 1058);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $coords*/ 160 && circle_cx_value !== (circle_cx_value = /*$xScale*/ ctx[7](/*d*/ ctx[26].x))) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*$yScale, $coords*/ 288 && circle_cy_value !== (circle_cy_value = /*$yScale*/ ctx[8](/*d*/ ctx[26].y))) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*$coords*/ 32 && circle_r_value !== (circle_r_value = /*d*/ ctx[26].r)) {
    				attr_dev(circle, "r", circle_r_value);
    			}

    			if (dirty & /*overlayFill, $data, selected, highlighted*/ 92 && circle_fill_value !== (circle_fill_value = /*overlayFill*/ ctx[4] && /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2]
    			? /*colorSelect*/ ctx[22]
    			: /*overlayFill*/ ctx[4] & /*highlighted*/ ctx[3].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]])
    				? /*colorHighlight*/ ctx[23]
    				: 'none')) {
    				attr_dev(circle, "fill", circle_fill_value);
    			}

    			if (dirty & /*$data, hovered, selected*/ 69 && circle_stroke_value !== (circle_stroke_value = /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*hovered*/ ctx[0]
    			? /*colorHover*/ ctx[21]
    			: /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2]
    				? /*colorSelect*/ ctx[22]
    				: /*colorHighlight*/ ctx[23])) {
    				attr_dev(circle, "stroke", circle_stroke_value);
    			}

    			if (dirty & /*$data, hovered, selected, highlighted*/ 77 && circle_stroke_width_value !== (circle_stroke_width_value = /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*hovered*/ ctx[0] || /*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]] == /*selected*/ ctx[2] || /*highlighted*/ ctx[3].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]])
    			? /*lineWidth*/ ctx[24]
    			: 0)) {
    				attr_dev(circle, "stroke-width", circle_stroke_width_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(34:3) {#if placeLabel == $data[i]['unique']}",
    		ctx
    	});

    	return block;
    }

    // (32:2) {#each $coords as d, i}
    function create_each_block$d(ctx) {
    	let show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2], .../*highlighted*/ ctx[3]].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_2$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hovered, selected, highlighted, $data*/ 77) show_if = [/*hovered*/ ctx[0], /*selected*/ ctx[2], .../*highlighted*/ ctx[3]].includes(/*$data*/ ctx[6][/*i*/ ctx[28]][/*idKey*/ ctx[20]]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(32:2) {#each $coords as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[5].length == /*$data*/ ctx[6].length && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$coords*/ ctx[5].length == /*$data*/ ctx[6].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $custom;
    	let $coords;
    	let $data;
    	let $xScale;
    	let $yScale;
    	let $z;
    	let $zGet;
    	let $zRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Scatter_svg', slots, []);
    	const { data, z, xScale, yScale, zGet, zRange, custom } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(6, $data = value));
    	validate_store(z, 'z');
    	component_subscribe($$self, z, value => $$invalidate(9, $z = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(7, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(8, $yScale = value));
    	validate_store(zGet, 'zGet');
    	component_subscribe($$self, zGet, value => $$invalidate(10, $zGet = value));
    	validate_store(zRange, 'zRange');
    	component_subscribe($$self, zRange, value => $$invalidate(11, $zRange = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(25, $custom = value));
    	let { hovered = null } = $$props;
    	let { placeLabel = null } = $$props;
    	let { selected = null } = $$props;
    	let { highlighted = [] } = $$props;
    	let { overlayFill = false } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(5, $coords = value));
    	let idKey = $custom.idKey;
    	let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';
    	let colorSelect = $custom.colorSelect ? $custom.colorSelect : 'black';

    	let colorHighlight = $custom.colorHighlight
    	? $custom.colorHighlight
    	: 'black';

    	let lineWidth = $custom.lineWidth ? $custom.lineWidth : 2;
    	const writable_props = ['hovered', 'placeLabel', 'selected', 'highlighted', 'overlayFill'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Scatter_svg> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('placeLabel' in $$props) $$invalidate(1, placeLabel = $$props.placeLabel);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(3, highlighted = $$props.highlighted);
    		if ('overlayFill' in $$props) $$invalidate(4, overlayFill = $$props.overlayFill);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		z,
    		xScale,
    		yScale,
    		zGet,
    		zRange,
    		custom,
    		hovered,
    		placeLabel,
    		selected,
    		highlighted,
    		overlayFill,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		lineWidth,
    		$custom,
    		$coords,
    		$data,
    		$xScale,
    		$yScale,
    		$z,
    		$zGet,
    		$zRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
    		if ('placeLabel' in $$props) $$invalidate(1, placeLabel = $$props.placeLabel);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('highlighted' in $$props) $$invalidate(3, highlighted = $$props.highlighted);
    		if ('overlayFill' in $$props) $$invalidate(4, overlayFill = $$props.overlayFill);
    		if ('coords' in $$props) $$invalidate(19, coords = $$props.coords);
    		if ('idKey' in $$props) $$invalidate(20, idKey = $$props.idKey);
    		if ('colorHover' in $$props) $$invalidate(21, colorHover = $$props.colorHover);
    		if ('colorSelect' in $$props) $$invalidate(22, colorSelect = $$props.colorSelect);
    		if ('colorHighlight' in $$props) $$invalidate(23, colorHighlight = $$props.colorHighlight);
    		if ('lineWidth' in $$props) $$invalidate(24, lineWidth = $$props.lineWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hovered,
    		placeLabel,
    		selected,
    		highlighted,
    		overlayFill,
    		$coords,
    		$data,
    		$xScale,
    		$yScale,
    		$z,
    		$zGet,
    		$zRange,
    		data,
    		z,
    		xScale,
    		yScale,
    		zGet,
    		zRange,
    		custom,
    		coords,
    		idKey,
    		colorHover,
    		colorSelect,
    		colorHighlight,
    		lineWidth
    	];
    }

    class Scatter_svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
    			hovered: 0,
    			placeLabel: 1,
    			selected: 2,
    			highlighted: 3,
    			overlayFill: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Scatter_svg",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get hovered() {
    		throw new Error("<Scatter_svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Scatter_svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeLabel() {
    		throw new Error("<Scatter_svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeLabel(value) {
    		throw new Error("<Scatter_svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Scatter_svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Scatter_svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlighted() {
    		throw new Error("<Scatter_svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlighted(value) {
    		throw new Error("<Scatter_svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlayFill() {
    		throw new Error("<Scatter_svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlayFill(value) {
    		throw new Error("<Scatter_svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const epsilon$1 = 1.1102230246251565e-16;
    const splitter = 134217729;
    const resulterrbound = (3 + 8 * epsilon$1) * epsilon$1;

    // fast_expansion_sum_zeroelim routine from oritinal code
    function sum(elen, e, flen, f, h) {
        let Q, Qnew, hh, bvirt;
        let enow = e[0];
        let fnow = f[0];
        let eindex = 0;
        let findex = 0;
        if ((fnow > enow) === (fnow > -enow)) {
            Q = enow;
            enow = e[++eindex];
        } else {
            Q = fnow;
            fnow = f[++findex];
        }
        let hindex = 0;
        if (eindex < elen && findex < flen) {
            if ((fnow > enow) === (fnow > -enow)) {
                Qnew = enow + Q;
                hh = Q - (Qnew - enow);
                enow = e[++eindex];
            } else {
                Qnew = fnow + Q;
                hh = Q - (Qnew - fnow);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
            while (eindex < elen && findex < flen) {
                if ((fnow > enow) === (fnow > -enow)) {
                    Qnew = Q + enow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (enow - bvirt);
                    enow = e[++eindex];
                } else {
                    Qnew = Q + fnow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                    fnow = f[++findex];
                }
                Q = Qnew;
                if (hh !== 0) {
                    h[hindex++] = hh;
                }
            }
        }
        while (eindex < elen) {
            Qnew = Q + enow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (enow - bvirt);
            enow = e[++eindex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        while (findex < flen) {
            Qnew = Q + fnow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (fnow - bvirt);
            fnow = f[++findex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        if (Q !== 0 || hindex === 0) {
            h[hindex++] = Q;
        }
        return hindex;
    }

    function estimate(elen, e) {
        let Q = e[0];
        for (let i = 1; i < elen; i++) Q += e[i];
        return Q;
    }

    function vec(n) {
        return new Float64Array(n);
    }

    const ccwerrboundA = (3 + 16 * epsilon$1) * epsilon$1;
    const ccwerrboundB = (2 + 12 * epsilon$1) * epsilon$1;
    const ccwerrboundC = (9 + 64 * epsilon$1) * epsilon$1 * epsilon$1;

    const B = vec(4);
    const C1 = vec(8);
    const C2 = vec(12);
    const D = vec(16);
    const u = vec(4);

    function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
        let acxtail, acytail, bcxtail, bcytail;
        let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;

        const acx = ax - cx;
        const bcx = bx - cx;
        const acy = ay - cy;
        const bcy = by - cy;

        s1 = acx * bcy;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcx;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        B[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        B[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        B[2] = _j - (u3 - bvirt) + (_i - bvirt);
        B[3] = u3;

        let det = estimate(4, B);
        let errbound = ccwerrboundB * detsum;
        if (det >= errbound || -det >= errbound) {
            return det;
        }

        bvirt = ax - acx;
        acxtail = ax - (acx + bvirt) + (bvirt - cx);
        bvirt = bx - bcx;
        bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
        bvirt = ay - acy;
        acytail = ay - (acy + bvirt) + (bvirt - cy);
        bvirt = by - bcy;
        bcytail = by - (bcy + bvirt) + (bvirt - cy);

        if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
            return det;
        }

        errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
        det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);
        if (det >= errbound || -det >= errbound) return det;

        s1 = acxtail * bcy;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcx;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C1len = sum(4, B, 4, u, C1);

        s1 = acx * bcytail;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcxtail;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C2len = sum(C1len, C1, 4, u, C2);

        s1 = acxtail * bcytail;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcxtail;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const Dlen = sum(C2len, C2, 4, u, D);

        return D[Dlen - 1];
    }

    function orient2d(ax, ay, bx, by, cx, cy) {
        const detleft = (ay - cy) * (bx - cx);
        const detright = (ax - cx) * (by - cy);
        const det = detleft - detright;

        if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;

        const detsum = Math.abs(detleft + detright);
        if (Math.abs(det) >= ccwerrboundA * detsum) return det;

        return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
    }

    const EPSILON = Math.pow(2, -52);
    const EDGE_STACK = new Uint32Array(512);

    class Delaunator {

        static from(points, getX = defaultGetX, getY = defaultGetY) {
            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            const n = coords.length >> 1;
            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            // arrays that will store the triangulation graph
            const maxTriangles = Math.max(2 * n - 5, 0);
            this._triangles = new Uint32Array(maxTriangles * 3);
            this._halfedges = new Int32Array(maxTriangles * 3);

            // temporary arrays for tracking the edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hullPrev = new Uint32Array(n); // edge to prev edge
            this._hullNext = new Uint32Array(n); // edge to next edge
            this._hullTri = new Uint32Array(n); // edge to adjacent triangle
            this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash

            // temporary arrays for sorting points
            this._ids = new Uint32Array(n);
            this._dists = new Float64Array(n);

            this.update();
        }

        update() {
            const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;
            const n = coords.length >> 1;

            // populate an array of point indices; calculate input data bbox
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                this._ids[i] = i;
            }
            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let minDist = Infinity;
            let i0, i1, i2;

            // pick a seed point close to the center
            for (let i = 0; i < n; i++) {
                const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];

            minDist = Infinity;

            // find the point closest to the seed
            for (let i = 0; i < n; i++) {
                if (i === i0) continue;
                const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;
                const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];

            if (minRadius === Infinity) {
                // order collinear points by dx (or dy if all x are identical)
                // and return the list as a hull
                for (let i = 0; i < n; i++) {
                    this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);
                }
                quicksort(this._ids, this._dists, 0, n - 1);
                const hull = new Uint32Array(n);
                let j = 0;
                for (let i = 0, d0 = -Infinity; i < n; i++) {
                    const id = this._ids[i];
                    if (this._dists[id] > d0) {
                        hull[j++] = id;
                        d0 = this._dists[id];
                    }
                }
                this.hull = hull.subarray(0, j);
                this.triangles = new Uint32Array(0);
                this.halfedges = new Uint32Array(0);
                return;
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
                const i = i1;
                const x = i1x;
                const y = i1y;
                i1 = i2;
                i1x = i2x;
                i1y = i2y;
                i2 = i;
                i2x = x;
                i2y = y;
            }

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            for (let i = 0; i < n; i++) {
                this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
            }

            // sort the points by distance from the seed triangle circumcenter
            quicksort(this._ids, this._dists, 0, n - 1);

            // set up the seed triangle as the starting hull
            this._hullStart = i0;
            let hullSize = 3;

            hullNext[i0] = hullPrev[i2] = i1;
            hullNext[i1] = hullPrev[i0] = i2;
            hullNext[i2] = hullPrev[i1] = i0;

            hullTri[i0] = 0;
            hullTri[i1] = 1;
            hullTri[i2] = 2;

            hullHash.fill(-1);
            hullHash[this._hashKey(i0x, i0y)] = i0;
            hullHash[this._hashKey(i1x, i1y)] = i1;
            hullHash[this._hashKey(i2x, i2y)] = i2;

            this.trianglesLen = 0;
            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < this._ids.length; k++) {
                const i = this._ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip near-duplicate points
                if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if (i === i0 || i === i1 || i === i2) continue;

                // find a visible edge on the convex hull using edge hash
                let start = 0;
                for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
                    start = hullHash[(key + j) % this._hashSize];
                    if (start !== -1 && start !== hullNext[start]) break;
                }

                start = hullPrev[start];
                let e = start, q;
                while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
                    e = q;
                    if (e === start) {
                        e = -1;
                        break;
                    }
                }
                if (e === -1) continue; // likely a near-duplicate point; skip it

                // add the first triangle from the point
                let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                hullTri[i] = this._legalize(t + 2);
                hullTri[e] = t; // keep track of boundary triangles on the hull
                hullSize++;

                // walk forward through the hull, adding more triangles and flipping recursively
                let n = hullNext[e];
                while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
                    t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                    hullTri[i] = this._legalize(t + 2);
                    hullNext[n] = n; // mark as removed
                    hullSize--;
                    n = q;
                }

                // walk backward from the other side, adding more triangles and flipping
                if (e === start) {
                    while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
                        t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                        this._legalize(t + 2);
                        hullTri[q] = t;
                        hullNext[e] = e; // mark as removed
                        hullSize--;
                        e = q;
                    }
                }

                // update the hull indices
                this._hullStart = hullPrev[i] = e;
                hullNext[e] = hullPrev[n] = i;
                hullNext[i] = n;

                // save the two new edges in the hash table
                hullHash[this._hashKey(x, y)] = i;
                hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
            }

            this.hull = new Uint32Array(hullSize);
            for (let i = 0, e = this._hullStart; i < hullSize; i++) {
                this.hull[i] = e;
                e = hullNext[e];
            }

            // trim typed triangle mesh arrays
            this.triangles = this._triangles.subarray(0, this.trianglesLen);
            this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
        }

        _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
        }

        _legalize(a) {
            const {_triangles: triangles, _halfedges: halfedges, coords} = this;

            let i = 0;
            let ar = 0;

            // recursion eliminated with a fixed-size stack
            while (true) {
                const b = halfedges[a];

                /* if the pair of triangles doesn't satisfy the Delaunay condition
                 * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
                 * then do the same check/flip recursively for the new pair of triangles
                 *
                 *           pl                    pl
                 *          /||\                  /  \
                 *       al/ || \bl            al/    \a
                 *        /  ||  \              /      \
                 *       /  a||b  \    flip    /___ar___\
                 *     p0\   ||   /p1   =>   p0\---bl---/p1
                 *        \  ||  /              \      /
                 *       ar\ || /br             b\    /br
                 *          \||/                  \  /
                 *           pr                    pr
                 */
                const a0 = a - a % 3;
                ar = a0 + (a + 2) % 3;

                if (b === -1) { // convex hull edge
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                    continue;
                }

                const b0 = b - b % 3;
                const al = a0 + (a + 1) % 3;
                const bl = b0 + (b + 2) % 3;

                const p0 = triangles[ar];
                const pr = triangles[a];
                const pl = triangles[al];
                const p1 = triangles[bl];

                const illegal = inCircle(
                    coords[2 * p0], coords[2 * p0 + 1],
                    coords[2 * pr], coords[2 * pr + 1],
                    coords[2 * pl], coords[2 * pl + 1],
                    coords[2 * p1], coords[2 * p1 + 1]);

                if (illegal) {
                    triangles[a] = p1;
                    triangles[b] = p0;

                    const hbl = halfedges[bl];

                    // edge swapped on the other side of the hull (rare); fix the halfedge reference
                    if (hbl === -1) {
                        let e = this._hullStart;
                        do {
                            if (this._hullTri[e] === bl) {
                                this._hullTri[e] = a;
                                break;
                            }
                            e = this._hullPrev[e];
                        } while (e !== this._hullStart);
                    }
                    this._link(a, hbl);
                    this._link(b, halfedges[ar]);
                    this._link(ar, bl);

                    const br = b0 + (b + 1) % 3;

                    // don't worry about hitting the cap: it can only happen on extremely degenerate input
                    if (i < EDGE_STACK.length) {
                        EDGE_STACK[i++] = br;
                    }
                } else {
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                }
            }

            return ar;
        }

        _link(a, b) {
            this._halfedges[a] = b;
            if (b !== -1) this._halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this._triangles[t] = i0;
            this._triangles[t + 1] = i1;
            this._triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    // monotonically increases with real angle, but doesn't need expensive trigonometry
    function pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
    }

    function dist(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
               dy * (ex * cp - bp * fx) +
               ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = (ey * bl - dy * cl) * d;
        const y = (dx * cl - ex * bl) * d;

        return x * x + y * y;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = ax + (ey * bl - dy * cl) * d;
        const y = ay + (dx * cl - ex * bl) * d;

        return {x, y};
    }

    function quicksort(ids, dists, left, right) {
        if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
                const temp = ids[i];
                const tempDist = dists[temp];
                let j = i - 1;
                while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            let i = left + 1;
            let j = right;
            swap(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);

            const temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
                do i++; while (dists[ids[i]] < tempDist);
                do j--; while (dists[ids[j]] > tempDist);
                if (j < i) break;
                swap(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, dists, i, right);
                quicksort(ids, dists, left, j - 1);
            } else {
                quicksort(ids, dists, left, j - 1);
                quicksort(ids, dists, i, right);
            }
        }
    }

    function swap(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    const epsilon = 1e-6;

    class Path {
      constructor() {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
      }
      moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      }
      lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
      }
      arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
      }
      rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
      }
      value() {
        return this._ || null;
      }
    }

    class Polygon {
      constructor() {
        this._ = [];
      }
      moveTo(x, y) {
        this._.push([x, y]);
      }
      closePath() {
        this._.push(this._[0].slice());
      }
      lineTo(x, y) {
        this._.push([x, y]);
      }
      value() {
        return this._.length ? this._ : null;
      }
    }

    class Voronoi$1 {
      constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
      }
      update() {
        this.delaunay.update();
        this._init();
        return this;
      }
      _init() {
        const {delaunay: {points, hull, triangles}, vectors} = this;

        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
          const t1 = triangles[i] * 2;
          const t2 = triangles[i + 1] * 2;
          const t3 = triangles[i + 2] * 2;
          const x1 = points[t1];
          const y1 = points[t1 + 1];
          const x2 = points[t2];
          const y2 = points[t2 + 1];
          const x3 = points[t3];
          const y3 = points[t3 + 1];

          const dx = x2 - x1;
          const dy = y2 - y1;
          const ex = x3 - x1;
          const ey = y3 - y1;
          const ab = (dx * ey - dy * ex) * 2;

          if (Math.abs(ab) < 1e-9) {
            // degenerate case (collinear diagram)
            // almost equal points (degenerate triangle)
            // the circumcenter is at the infinity, in a
            // direction that is:
            // 1. orthogonal to the halfedge.
            let a = 1e9;
            // 2. points away from the center; since the list of triangles starts
            // in the center, the first point of the first triangle
            // will be our reference
            const r = triangles[0] * 2;
            a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);
            x = (x1 + x3) / 2 - a * ey;
            y = (y1 + y3) / 2 + a * ex;
          } else {
            const d = 1 / ab;
            const bl = dx * dx + dy * dy;
            const cl = ex * ex + ey * ey;
            x = x1 + (ey * bl - dy * cl) * d;
            y = y1 + (dx * cl - ex * bl) * d;
          }
          circumcenters[j] = x;
          circumcenters[j + 1] = y;
        }

        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for (let i = 0; i < hull.length; ++i) {
          h = hull[i];
          p0 = p1, x0 = x1, y0 = y1;
          p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
          vectors[p0 + 2] = vectors[p1] = y0 - y1;
          vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
        if (hull.length <= 1) return null;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = Math.floor(i / 3) * 2;
          const tj = Math.floor(j / 3) * 2;
          const xi = circumcenters[ti];
          const yi = circumcenters[ti + 1];
          const xj = circumcenters[tj];
          const yj = circumcenters[tj + 1];
          this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for (let i = 0; i < hull.length; ++i) {
          h0 = h1, h1 = hull[i];
          const t = Math.floor(inedges[h1] / 3) * 2;
          const x = circumcenters[t];
          const y = circumcenters[t + 1];
          const v = h0 * 4;
          const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
          if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
      }
      renderBounds(context) {
        const buffer = context == null ? context = new Path : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
      }
      renderCell(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;
        for (let i = 2; i < n; i += 2) {
          if (points[i] !== points[i-2] || points[i+1] !== points[i-1])
            context.lineTo(points[i], points[i + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      *cellPolygons() {
        const {delaunay: {points}} = this;
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const cell = this.cellPolygon(i);
          if (cell) cell.index = i, yield cell;
        }
      }
      cellPolygon(i) {
        const polygon = new Polygon;
        this.renderCell(i, polygon);
        return polygon.value();
      }
      _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
          context.moveTo(S[0], S[1]);
          context.lineTo(S[2], S[3]);
        }
      }
      contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
      }
      *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)) {
          const cj = this._clip(j);
          // find the common edge
          if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
            for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
              if (ci[ai] == cj[aj]
              && ci[ai + 1] == cj[aj + 1]
              && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]
              && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]
              ) {
                yield j;
                break loop;
              }
            }
          }
        }
      }
      _cell(i) {
        const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
          const t = Math.floor(e / 3);
          points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
        } while (e !== e0 && e !== -1);
        return points;
      }
      _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        const points = this._cell(i);
        if (points === null) return null;
        const {vectors: V} = this;
        const v = i * 4;
        return V[v] || V[v + 1]
            ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
            : this._clipFinite(i, points);
      }
      _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for (let j = 0; j < n; j += 2) {
          x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
          c0 = c1, c1 = this._regioncode(x1, y1);
          if (c0 === 0 && c1 === 0) {
            e0 = e1, e1 = 0;
            if (P) P.push(x1, y1);
            else P = [x1, y1];
          } else {
            let S, sx0, sy0, sx1, sy1;
            if (c0 === 0) {
              if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
              [sx0, sy0, sx1, sy1] = S;
            } else {
              if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
              [sx1, sy1, sx0, sy0] = S;
              e0 = e1, e1 = this._edgecode(sx0, sy0);
              if (e0 && e1) this._edge(i, e0, e1, P, P.length);
              if (P) P.push(sx0, sy0);
              else P = [sx0, sy0];
            }
            e0 = e1, e1 = this._edgecode(sx1, sy1);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx1, sy1);
            else P = [sx1, sy1];
          }
        }
        if (P) {
          e0 = e1, e1 = this._edgecode(P[0], P[1]);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        return P;
      }
      _clipSegment(x0, y0, x1, y1, c0, c1) {
        while (true) {
          if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
          if (c0 & c1) return null;
          let x, y, c = c0 || c1;
          if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
          else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
          else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
          else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
          if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
          else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
      }
      _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) {
          for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
          }
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
        }
        return P;
      }
      _edge(i, e0, e1, P, j) {
        while (e0 !== e1) {
          let x, y;
          switch (e0) {
            case 0b0101: e0 = 0b0100; continue; // top-left
            case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
            case 0b0110: e0 = 0b0010; continue; // top-right
            case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
            case 0b1010: e0 = 0b1000; continue; // bottom-right
            case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
            case 0b1001: e0 = 0b0001; continue; // bottom-left
            case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
          }
          // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
          // undefined, the conditional statement will be executed.
          if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
            P.splice(j, 0, x, y), j += 2;
          }
        }
        if (P.length > 4) {
          for (let i = 0; i < P.length; i+= 2) {
            const j = (i + 2) % P.length, k = (i + 4) % P.length;
            if (P[i] === P[j] && P[j] === P[k]
            || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])
              P.splice(j, 2), i -= 2;
          }
        }
        return j;
      }
      _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) { // top
          if (y0 <= this.ymin) return null;
          if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) { // bottom
          if (y0 >= this.ymax) return null;
          if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) { // right
          if (x0 >= this.xmax) return null;
          if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) { // left
          if (x0 <= this.xmin) return null;
          if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [x, y];
      }
      _edgecode(x, y) {
        return (x === this.xmin ? 0b0001
            : x === this.xmax ? 0b0010 : 0b0000)
            | (y === this.ymin ? 0b0100
            : y === this.ymax ? 0b1000 : 0b0000);
      }
      _regioncode(x, y) {
        return (x < this.xmin ? 0b0001
            : x > this.xmax ? 0b0010 : 0b0000)
            | (y < this.ymin ? 0b0100
            : y > this.ymax ? 0b1000 : 0b0000);
      }
    }

    const tau = 2 * Math.PI, pow = Math.pow;

    function pointX(p) {
      return p[0];
    }

    function pointY(p) {
      return p[1];
    }

    // A triangulation is collinear if all its triangles have a non-null area
    function collinear(d) {
      const {triangles, coords} = d;
      for (let i = 0; i < triangles.length; i += 3) {
        const a = 2 * triangles[i],
              b = 2 * triangles[i + 1],
              c = 2 * triangles[i + 2],
              cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])
                    - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
      }
      return true;
    }

    function jitter(x, y, r) {
      return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
    }

    class Delaunay {
      static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points
            ? flatArray(points, fx, fy, that)
            : Float64Array.from(flatIterable(points, fx, fy, that)));
      }
      constructor(points) {
        this._delaunator = new Delaunator(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
      }
      update() {
        this._delaunator.update();
        this._init();
        return this;
      }
      _init() {
        const d = this._delaunator, points = this.points;

        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
          this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)
            .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
          const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],
            bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],
            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
          for (let i = 0, n = points.length / 2; i < n; ++i) {
            const p = jitter(points[2 * i], points[2 * i + 1], r);
            points[2 * i] = p[0];
            points[2 * i + 1] = p[1];
          }
          this._delaunator = new Delaunator(points);
        } else {
          delete this.collinear;
        }

        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);

        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for (let e = 0, n = halfedges.length; e < n; ++e) {
          const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
          if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for (let i = 0, n = hull.length; i < n; ++i) {
          hullIndex[hull[i]] = i;
        }

        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
          this.triangles = new Int32Array(3).fill(-1);
          this.halfedges = new Int32Array(3).fill(-1);
          this.triangles[0] = hull[0];
          inedges[hull[0]] = 1;
          if (hull.length === 2) {
            inedges[hull[1]] = 0;
            this.triangles[1] = hull[1];
            this.triangles[2] = hull[1];
          }
        }
      }
      voronoi(bounds) {
        return new Voronoi$1(this, bounds);
      }
      *neighbors(i) {
        const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;

        // degenerate case with several collinear points
        if (collinear) {
          const l = collinear.indexOf(i);
          if (l > 0) yield collinear[l - 1];
          if (l < collinear.length - 1) yield collinear[l + 1];
          return;
        }

        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
          yield p0 = triangles[e];
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) return; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            const p = hull[(_hullIndex[i] + 1) % hull.length];
            if (p !== p0) yield p;
            return;
          }
        } while (e !== e0);
      }
      find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
        return c;
      }
      _step(i, x, y) {
        const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
          let t = triangles[e];
          const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
          if (dt < dc) dc = dt, c = t;
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            e = hull[(_hullIndex[i] + 1) % hull.length];
            if (e !== t) {
              if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
            }
            break;
          }
        } while (e !== e0);
        return c;
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, halfedges, triangles} = this;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = triangles[i] * 2;
          const tj = triangles[j] * 2;
          context.moveTo(points[ti], points[ti + 1]);
          context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
      }
      renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new Path : undefined;
        const {points} = this;
        for (let i = 0, n = points.length; i < n; i += 2) {
          const x = points[i], y = points[i + 1];
          context.moveTo(x + r, y);
          context.arc(x, y, r, 0, tau);
        }
        return buffer && buffer.value();
      }
      renderHull(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {hull, points} = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for (let i = 1; i < n; ++i) {
          const h = 2 * hull[i];
          context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      hullPolygon() {
        const polygon = new Polygon;
        this.renderHull(polygon);
        return polygon.value();
      }
      renderTriangle(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, triangles} = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
      }
      *trianglePolygons() {
        const {triangles} = this;
        for (let i = 0, n = triangles.length / 3; i < n; ++i) {
          yield this.trianglePolygon(i);
        }
      }
      trianglePolygon(i) {
        const polygon = new Polygon;
        this.renderTriangle(i, polygon);
        return polygon.value();
      }
    }

    function flatArray(points, fx, fy, that) {
      const n = points.length;
      const array = new Float64Array(n * 2);
      for (let i = 0; i < n; ++i) {
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
      }
      return array;
    }

    function* flatIterable(points, fx, fy, that) {
      let i = 0;
      for (const p of points) {
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
      }
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/shared/Voronoi.svelte generated by Svelte v3.43.1 */
    const file$m = "node_modules/@onsvisual/svelte-charts/src/charts/shared/Voronoi.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[29] = list[i];
    	child_ctx[31] = i;
    	return child_ctx;
    }

    // (51:0) {#if $coords.length == $data.length}
    function create_if_block$b(ctx) {
    	let if_block_anchor;
    	let if_block = /*voronoi*/ ctx[1] && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*voronoi*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(51:0) {#if $coords.length == $data.length}",
    		ctx
    	});

    	return block;
    }

    // (52:0) {#if voronoi}
    function create_if_block_1$8(ctx) {
    	let g;
    	let each_value = /*$data*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "voronoi-group");
    			add_location(g, file$m, 52, 0, 1052);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*voronoi, doHover, $data, doSelect*/ 3078) {
    				each_value = /*$data*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(52:0) {#if voronoi}",
    		ctx
    	});

    	return block;
    }

    // (54:0) {#each $data as d, i}
    function create_each_block$c(ctx) {
    	let path;
    	let path_d_value;
    	let mounted;
    	let dispose;

    	function mouseover_handler(...args) {
    		return /*mouseover_handler*/ ctx[21](/*i*/ ctx[31], ...args);
    	}

    	function focus_handler(...args) {
    		return /*focus_handler*/ ctx[23](/*i*/ ctx[31], ...args);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[25](/*i*/ ctx[31], ...args);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "class", "voronoi-cell svelte-169satm");
    			attr_dev(path, "d", path_d_value = /*voronoi*/ ctx[1].renderCell(/*i*/ ctx[31]));
    			add_location(path, file$m, 54, 1, 1101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(path, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(path, "mouseleave", /*mouseleave_handler*/ ctx[22], false, false, false),
    					listen_dev(path, "focus", focus_handler, false, false, false),
    					listen_dev(path, "blur", /*blur_handler*/ ctx[24], false, false, false),
    					listen_dev(path, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*voronoi*/ 2 && path_d_value !== (path_d_value = /*voronoi*/ ctx[1].renderCell(/*i*/ ctx[31]))) {
    				attr_dev(path, "d", path_d_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(54:0) {#each $data as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let if_block_anchor;
    	let if_block = /*$coords*/ ctx[0].length == /*$data*/ ctx[2].length && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$coords*/ ctx[0].length == /*$data*/ ctx[2].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let coordsArray;
    	let voronoi;
    	let $height;
    	let $width;
    	let $yScale;
    	let $xScale;
    	let $coords;
    	let $custom;
    	let $data;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Voronoi', slots, []);
    	const { data, width, height, custom, xScale, yScale } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(2, $data = value));
    	validate_store(width, 'width');
    	component_subscribe($$self, width, value => $$invalidate(18, $width = value));
    	validate_store(height, 'height');
    	component_subscribe($$self, height, value => $$invalidate(17, $height = value));
    	validate_store(custom, 'custom');
    	component_subscribe($$self, custom, value => $$invalidate(26, $custom = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(20, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(19, $yScale = value));
    	const dispatch = createEventDispatcher();
    	let { hover = false } = $$props;
    	let { hovered = null } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let coords = $custom.coords;
    	validate_store(coords, 'coords');
    	component_subscribe($$self, coords, value => $$invalidate(0, $coords = value));
    	let idKey = $custom.idKey;

    	function doHover(e, d) {
    		if (hover) {
    			$$invalidate(12, hovered = d ? d[idKey] : null);
    			dispatch('hover', { id: hovered, data: d, event: e });
    		}
    	}

    	function doSelect(e, d) {
    		if (select) {
    			$$invalidate(13, selected = d ? d[idKey] : null);
    			dispatch('select', { id: selected, data: d, event: e });
    		}
    	}

    	const writable_props = ['hover', 'hovered', 'select', 'selected'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Voronoi> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = (i, e) => doHover(e, $data[i]);
    	const mouseleave_handler = e => doHover(e, null);
    	const focus_handler = (i, e) => doHover(e, $data[i]);
    	const blur_handler = e => doHover(e, null);
    	const click_handler = (i, e) => doSelect(e, $data[i]);

    	$$self.$$set = $$props => {
    		if ('hover' in $$props) $$invalidate(14, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(12, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(15, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(13, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({
    		Delaunay,
    		getContext,
    		createEventDispatcher,
    		data,
    		width,
    		height,
    		custom,
    		xScale,
    		yScale,
    		dispatch,
    		hover,
    		hovered,
    		select,
    		selected,
    		coords,
    		idKey,
    		doHover,
    		doSelect,
    		coordsArray,
    		voronoi,
    		$height,
    		$width,
    		$yScale,
    		$xScale,
    		$coords,
    		$custom,
    		$data
    	});

    	$$self.$inject_state = $$props => {
    		if ('hover' in $$props) $$invalidate(14, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(12, hovered = $$props.hovered);
    		if ('select' in $$props) $$invalidate(15, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(13, selected = $$props.selected);
    		if ('coords' in $$props) $$invalidate(9, coords = $$props.coords);
    		if ('idKey' in $$props) idKey = $$props.idKey;
    		if ('coordsArray' in $$props) $$invalidate(16, coordsArray = $$props.coordsArray);
    		if ('voronoi' in $$props) $$invalidate(1, voronoi = $$props.voronoi);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$coords, $xScale, $yScale*/ 1572865) {
    			$$invalidate(16, coordsArray = Array.isArray($coords)
    			? $coords.map(d => [$xScale(d.x), $yScale(d.y)])
    			: []);
    		}

    		if ($$self.$$.dirty[0] & /*coordsArray, $width, $height*/ 458752) {
    			$$invalidate(1, voronoi = Delaunay.from(coordsArray).voronoi([0, 0, $width, $height]));
    		}
    	};

    	return [
    		$coords,
    		voronoi,
    		$data,
    		data,
    		width,
    		height,
    		custom,
    		xScale,
    		yScale,
    		coords,
    		doHover,
    		doSelect,
    		hovered,
    		selected,
    		hover,
    		select,
    		coordsArray,
    		$height,
    		$width,
    		$yScale,
    		$xScale,
    		mouseover_handler,
    		mouseleave_handler,
    		focus_handler,
    		blur_handler,
    		click_handler
    	];
    }

    class Voronoi extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$p,
    			create_fragment$p,
    			safe_not_equal,
    			{
    				hover: 14,
    				hovered: 12,
    				select: 15,
    				selected: 13
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Voronoi",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get hover() {
    		throw new Error("<Voronoi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<Voronoi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hovered() {
    		throw new Error("<Voronoi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Voronoi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get select() {
    		throw new Error("<Voronoi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set select(value) {
    		throw new Error("<Voronoi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Voronoi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Voronoi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@onsvisual/svelte-charts/src/charts/ScatterChart.svelte generated by Svelte v3.43.1 */
    const file$l = "node_modules/@onsvisual/svelte-charts/src/charts/ScatterChart.svelte";
    const get_front_slot_changes = dirty => ({});
    const get_front_slot_context = ctx => ({});
    const get_svg_slot_changes = dirty => ({});
    const get_svg_slot_context = ctx => ({});
    const get_back_slot_changes = dirty => ({});
    const get_back_slot_context = ctx => ({});
    const get_options_slot_changes = dirty => ({});
    const get_options_slot_context = ctx => ({});

    // (110:0) {#if title}
    function create_if_block_7$1(ctx) {
    	let title_1;
    	let current;

    	title_1 = new Title({
    			props: {
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(title_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(title_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const title_1_changes = {};

    			if (dirty[0] & /*title*/ 4194304 | dirty[1] & /*$$scope*/ 536870912) {
    				title_1_changes.$$scope = { dirty, ctx };
    			}

    			title_1.$set(title_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(title_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(110:0) {#if title}",
    		ctx
    	});

    	return block;
    }

    // (111:2) <Title>
    function create_default_slot_3$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*title*/ ctx[22]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*title*/ 4194304) set_data_dev(t, /*title*/ ctx[22]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(111:2) <Title>",
    		ctx
    	});

    	return block;
    }

    // (146:3) {#if width > 80}
    function create_if_block_2$5(ctx) {
    	let setcoords;
    	let t0;
    	let t1;
    	let svg;
    	let t2;
    	let current;
    	setcoords = new SetCoords({ $$inline: true });
    	const back_slot_template = /*#slots*/ ctx[56].back;
    	const back_slot = create_slot(back_slot_template, ctx, /*$$scope*/ ctx[60], get_back_slot_context);

    	svg = new Svg({
    			props: {
    				pointerEvents: /*interactive*/ ctx[30],
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const front_slot_template = /*#slots*/ ctx[56].front;
    	const front_slot = create_slot(front_slot_template, ctx, /*$$scope*/ ctx[60], get_front_slot_context);

    	const block = {
    		c: function create() {
    			create_component(setcoords.$$.fragment);
    			t0 = space();
    			if (back_slot) back_slot.c();
    			t1 = space();
    			create_component(svg.$$.fragment);
    			t2 = space();
    			if (front_slot) front_slot.c();
    		},
    		m: function mount(target, anchor) {
    			mount_component(setcoords, target, anchor);
    			insert_dev(target, t0, anchor);

    			if (back_slot) {
    				back_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			mount_component(svg, target, anchor);
    			insert_dev(target, t2, anchor);

    			if (front_slot) {
    				front_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (back_slot) {
    				if (back_slot.p && (!current || dirty[1] & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						back_slot,
    						back_slot_template,
    						ctx,
    						/*$$scope*/ ctx[60],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[60])
    						: get_slot_changes(back_slot_template, /*$$scope*/ ctx[60], dirty, get_back_slot_changes),
    						get_back_slot_context
    					);
    				}
    			}

    			const svg_changes = {};
    			if (dirty[0] & /*interactive*/ 1073741824) svg_changes.pointerEvents = /*interactive*/ ctx[30];

    			if (dirty[0] & /*selected, yTicks, yFormatTick, textColor, tickColor, tickDashed, yAxis, yKey, xTicks, xFormatTick, snapTicks, xAxis*/ 37740609 | dirty[1] & /*$$scope, hovered, placeLabel, select, highlighted, overlayFill, yPrefix, ySuffix, xPrefix, xSuffix*/ 536874671) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);

    			if (front_slot) {
    				if (front_slot.p && (!current || dirty[1] & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						front_slot,
    						front_slot_template,
    						ctx,
    						/*$$scope*/ ctx[60],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[60])
    						: get_slot_changes(front_slot_template, /*$$scope*/ ctx[60], dirty, get_front_slot_changes),
    						get_front_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(setcoords.$$.fragment, local);
    			transition_in(back_slot, local);
    			transition_in(svg.$$.fragment, local);
    			transition_in(front_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(setcoords.$$.fragment, local);
    			transition_out(back_slot, local);
    			transition_out(svg.$$.fragment, local);
    			transition_out(front_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(setcoords, detaching);
    			if (detaching) detach_dev(t0);
    			if (back_slot) back_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(svg, detaching);
    			if (detaching) detach_dev(t2);
    			if (front_slot) front_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(146:3) {#if width > 80}",
    		ctx
    	});

    	return block;
    }

    // (150:6) {#if xAxis}
    function create_if_block_6$1(ctx) {
    	let axisx;
    	let current;

    	axisx = new AxisX$2({
    			props: {
    				ticks: /*xTicks*/ ctx[17],
    				formatTick: /*xFormatTick*/ ctx[13],
    				snapTicks: /*snapTicks*/ ctx[25],
    				prefix: /*xPrefix*/ ctx[31],
    				suffix: /*xSuffix*/ ctx[32],
    				textColor: /*textColor*/ ctx[19],
    				tickColor: /*tickColor*/ ctx[20],
    				tickDashed: /*tickDashed*/ ctx[21]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(axisx.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisx, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const axisx_changes = {};
    			if (dirty[0] & /*xTicks*/ 131072) axisx_changes.ticks = /*xTicks*/ ctx[17];
    			if (dirty[0] & /*xFormatTick*/ 8192) axisx_changes.formatTick = /*xFormatTick*/ ctx[13];
    			if (dirty[0] & /*snapTicks*/ 33554432) axisx_changes.snapTicks = /*snapTicks*/ ctx[25];
    			if (dirty[1] & /*xPrefix*/ 1) axisx_changes.prefix = /*xPrefix*/ ctx[31];
    			if (dirty[1] & /*xSuffix*/ 2) axisx_changes.suffix = /*xSuffix*/ ctx[32];
    			if (dirty[0] & /*textColor*/ 524288) axisx_changes.textColor = /*textColor*/ ctx[19];
    			if (dirty[0] & /*tickColor*/ 1048576) axisx_changes.tickColor = /*tickColor*/ ctx[20];
    			if (dirty[0] & /*tickDashed*/ 2097152) axisx_changes.tickDashed = /*tickDashed*/ ctx[21];
    			axisx.$set(axisx_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisx.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisx.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisx, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(150:6) {#if xAxis}",
    		ctx
    	});

    	return block;
    }

    // (153:6) {#if yAxis && yKey}
    function create_if_block_5$3(ctx) {
    	let axisy;
    	let current;

    	axisy = new AxisY$2({
    			props: {
    				ticks: /*yTicks*/ ctx[18],
    				formatTick: /*yFormatTick*/ ctx[14],
    				prefix: /*yPrefix*/ ctx[33],
    				suffix: /*ySuffix*/ ctx[34],
    				textColor: /*textColor*/ ctx[19],
    				tickColor: /*tickColor*/ ctx[20],
    				tickDashed: /*tickDashed*/ ctx[21]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(axisy.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisy, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const axisy_changes = {};
    			if (dirty[0] & /*yTicks*/ 262144) axisy_changes.ticks = /*yTicks*/ ctx[18];
    			if (dirty[0] & /*yFormatTick*/ 16384) axisy_changes.formatTick = /*yFormatTick*/ ctx[14];
    			if (dirty[1] & /*yPrefix*/ 4) axisy_changes.prefix = /*yPrefix*/ ctx[33];
    			if (dirty[1] & /*ySuffix*/ 8) axisy_changes.suffix = /*ySuffix*/ ctx[34];
    			if (dirty[0] & /*textColor*/ 524288) axisy_changes.textColor = /*textColor*/ ctx[19];
    			if (dirty[0] & /*tickColor*/ 1048576) axisy_changes.tickColor = /*tickColor*/ ctx[20];
    			if (dirty[0] & /*tickDashed*/ 2097152) axisy_changes.tickDashed = /*tickDashed*/ ctx[21];
    			axisy.$set(axisy_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisy.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisy.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisy, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(153:6) {#if yAxis && yKey}",
    		ctx
    	});

    	return block;
    }

    // (157:3) {#if select || hover}
    function create_if_block_4$3(ctx) {
    	let voronoi;
    	let updating_selected;
    	let updating_hovered;
    	let current;

    	function voronoi_selected_binding(value) {
    		/*voronoi_selected_binding*/ ctx[57](value);
    	}

    	function voronoi_hovered_binding(value) {
    		/*voronoi_hovered_binding*/ ctx[58](value);
    	}

    	let voronoi_props = {
    		select: /*select*/ ctx[36],
    		hover: /*hover*/ ctx[46],
    		highlighted: /*highlighted*/ ctx[38]
    	};

    	if (/*selected*/ ctx[0] !== void 0) {
    		voronoi_props.selected = /*selected*/ ctx[0];
    	}

    	if (/*hovered*/ ctx[41] !== void 0) {
    		voronoi_props.hovered = /*hovered*/ ctx[41];
    	}

    	voronoi = new Voronoi({ props: voronoi_props, $$inline: true });
    	binding_callbacks.push(() => bind(voronoi, 'selected', voronoi_selected_binding));
    	binding_callbacks.push(() => bind(voronoi, 'hovered', voronoi_hovered_binding));
    	voronoi.$on("hover", /*doHoverScatter*/ ctx[48]);
    	voronoi.$on("select", /*select_handler*/ ctx[59]);

    	const block = {
    		c: function create() {
    			create_component(voronoi.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(voronoi, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const voronoi_changes = {};
    			if (dirty[1] & /*select*/ 32) voronoi_changes.select = /*select*/ ctx[36];
    			if (dirty[1] & /*highlighted*/ 128) voronoi_changes.highlighted = /*highlighted*/ ctx[38];

    			if (!updating_selected && dirty[0] & /*selected*/ 1) {
    				updating_selected = true;
    				voronoi_changes.selected = /*selected*/ ctx[0];
    				add_flush_callback(() => updating_selected = false);
    			}

    			if (!updating_hovered && dirty[1] & /*hovered*/ 1024) {
    				updating_hovered = true;
    				voronoi_changes.hovered = /*hovered*/ ctx[41];
    				add_flush_callback(() => updating_hovered = false);
    			}

    			voronoi.$set(voronoi_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(voronoi.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(voronoi.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(voronoi, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(157:3) {#if select || hover}",
    		ctx
    	});

    	return block;
    }

    // (160:3) {#if labels}
    function create_if_block_3$3(ctx) {
    	let labels_1;
    	let current;

    	labels_1 = new Labels({
    			props: {
    				hovered: /*hovered*/ ctx[41],
    				placeLabel: /*placeLabel*/ ctx[42],
    				selected: /*selected*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(labels_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(labels_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const labels_1_changes = {};
    			if (dirty[1] & /*hovered*/ 1024) labels_1_changes.hovered = /*hovered*/ ctx[41];
    			if (dirty[1] & /*placeLabel*/ 2048) labels_1_changes.placeLabel = /*placeLabel*/ ctx[42];
    			if (dirty[0] & /*selected*/ 1) labels_1_changes.selected = /*selected*/ ctx[0];
    			labels_1.$set(labels_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labels_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labels_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(labels_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(160:3) {#if labels}",
    		ctx
    	});

    	return block;
    }

    // (149:2) <Svg pointerEvents={interactive}>
    function create_default_slot_2$2(ctx) {
    	let t0;
    	let t1;
    	let scatter;
    	let t2;
    	let t3;
    	let t4;
    	let current;
    	let if_block0 = /*xAxis*/ ctx[15] && create_if_block_6$1(ctx);
    	let if_block1 = /*yAxis*/ ctx[16] && /*yKey*/ ctx[6] && create_if_block_5$3(ctx);

    	scatter = new Scatter_svg({
    			props: {
    				selected: /*selected*/ ctx[0],
    				hovered: /*hovered*/ ctx[41],
    				placeLabel: /*placeLabel*/ ctx[42],
    				highlighted: /*highlighted*/ ctx[38],
    				overlayFill: /*overlayFill*/ ctx[40]
    			},
    			$$inline: true
    		});

    	let if_block2 = (/*select*/ ctx[36] || /*hover*/ ctx[46]) && create_if_block_4$3(ctx);
    	let if_block3 = /*labels*/ ctx[47] && create_if_block_3$3(ctx);
    	const svg_slot_template = /*#slots*/ ctx[56].svg;
    	const svg_slot = create_slot(svg_slot_template, ctx, /*$$scope*/ ctx[60], get_svg_slot_context);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			create_component(scatter.$$.fragment);
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (svg_slot) svg_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(scatter, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t4, anchor);

    			if (svg_slot) {
    				svg_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*xAxis*/ ctx[15]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*xAxis*/ 32768) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_6$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*yAxis*/ ctx[16] && /*yKey*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*yAxis, yKey*/ 65600) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_5$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const scatter_changes = {};
    			if (dirty[0] & /*selected*/ 1) scatter_changes.selected = /*selected*/ ctx[0];
    			if (dirty[1] & /*hovered*/ 1024) scatter_changes.hovered = /*hovered*/ ctx[41];
    			if (dirty[1] & /*placeLabel*/ 2048) scatter_changes.placeLabel = /*placeLabel*/ ctx[42];
    			if (dirty[1] & /*highlighted*/ 128) scatter_changes.highlighted = /*highlighted*/ ctx[38];
    			if (dirty[1] & /*overlayFill*/ 512) scatter_changes.overlayFill = /*overlayFill*/ ctx[40];
    			scatter.$set(scatter_changes);

    			if (/*select*/ ctx[36] || /*hover*/ ctx[46]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[1] & /*select*/ 32) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_4$3(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t3.parentNode, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*labels*/ ctx[47]) if_block3.p(ctx, dirty);

    			if (svg_slot) {
    				if (svg_slot.p && (!current || dirty[1] & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						svg_slot,
    						svg_slot_template,
    						ctx,
    						/*$$scope*/ ctx[60],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[60])
    						: get_slot_changes(svg_slot_template, /*$$scope*/ ctx[60], dirty, get_svg_slot_changes),
    						get_svg_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(scatter.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(svg_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(scatter.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(svg_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(scatter, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (svg_slot) svg_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(149:2) <Svg pointerEvents={interactive}>",
    		ctx
    	});

    	return block;
    }

    // (115:1) <LayerCake     {padding}   x={xKey}   y={yKey}     z={zKey}     r={rKey}   xScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}     zScale={scaleOrdinal()}   xDomain={xDom}   yDomain={$yDomain}   {zDomain}   zRange={colors}     rRange={Array.isArray(r) ? r : [r, r]}   data={data}     xPadding={[buffer, buffer]}     yPadding={yKey ? [buffer, buffer] : null}     custom={{    type: 'scatter',    idKey,    labelKey,    coords,    colorSelect,    colorHover,    colorHighlight,    padding: 1,    animation,    duration    }}   let:width  >
    function create_default_slot_1$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*width*/ ctx[67] > 80 && create_if_block_2$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*width*/ ctx[67] > 80) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[2] & /*width*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(115:1) <LayerCake     {padding}   x={xKey}   y={yKey}     z={zKey}     r={rKey}   xScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}   yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}     zScale={scaleOrdinal()}   xDomain={xDom}   yDomain={$yDomain}   {zDomain}   zRange={colors}     rRange={Array.isArray(r) ? r : [r, r]}   data={data}     xPadding={[buffer, buffer]}     yPadding={yKey ? [buffer, buffer] : null}     custom={{    type: 'scatter',    idKey,    labelKey,    coords,    colorSelect,    colorHover,    colorHighlight,    padding: 1,    animation,    duration    }}   let:width  >",
    		ctx
    	});

    	return block;
    }

    // (169:0) {#if legend && zDomain}
    function create_if_block_1$7(ctx) {
    	let legend_1;
    	let current;

    	legend_1 = new Legend$2({
    			props: {
    				domain: /*zDomain*/ ctx[44],
    				colors: /*colors*/ ctx[28],
    				markerLength: 13,
    				round: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(legend_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(legend_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const legend_1_changes = {};
    			if (dirty[1] & /*zDomain*/ 8192) legend_1_changes.domain = /*zDomain*/ ctx[44];
    			if (dirty[0] & /*colors*/ 268435456) legend_1_changes.colors = /*colors*/ ctx[28];
    			legend_1.$set(legend_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(legend_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(legend_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(legend_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(169:0) {#if legend && zDomain}",
    		ctx
    	});

    	return block;
    }

    // (172:0) {#if footer}
    function create_if_block$a(ctx) {
    	let footer_1;
    	let current;

    	footer_1 = new Footer({
    			props: {
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(footer_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(footer_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const footer_1_changes = {};

    			if (dirty[0] & /*footer*/ 8388608 | dirty[1] & /*$$scope*/ 536870912) {
    				footer_1_changes.$$scope = { dirty, ctx };
    			}

    			footer_1.$set(footer_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(footer_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(172:0) {#if footer}",
    		ctx
    	});

    	return block;
    }

    // (173:2) <Footer>
    function create_default_slot$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*footer*/ ctx[23]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*footer*/ 8388608) set_data_dev(t, /*footer*/ ctx[23]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(173:2) <Footer>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let t0;
    	let t1;
    	let div;
    	let layercake;
    	let t2;
    	let t3;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*title*/ ctx[22] && create_if_block_7$1(ctx);
    	const options_slot_template = /*#slots*/ ctx[56].options;
    	const options_slot = create_slot(options_slot_template, ctx, /*$$scope*/ ctx[60], get_options_slot_context);

    	layercake = new LayerCake({
    			props: {
    				padding: /*padding*/ ctx[26],
    				x: /*xKey*/ ctx[5],
    				y: /*yKey*/ ctx[6],
    				z: /*zKey*/ ctx[7],
    				r: /*rKey*/ ctx[8],
    				xScale: /*xScale*/ ctx[11] == 'log'
    				? symlog()
    				: linear(),
    				yScale: /*yScale*/ ctx[12] == 'log'
    				? symlog()
    				: linear(),
    				zScale: ordinal(),
    				xDomain: /*xDom*/ ctx[43],
    				yDomain: /*$yDomain*/ ctx[45],
    				zDomain: /*zDomain*/ ctx[44],
    				zRange: /*colors*/ ctx[28],
    				rRange: Array.isArray(/*r*/ ctx[29])
    				? /*r*/ ctx[29]
    				: [/*r*/ ctx[29], /*r*/ ctx[29]],
    				data: /*data*/ ctx[1],
    				xPadding: [/*buffer*/ ctx[27], /*buffer*/ ctx[27]],
    				yPadding: /*yKey*/ ctx[6]
    				? [/*buffer*/ ctx[27], /*buffer*/ ctx[27]]
    				: null,
    				custom: {
    					type: 'scatter',
    					idKey: /*idKey*/ ctx[9],
    					labelKey: /*labelKey*/ ctx[10],
    					coords: /*coords*/ ctx[49],
    					colorSelect: /*colorSelect*/ ctx[37],
    					colorHover: /*colorHover*/ ctx[35],
    					colorHighlight: /*colorHighlight*/ ctx[39],
    					padding: 1,
    					animation: /*animation*/ ctx[3],
    					duration: /*duration*/ ctx[4]
    				},
    				$$slots: {
    					default: [
    						create_default_slot_1$3,
    						({ width }) => ({ 67: width }),
    						({ width }) => [0, 0, width ? 32 : 0]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block1 = /*legend*/ ctx[24] && /*zDomain*/ ctx[44] && create_if_block_1$7(ctx);
    	let if_block2 = /*footer*/ ctx[23] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (options_slot) options_slot.c();
    			t1 = space();
    			div = element("div");
    			create_component(layercake.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(div, "class", "chart-container svelte-1dnlmiu");

    			set_style(div, "height", typeof /*height*/ ctx[2] == 'number'
    			? /*height*/ ctx[2] + 'px'
    			: /*height*/ ctx[2]);

    			add_location(div, file$l, 113, 0, 3685);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);

    			if (options_slot) {
    				options_slot.m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(layercake, div, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*title*/ ctx[22]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*title*/ 4194304) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (options_slot) {
    				if (options_slot.p && (!current || dirty[1] & /*$$scope*/ 536870912)) {
    					update_slot_base(
    						options_slot,
    						options_slot_template,
    						ctx,
    						/*$$scope*/ ctx[60],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[60])
    						: get_slot_changes(options_slot_template, /*$$scope*/ ctx[60], dirty, get_options_slot_changes),
    						get_options_slot_context
    					);
    				}
    			}

    			const layercake_changes = {};
    			if (dirty[0] & /*padding*/ 67108864) layercake_changes.padding = /*padding*/ ctx[26];
    			if (dirty[0] & /*xKey*/ 32) layercake_changes.x = /*xKey*/ ctx[5];
    			if (dirty[0] & /*yKey*/ 64) layercake_changes.y = /*yKey*/ ctx[6];
    			if (dirty[0] & /*zKey*/ 128) layercake_changes.z = /*zKey*/ ctx[7];
    			if (dirty[0] & /*rKey*/ 256) layercake_changes.r = /*rKey*/ ctx[8];

    			if (dirty[0] & /*xScale*/ 2048) layercake_changes.xScale = /*xScale*/ ctx[11] == 'log'
    			? symlog()
    			: linear();

    			if (dirty[0] & /*yScale*/ 4096) layercake_changes.yScale = /*yScale*/ ctx[12] == 'log'
    			? symlog()
    			: linear();

    			if (dirty[1] & /*xDom*/ 4096) layercake_changes.xDomain = /*xDom*/ ctx[43];
    			if (dirty[1] & /*$yDomain*/ 16384) layercake_changes.yDomain = /*$yDomain*/ ctx[45];
    			if (dirty[1] & /*zDomain*/ 8192) layercake_changes.zDomain = /*zDomain*/ ctx[44];
    			if (dirty[0] & /*colors*/ 268435456) layercake_changes.zRange = /*colors*/ ctx[28];

    			if (dirty[0] & /*r*/ 536870912) layercake_changes.rRange = Array.isArray(/*r*/ ctx[29])
    			? /*r*/ ctx[29]
    			: [/*r*/ ctx[29], /*r*/ ctx[29]];

    			if (dirty[0] & /*data*/ 2) layercake_changes.data = /*data*/ ctx[1];
    			if (dirty[0] & /*buffer*/ 134217728) layercake_changes.xPadding = [/*buffer*/ ctx[27], /*buffer*/ ctx[27]];

    			if (dirty[0] & /*yKey, buffer*/ 134217792) layercake_changes.yPadding = /*yKey*/ ctx[6]
    			? [/*buffer*/ ctx[27], /*buffer*/ ctx[27]]
    			: null;

    			if (dirty[0] & /*idKey, labelKey, animation, duration*/ 1560 | dirty[1] & /*colorSelect, colorHover, colorHighlight*/ 336) layercake_changes.custom = {
    				type: 'scatter',
    				idKey: /*idKey*/ ctx[9],
    				labelKey: /*labelKey*/ ctx[10],
    				coords: /*coords*/ ctx[49],
    				colorSelect: /*colorSelect*/ ctx[37],
    				colorHover: /*colorHover*/ ctx[35],
    				colorHighlight: /*colorHighlight*/ ctx[39],
    				padding: 1,
    				animation: /*animation*/ ctx[3],
    				duration: /*duration*/ ctx[4]
    			};

    			if (dirty[0] & /*interactive, selected, yTicks, yFormatTick, textColor, tickColor, tickDashed, yAxis, yKey, xTicks, xFormatTick, snapTicks, xAxis*/ 1111482433 | dirty[1] & /*$$scope, hovered, placeLabel, select, highlighted, overlayFill, yPrefix, ySuffix, xPrefix, xSuffix*/ 536874671 | dirty[2] & /*width*/ 32) {
    				layercake_changes.$$scope = { dirty, ctx };
    			}

    			layercake.$set(layercake_changes);

    			if (!current || dirty[0] & /*height*/ 4) {
    				set_style(div, "height", typeof /*height*/ ctx[2] == 'number'
    				? /*height*/ ctx[2] + 'px'
    				: /*height*/ ctx[2]);
    			}

    			if (/*legend*/ ctx[24] && /*zDomain*/ ctx[44]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*legend*/ 16777216 | dirty[1] & /*zDomain*/ 8192) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*footer*/ ctx[23]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*footer*/ 8388608) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$a(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(options_slot, local);
    			transition_in(layercake.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(options_slot, local);
    			transition_out(layercake.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (options_slot) options_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(layercake);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function domGet(data, key, min, max) {
    	let vals = data.map(d => d[key]);

    	return [
    		min ? min : vals[0] ? Math.min(...vals) : -1,
    		max ? max : vals[0] ? Math.max(...vals) : 1
    	];
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let zDomain;
    	let $yDomain;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScatterChart', slots, ['options','back','svg','front']);
    	let { data } = $$props;
    	let { height = 250 } = $$props;
    	let { animation = false } = $$props;
    	let { duration = 800 } = $$props;
    	let { xKey = 'x' } = $$props;
    	let { yKey = null } = $$props;
    	let { zKey = null } = $$props;
    	let { rKey = null } = $$props;
    	let { idKey = xKey } = $$props;
    	let { labelKey = idKey } = $$props;
    	let { xScale = 'linear' } = $$props;
    	let { yScale = 'linear' } = $$props;
    	let { xFormatTick = d => d } = $$props;
    	let { yFormatTick = d => d } = $$props;
    	let { xMax = null } = $$props;
    	let { xMin = null } = $$props;
    	let { yMax = null } = $$props;
    	let { yMin = null } = $$props;
    	let { xAxis = true } = $$props;
    	let { yAxis = true } = $$props;
    	let { xTicks = 4 } = $$props;
    	let { yTicks = 4 } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { tickColor = '#ccc' } = $$props;
    	let { tickDashed = false } = $$props;
    	let { title = null } = $$props;
    	let { footer = null } = $$props;
    	let { legend = false } = $$props;
    	let { snapTicks = false } = $$props;
    	let { padding = { top: 0, bottom: 20, left: 35, right: 0 } } = $$props;
    	let { buffer = 5 } = $$props;
    	let { color = null } = $$props;

    	let { colors = color
    	? [color]
    	: [
    			'#3C388E',
    			'#DF0667',
    			'#00A3A6',
    			'#206095',
    			'#A8BD3A',
    			'#003C57',
    			'#27A0CC',
    			'#118C7B',
    			'#F66068',
    			'#746CB1',
    			'#22D0B6',
    			'lightgrey'
    		] } = $$props;

    	let { r = 4 } = $$props;
    	let { interactive = true } = $$props;
    	let { xPrefix = "" } = $$props;
    	let { xSuffix = "" } = $$props;
    	let { yPrefix = "" } = $$props;
    	let { ySuffix = "" } = $$props;
    	let { colorHover = 'orange' } = $$props;
    	let { select = false } = $$props;
    	let { selected = null } = $$props;
    	let { colorSelect = 'black' } = $$props;
    	let { highlighted = [] } = $$props;
    	let { colorHighlight = 'black' } = $$props;
    	let { overlayFill = false } = $$props;
    	let hover = true;
    	let hovered = null;
    	let labels = true;
    	let placeLabel = true;

    	function doHoverScatter(e) {
    		$$invalidate(41, hovered = e.detail.id);

    		if (hovered) {
    			$$invalidate(42, placeLabel = e.detail.data.unique);
    		}
    	}

    	const tweenOptions = { duration, easing: cubicInOut };
    	const coords = tweened(undefined, tweenOptions);
    	const distinct = (d, i, arr) => arr.indexOf(d) == i;

    	function xDomUpdate(data, key, min, max) {
    		let newDom = domGet(data, key, min, max);

    		if (newDom[0] != xDom[0] || newDom[1] != xDom[1]) {
    			xDomain.set(newDom);
    			$$invalidate(43, xDom = newDom);
    		}
    	}

    	function yDomUpdate(data, key, min, max) {
    		let newDom = key ? domGet(data, key, min, max) : yDom;

    		if (newDom[0] != yDom[0] || newDom[1] != yDom[1]) {
    			yDomain.set(newDom, { duration: animation ? duration : 0 });
    			yDom = newDom;
    		}
    	}

    	let xDom = domGet(data, xKey, xMin, xMax);
    	const xDomain = tweened(xDom, tweenOptions);
    	let yDom = domGet(data, yKey, yMin, yMax);
    	const yDomain = tweened(yDom, tweenOptions);
    	validate_store(yDomain, 'yDomain');
    	component_subscribe($$self, yDomain, value => $$invalidate(45, $yDomain = value));

    	const writable_props = [
    		'data',
    		'height',
    		'animation',
    		'duration',
    		'xKey',
    		'yKey',
    		'zKey',
    		'rKey',
    		'idKey',
    		'labelKey',
    		'xScale',
    		'yScale',
    		'xFormatTick',
    		'yFormatTick',
    		'xMax',
    		'xMin',
    		'yMax',
    		'yMin',
    		'xAxis',
    		'yAxis',
    		'xTicks',
    		'yTicks',
    		'textColor',
    		'tickColor',
    		'tickDashed',
    		'title',
    		'footer',
    		'legend',
    		'snapTicks',
    		'padding',
    		'buffer',
    		'color',
    		'colors',
    		'r',
    		'interactive',
    		'xPrefix',
    		'xSuffix',
    		'yPrefix',
    		'ySuffix',
    		'colorHover',
    		'select',
    		'selected',
    		'colorSelect',
    		'highlighted',
    		'colorHighlight',
    		'overlayFill'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScatterChart> was created with unknown prop '${key}'`);
    	});

    	function voronoi_selected_binding(value) {
    		selected = value;
    		$$invalidate(0, selected);
    	}

    	function voronoi_hovered_binding(value) {
    		hovered = value;
    		$$invalidate(41, hovered);
    	}

    	function select_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(3, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(4, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(5, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(6, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(7, zKey = $$props.zKey);
    		if ('rKey' in $$props) $$invalidate(8, rKey = $$props.rKey);
    		if ('idKey' in $$props) $$invalidate(9, idKey = $$props.idKey);
    		if ('labelKey' in $$props) $$invalidate(10, labelKey = $$props.labelKey);
    		if ('xScale' in $$props) $$invalidate(11, xScale = $$props.xScale);
    		if ('yScale' in $$props) $$invalidate(12, yScale = $$props.yScale);
    		if ('xFormatTick' in $$props) $$invalidate(13, xFormatTick = $$props.xFormatTick);
    		if ('yFormatTick' in $$props) $$invalidate(14, yFormatTick = $$props.yFormatTick);
    		if ('xMax' in $$props) $$invalidate(51, xMax = $$props.xMax);
    		if ('xMin' in $$props) $$invalidate(52, xMin = $$props.xMin);
    		if ('yMax' in $$props) $$invalidate(53, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(54, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(15, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(16, yAxis = $$props.yAxis);
    		if ('xTicks' in $$props) $$invalidate(17, xTicks = $$props.xTicks);
    		if ('yTicks' in $$props) $$invalidate(18, yTicks = $$props.yTicks);
    		if ('textColor' in $$props) $$invalidate(19, textColor = $$props.textColor);
    		if ('tickColor' in $$props) $$invalidate(20, tickColor = $$props.tickColor);
    		if ('tickDashed' in $$props) $$invalidate(21, tickDashed = $$props.tickDashed);
    		if ('title' in $$props) $$invalidate(22, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(23, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(24, legend = $$props.legend);
    		if ('snapTicks' in $$props) $$invalidate(25, snapTicks = $$props.snapTicks);
    		if ('padding' in $$props) $$invalidate(26, padding = $$props.padding);
    		if ('buffer' in $$props) $$invalidate(27, buffer = $$props.buffer);
    		if ('color' in $$props) $$invalidate(55, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(28, colors = $$props.colors);
    		if ('r' in $$props) $$invalidate(29, r = $$props.r);
    		if ('interactive' in $$props) $$invalidate(30, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(31, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(32, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(33, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(34, ySuffix = $$props.ySuffix);
    		if ('colorHover' in $$props) $$invalidate(35, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(36, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(37, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(38, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(39, colorHighlight = $$props.colorHighlight);
    		if ('overlayFill' in $$props) $$invalidate(40, overlayFill = $$props.overlayFill);
    		if ('$$scope' in $$props) $$invalidate(60, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		LayerCake,
    		Svg,
    		scaleOrdinal: ordinal,
    		scaleLinear: linear,
    		scaleSymlog: symlog,
    		tweened,
    		cubicInOut,
    		SetCoords,
    		Scatter: Scatter_svg,
    		Voronoi,
    		AxisX: AxisX$2,
    		AxisY: AxisY$2,
    		Legend: Legend$2,
    		Title,
    		Footer,
    		Labels,
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		rKey,
    		idKey,
    		labelKey,
    		xScale,
    		yScale,
    		xFormatTick,
    		yFormatTick,
    		xMax,
    		xMin,
    		yMax,
    		yMin,
    		xAxis,
    		yAxis,
    		xTicks,
    		yTicks,
    		textColor,
    		tickColor,
    		tickDashed,
    		title,
    		footer,
    		legend,
    		snapTicks,
    		padding,
    		buffer,
    		color,
    		colors,
    		r,
    		interactive,
    		xPrefix,
    		xSuffix,
    		yPrefix,
    		ySuffix,
    		colorHover,
    		select,
    		selected,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		overlayFill,
    		hover,
    		hovered,
    		labels,
    		placeLabel,
    		doHoverScatter,
    		tweenOptions,
    		coords,
    		distinct,
    		domGet,
    		xDomUpdate,
    		yDomUpdate,
    		xDom,
    		xDomain,
    		yDom,
    		yDomain,
    		zDomain,
    		$yDomain
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('animation' in $$props) $$invalidate(3, animation = $$props.animation);
    		if ('duration' in $$props) $$invalidate(4, duration = $$props.duration);
    		if ('xKey' in $$props) $$invalidate(5, xKey = $$props.xKey);
    		if ('yKey' in $$props) $$invalidate(6, yKey = $$props.yKey);
    		if ('zKey' in $$props) $$invalidate(7, zKey = $$props.zKey);
    		if ('rKey' in $$props) $$invalidate(8, rKey = $$props.rKey);
    		if ('idKey' in $$props) $$invalidate(9, idKey = $$props.idKey);
    		if ('labelKey' in $$props) $$invalidate(10, labelKey = $$props.labelKey);
    		if ('xScale' in $$props) $$invalidate(11, xScale = $$props.xScale);
    		if ('yScale' in $$props) $$invalidate(12, yScale = $$props.yScale);
    		if ('xFormatTick' in $$props) $$invalidate(13, xFormatTick = $$props.xFormatTick);
    		if ('yFormatTick' in $$props) $$invalidate(14, yFormatTick = $$props.yFormatTick);
    		if ('xMax' in $$props) $$invalidate(51, xMax = $$props.xMax);
    		if ('xMin' in $$props) $$invalidate(52, xMin = $$props.xMin);
    		if ('yMax' in $$props) $$invalidate(53, yMax = $$props.yMax);
    		if ('yMin' in $$props) $$invalidate(54, yMin = $$props.yMin);
    		if ('xAxis' in $$props) $$invalidate(15, xAxis = $$props.xAxis);
    		if ('yAxis' in $$props) $$invalidate(16, yAxis = $$props.yAxis);
    		if ('xTicks' in $$props) $$invalidate(17, xTicks = $$props.xTicks);
    		if ('yTicks' in $$props) $$invalidate(18, yTicks = $$props.yTicks);
    		if ('textColor' in $$props) $$invalidate(19, textColor = $$props.textColor);
    		if ('tickColor' in $$props) $$invalidate(20, tickColor = $$props.tickColor);
    		if ('tickDashed' in $$props) $$invalidate(21, tickDashed = $$props.tickDashed);
    		if ('title' in $$props) $$invalidate(22, title = $$props.title);
    		if ('footer' in $$props) $$invalidate(23, footer = $$props.footer);
    		if ('legend' in $$props) $$invalidate(24, legend = $$props.legend);
    		if ('snapTicks' in $$props) $$invalidate(25, snapTicks = $$props.snapTicks);
    		if ('padding' in $$props) $$invalidate(26, padding = $$props.padding);
    		if ('buffer' in $$props) $$invalidate(27, buffer = $$props.buffer);
    		if ('color' in $$props) $$invalidate(55, color = $$props.color);
    		if ('colors' in $$props) $$invalidate(28, colors = $$props.colors);
    		if ('r' in $$props) $$invalidate(29, r = $$props.r);
    		if ('interactive' in $$props) $$invalidate(30, interactive = $$props.interactive);
    		if ('xPrefix' in $$props) $$invalidate(31, xPrefix = $$props.xPrefix);
    		if ('xSuffix' in $$props) $$invalidate(32, xSuffix = $$props.xSuffix);
    		if ('yPrefix' in $$props) $$invalidate(33, yPrefix = $$props.yPrefix);
    		if ('ySuffix' in $$props) $$invalidate(34, ySuffix = $$props.ySuffix);
    		if ('colorHover' in $$props) $$invalidate(35, colorHover = $$props.colorHover);
    		if ('select' in $$props) $$invalidate(36, select = $$props.select);
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('colorSelect' in $$props) $$invalidate(37, colorSelect = $$props.colorSelect);
    		if ('highlighted' in $$props) $$invalidate(38, highlighted = $$props.highlighted);
    		if ('colorHighlight' in $$props) $$invalidate(39, colorHighlight = $$props.colorHighlight);
    		if ('overlayFill' in $$props) $$invalidate(40, overlayFill = $$props.overlayFill);
    		if ('hover' in $$props) $$invalidate(46, hover = $$props.hover);
    		if ('hovered' in $$props) $$invalidate(41, hovered = $$props.hovered);
    		if ('labels' in $$props) $$invalidate(47, labels = $$props.labels);
    		if ('placeLabel' in $$props) $$invalidate(42, placeLabel = $$props.placeLabel);
    		if ('xDom' in $$props) $$invalidate(43, xDom = $$props.xDom);
    		if ('yDom' in $$props) yDom = $$props.yDom;
    		if ('zDomain' in $$props) $$invalidate(44, zDomain = $$props.zDomain);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*data, xKey*/ 34 | $$self.$$.dirty[1] & /*xMin, xMax*/ 3145728) {
    			xDomUpdate(data, xKey, xMin, xMax);
    		}

    		if ($$self.$$.dirty[0] & /*data, yKey*/ 66 | $$self.$$.dirty[1] & /*yMin, yMax*/ 12582912) {
    			yDomUpdate(data, yKey, yMin, yMax);
    		}

    		if ($$self.$$.dirty[0] & /*zKey, data*/ 130) {
    			$$invalidate(44, zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null);
    		}
    	};

    	return [
    		selected,
    		data,
    		height,
    		animation,
    		duration,
    		xKey,
    		yKey,
    		zKey,
    		rKey,
    		idKey,
    		labelKey,
    		xScale,
    		yScale,
    		xFormatTick,
    		yFormatTick,
    		xAxis,
    		yAxis,
    		xTicks,
    		yTicks,
    		textColor,
    		tickColor,
    		tickDashed,
    		title,
    		footer,
    		legend,
    		snapTicks,
    		padding,
    		buffer,
    		colors,
    		r,
    		interactive,
    		xPrefix,
    		xSuffix,
    		yPrefix,
    		ySuffix,
    		colorHover,
    		select,
    		colorSelect,
    		highlighted,
    		colorHighlight,
    		overlayFill,
    		hovered,
    		placeLabel,
    		xDom,
    		zDomain,
    		$yDomain,
    		hover,
    		labels,
    		doHoverScatter,
    		coords,
    		yDomain,
    		xMax,
    		xMin,
    		yMax,
    		yMin,
    		color,
    		slots,
    		voronoi_selected_binding,
    		voronoi_hovered_binding,
    		select_handler,
    		$$scope
    	];
    }

    class ScatterChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$o,
    			create_fragment$o,
    			safe_not_equal,
    			{
    				data: 1,
    				height: 2,
    				animation: 3,
    				duration: 4,
    				xKey: 5,
    				yKey: 6,
    				zKey: 7,
    				rKey: 8,
    				idKey: 9,
    				labelKey: 10,
    				xScale: 11,
    				yScale: 12,
    				xFormatTick: 13,
    				yFormatTick: 14,
    				xMax: 51,
    				xMin: 52,
    				yMax: 53,
    				yMin: 54,
    				xAxis: 15,
    				yAxis: 16,
    				xTicks: 17,
    				yTicks: 18,
    				textColor: 19,
    				tickColor: 20,
    				tickDashed: 21,
    				title: 22,
    				footer: 23,
    				legend: 24,
    				snapTicks: 25,
    				padding: 26,
    				buffer: 27,
    				color: 55,
    				colors: 28,
    				r: 29,
    				interactive: 30,
    				xPrefix: 31,
    				xSuffix: 32,
    				yPrefix: 33,
    				ySuffix: 34,
    				colorHover: 35,
    				select: 36,
    				selected: 0,
    				colorSelect: 37,
    				highlighted: 38,
    				colorHighlight: 39,
    				overlayFill: 40
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScatterChart",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[1] === undefined && !('data' in props)) {
    			console.warn("<ScatterChart> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		return this.$$.ctx[1];
    	}

    	set data(data) {
    		this.$$set({ data });
    		flush();
    	}

    	get height() {
    		return this.$$.ctx[2];
    	}

    	set height(height) {
    		this.$$set({ height });
    		flush();
    	}

    	get animation() {
    		return this.$$.ctx[3];
    	}

    	set animation(animation) {
    		this.$$set({ animation });
    		flush();
    	}

    	get duration() {
    		return this.$$.ctx[4];
    	}

    	set duration(duration) {
    		this.$$set({ duration });
    		flush();
    	}

    	get xKey() {
    		return this.$$.ctx[5];
    	}

    	set xKey(xKey) {
    		this.$$set({ xKey });
    		flush();
    	}

    	get yKey() {
    		return this.$$.ctx[6];
    	}

    	set yKey(yKey) {
    		this.$$set({ yKey });
    		flush();
    	}

    	get zKey() {
    		return this.$$.ctx[7];
    	}

    	set zKey(zKey) {
    		this.$$set({ zKey });
    		flush();
    	}

    	get rKey() {
    		return this.$$.ctx[8];
    	}

    	set rKey(rKey) {
    		this.$$set({ rKey });
    		flush();
    	}

    	get idKey() {
    		return this.$$.ctx[9];
    	}

    	set idKey(idKey) {
    		this.$$set({ idKey });
    		flush();
    	}

    	get labelKey() {
    		return this.$$.ctx[10];
    	}

    	set labelKey(labelKey) {
    		this.$$set({ labelKey });
    		flush();
    	}

    	get xScale() {
    		return this.$$.ctx[11];
    	}

    	set xScale(xScale) {
    		this.$$set({ xScale });
    		flush();
    	}

    	get yScale() {
    		return this.$$.ctx[12];
    	}

    	set yScale(yScale) {
    		this.$$set({ yScale });
    		flush();
    	}

    	get xFormatTick() {
    		return this.$$.ctx[13];
    	}

    	set xFormatTick(xFormatTick) {
    		this.$$set({ xFormatTick });
    		flush();
    	}

    	get yFormatTick() {
    		return this.$$.ctx[14];
    	}

    	set yFormatTick(yFormatTick) {
    		this.$$set({ yFormatTick });
    		flush();
    	}

    	get xMax() {
    		return this.$$.ctx[51];
    	}

    	set xMax(xMax) {
    		this.$$set({ xMax });
    		flush();
    	}

    	get xMin() {
    		return this.$$.ctx[52];
    	}

    	set xMin(xMin) {
    		this.$$set({ xMin });
    		flush();
    	}

    	get yMax() {
    		return this.$$.ctx[53];
    	}

    	set yMax(yMax) {
    		this.$$set({ yMax });
    		flush();
    	}

    	get yMin() {
    		return this.$$.ctx[54];
    	}

    	set yMin(yMin) {
    		this.$$set({ yMin });
    		flush();
    	}

    	get xAxis() {
    		return this.$$.ctx[15];
    	}

    	set xAxis(xAxis) {
    		this.$$set({ xAxis });
    		flush();
    	}

    	get yAxis() {
    		return this.$$.ctx[16];
    	}

    	set yAxis(yAxis) {
    		this.$$set({ yAxis });
    		flush();
    	}

    	get xTicks() {
    		return this.$$.ctx[17];
    	}

    	set xTicks(xTicks) {
    		this.$$set({ xTicks });
    		flush();
    	}

    	get yTicks() {
    		return this.$$.ctx[18];
    	}

    	set yTicks(yTicks) {
    		this.$$set({ yTicks });
    		flush();
    	}

    	get textColor() {
    		return this.$$.ctx[19];
    	}

    	set textColor(textColor) {
    		this.$$set({ textColor });
    		flush();
    	}

    	get tickColor() {
    		return this.$$.ctx[20];
    	}

    	set tickColor(tickColor) {
    		this.$$set({ tickColor });
    		flush();
    	}

    	get tickDashed() {
    		return this.$$.ctx[21];
    	}

    	set tickDashed(tickDashed) {
    		this.$$set({ tickDashed });
    		flush();
    	}

    	get title() {
    		return this.$$.ctx[22];
    	}

    	set title(title) {
    		this.$$set({ title });
    		flush();
    	}

    	get footer() {
    		return this.$$.ctx[23];
    	}

    	set footer(footer) {
    		this.$$set({ footer });
    		flush();
    	}

    	get legend() {
    		return this.$$.ctx[24];
    	}

    	set legend(legend) {
    		this.$$set({ legend });
    		flush();
    	}

    	get snapTicks() {
    		return this.$$.ctx[25];
    	}

    	set snapTicks(snapTicks) {
    		this.$$set({ snapTicks });
    		flush();
    	}

    	get padding() {
    		return this.$$.ctx[26];
    	}

    	set padding(padding) {
    		this.$$set({ padding });
    		flush();
    	}

    	get buffer() {
    		return this.$$.ctx[27];
    	}

    	set buffer(buffer) {
    		this.$$set({ buffer });
    		flush();
    	}

    	get color() {
    		return this.$$.ctx[55];
    	}

    	set color(color) {
    		this.$$set({ color });
    		flush();
    	}

    	get colors() {
    		return this.$$.ctx[28];
    	}

    	set colors(colors) {
    		this.$$set({ colors });
    		flush();
    	}

    	get r() {
    		return this.$$.ctx[29];
    	}

    	set r(r) {
    		this.$$set({ r });
    		flush();
    	}

    	get interactive() {
    		return this.$$.ctx[30];
    	}

    	set interactive(interactive) {
    		this.$$set({ interactive });
    		flush();
    	}

    	get xPrefix() {
    		return this.$$.ctx[31];
    	}

    	set xPrefix(xPrefix) {
    		this.$$set({ xPrefix });
    		flush();
    	}

    	get xSuffix() {
    		return this.$$.ctx[32];
    	}

    	set xSuffix(xSuffix) {
    		this.$$set({ xSuffix });
    		flush();
    	}

    	get yPrefix() {
    		return this.$$.ctx[33];
    	}

    	set yPrefix(yPrefix) {
    		this.$$set({ yPrefix });
    		flush();
    	}

    	get ySuffix() {
    		return this.$$.ctx[34];
    	}

    	set ySuffix(ySuffix) {
    		this.$$set({ ySuffix });
    		flush();
    	}

    	get colorHover() {
    		return this.$$.ctx[35];
    	}

    	set colorHover(colorHover) {
    		this.$$set({ colorHover });
    		flush();
    	}

    	get select() {
    		return this.$$.ctx[36];
    	}

    	set select(select) {
    		this.$$set({ select });
    		flush();
    	}

    	get selected() {
    		return this.$$.ctx[0];
    	}

    	set selected(selected) {
    		this.$$set({ selected });
    		flush();
    	}

    	get colorSelect() {
    		return this.$$.ctx[37];
    	}

    	set colorSelect(colorSelect) {
    		this.$$set({ colorSelect });
    		flush();
    	}

    	get highlighted() {
    		return this.$$.ctx[38];
    	}

    	set highlighted(highlighted) {
    		this.$$set({ highlighted });
    		flush();
    	}

    	get colorHighlight() {
    		return this.$$.ctx[39];
    	}

    	set colorHighlight(colorHighlight) {
    		this.$$set({ colorHighlight });
    		flush();
    	}

    	get overlayFill() {
    		return this.$$.ctx[40];
    	}

    	set overlayFill(overlayFill) {
    		this.$$set({ overlayFill });
    		flush();
    	}
    }

    /* src/charts/small-multiple/components/AxisY.svelte generated by Svelte v3.43.1 */
    const file$k = "src/charts/small-multiple/components/AxisY.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (29:0) {#if nu == 0}
    function create_if_block$9(ctx) {
    	let g;
    	let g_transform_value;
    	let each_value = /*tickVals*/ ctx[15];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "axis y-axis");
    			attr_dev(g, "transform", g_transform_value = "translate(" + -/*$padding*/ ctx[16].left + ", 0)");
    			add_location(g, file$k, 29, 0, 687);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tickVals, $xRange, isBandwidth, $padding, $yScale, xTick, yTick, dxTick, dyTick, textColor, textAnchor, suffix, formatTick, prefix, lineColor, solid, gridlines*/ 258047) {
    				each_value = /*tickVals*/ ctx[15];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$padding*/ 65536 && g_transform_value !== (g_transform_value = "translate(" + -/*$padding*/ ctx[16].left + ", 0)")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(29:0) {#if nu == 0}",
    		ctx
    	});

    	return block;
    }

    // (33:3) {#if gridlines !== false}
    function create_if_block_2$4(ctx) {
    	let line;
    	let line_y__value;
    	let line_y__value_1;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "x2", "100%");

    			attr_dev(line, "y1", line_y__value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			attr_dev(line, "y2", line_y__value_1 = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0));

    			attr_dev(line, "stroke", /*lineColor*/ ctx[9]);
    			attr_dev(line, "class", "svelte-1ypvook");
    			toggle_class(line, "baseline", /*solid*/ ctx[11]);
    			add_location(line, file$k, 33, 4, 936);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24608 && line_y__value !== (line_y__value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24608 && line_y__value_1 !== (line_y__value_1 = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*lineColor*/ 512) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[9]);
    			}

    			if (dirty & /*solid*/ 2048) {
    				toggle_class(line, "baseline", /*solid*/ ctx[11]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(33:3) {#if gridlines !== false}",
    		ctx
    	});

    	return block;
    }

    // (52:4) {:else}
    function create_else_block$5(ctx) {
    	let t_value = /*formatTick*/ ctx[3](/*tick*/ ctx[23]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formatTick, tickVals*/ 32776 && t_value !== (t_value = /*formatTick*/ ctx[3](/*tick*/ ctx[23]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(52:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (50:4) {#if i == tickVals.length - 1}
    function create_if_block_1$6(ctx) {
    	let t0;
    	let t1_value = /*formatTick*/ ctx[3](/*tick*/ ctx[23]) + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(/*prefix*/ ctx[0]);
    			t1 = text(t1_value);
    			t2 = text(/*suffix*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 1) set_data_dev(t0, /*prefix*/ ctx[0]);
    			if (dirty & /*formatTick, tickVals*/ 32776 && t1_value !== (t1_value = /*formatTick*/ ctx[3](/*tick*/ ctx[23]) + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*suffix*/ 2) set_data_dev(t2, /*suffix*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(50:4) {#if i == tickVals.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (31:1) {#each tickVals as tick, i}
    function create_each_block$b(ctx) {
    	let g;
    	let text_1;
    	let text_1_x_value;
    	let text_1_y_value;
    	let text_1_dx_value;
    	let text_1_dy_value;
    	let g_class_value;
    	let g_transform_value;
    	let if_block0 = /*gridlines*/ ctx[2] !== false && create_if_block_2$4(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*i*/ ctx[25] == /*tickVals*/ ctx[15].length - 1) return create_if_block_1$6;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			text_1 = svg_element("text");
    			if_block1.c();
    			attr_dev(text_1, "x", text_1_x_value = /*xTick*/ ctx[4] - 10);

    			attr_dev(text_1, "y", text_1_y_value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0) - 3);

    			attr_dev(text_1, "dx", text_1_dx_value = /*isBandwidth*/ ctx[13] ? 3 : /*dxTick*/ ctx[6]);
    			attr_dev(text_1, "dy", text_1_dy_value = /*isBandwidth*/ ctx[13] ? 4 : /*dyTick*/ ctx[7]);
    			attr_dev(text_1, "fill", /*textColor*/ ctx[10]);
    			set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[13] ? 'end' : /*textAnchor*/ ctx[8]);
    			add_location(text_1, file$k, 41, 3, 1168);
    			attr_dev(g, "class", g_class_value = "tick tick-" + /*tick*/ ctx[23] + " svelte-1ypvook");
    			attr_dev(g, "transform", g_transform_value = "translate(" + (/*$xRange*/ ctx[17][0] + (/*isBandwidth*/ ctx[13] ? /*$padding*/ ctx[16].left : 0)) + ", " + /*$yScale*/ ctx[14](/*tick*/ ctx[23]) + ")");
    			add_location(g, file$k, 31, 2, 785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, text_1);
    			if_block1.m(text_1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gridlines*/ ctx[2] !== false) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					if_block0.m(g, text_1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(text_1, null);
    				}
    			}

    			if (dirty & /*xTick*/ 16 && text_1_x_value !== (text_1_x_value = /*xTick*/ ctx[4] - 10)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 24608 && text_1_y_value !== (text_1_y_value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[13]
    			? /*$yScale*/ ctx[14].bandwidth() / 2
    			: 0) - 3)) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*isBandwidth, dxTick*/ 8256 && text_1_dx_value !== (text_1_dx_value = /*isBandwidth*/ ctx[13] ? 3 : /*dxTick*/ ctx[6])) {
    				attr_dev(text_1, "dx", text_1_dx_value);
    			}

    			if (dirty & /*isBandwidth, dyTick*/ 8320 && text_1_dy_value !== (text_1_dy_value = /*isBandwidth*/ ctx[13] ? 4 : /*dyTick*/ ctx[7])) {
    				attr_dev(text_1, "dy", text_1_dy_value);
    			}

    			if (dirty & /*textColor*/ 1024) {
    				attr_dev(text_1, "fill", /*textColor*/ ctx[10]);
    			}

    			if (dirty & /*isBandwidth, textAnchor*/ 8448) {
    				set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[13] ? 'end' : /*textAnchor*/ ctx[8]);
    			}

    			if (dirty & /*tickVals*/ 32768 && g_class_value !== (g_class_value = "tick tick-" + /*tick*/ ctx[23] + " svelte-1ypvook")) {
    				attr_dev(g, "class", g_class_value);
    			}

    			if (dirty & /*$xRange, isBandwidth, $padding, $yScale, tickVals*/ 253952 && g_transform_value !== (g_transform_value = "translate(" + (/*$xRange*/ ctx[17][0] + (/*isBandwidth*/ ctx[13] ? /*$padding*/ ctx[16].left : 0)) + ", " + /*$yScale*/ ctx[14](/*tick*/ ctx[23]) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(31:1) {#each tickVals as tick, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let if_block_anchor;
    	let if_block = /*nu*/ ctx[12] == 0 && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*nu*/ ctx[12] == 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $yScale;
    	let $padding;
    	let $xRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisY', slots, []);
    	const { padding, xRange, xScale, yScale } = getContext('LayerCake');
    	validate_store(padding, 'padding');
    	component_subscribe($$self, padding, value => $$invalidate(16, $padding = value));
    	validate_store(xRange, 'xRange');
    	component_subscribe($$self, xRange, value => $$invalidate(17, $xRange = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(14, $yScale = value));
    	let { ticks = 4 } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;
    	let { gridlines = false } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { xTick = 0 } = $$props;
    	let { yTick = 0 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = -4 } = $$props;
    	let { textAnchor = 'start' } = $$props;
    	let { lineColor = '#aaa' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { solid = false } = $$props;
    	let { nu } = $$props;

    	const writable_props = [
    		'ticks',
    		'prefix',
    		'suffix',
    		'gridlines',
    		'formatTick',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'textAnchor',
    		'lineColor',
    		'textColor',
    		'solid',
    		'nu'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisY> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ticks' in $$props) $$invalidate(21, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(0, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(1, suffix = $$props.suffix);
    		if ('gridlines' in $$props) $$invalidate(2, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(3, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(4, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(5, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(6, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(7, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(8, textAnchor = $$props.textAnchor);
    		if ('lineColor' in $$props) $$invalidate(9, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(10, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(11, solid = $$props.solid);
    		if ('nu' in $$props) $$invalidate(12, nu = $$props.nu);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		padding,
    		xRange,
    		xScale,
    		yScale,
    		ticks,
    		prefix,
    		suffix,
    		gridlines,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		lineColor,
    		textColor,
    		solid,
    		nu,
    		isBandwidth,
    		tickVals,
    		$yScale,
    		$padding,
    		$xRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('ticks' in $$props) $$invalidate(21, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(0, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(1, suffix = $$props.suffix);
    		if ('gridlines' in $$props) $$invalidate(2, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(3, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(4, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(5, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(6, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(7, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(8, textAnchor = $$props.textAnchor);
    		if ('lineColor' in $$props) $$invalidate(9, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(10, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(11, solid = $$props.solid);
    		if ('nu' in $$props) $$invalidate(12, nu = $$props.nu);
    		if ('isBandwidth' in $$props) $$invalidate(13, isBandwidth = $$props.isBandwidth);
    		if ('tickVals' in $$props) $$invalidate(15, tickVals = $$props.tickVals);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$yScale*/ 16384) {
    			$$invalidate(13, isBandwidth = typeof $yScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $yScale*/ 2121728) {
    			$$invalidate(15, tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth ? $yScale.domain() : $yScale.ticks(ticks));
    		}
    	};

    	return [
    		prefix,
    		suffix,
    		gridlines,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		lineColor,
    		textColor,
    		solid,
    		nu,
    		isBandwidth,
    		$yScale,
    		tickVals,
    		$padding,
    		$xRange,
    		padding,
    		xRange,
    		yScale,
    		ticks
    	];
    }

    class AxisY$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			ticks: 21,
    			prefix: 0,
    			suffix: 1,
    			gridlines: 2,
    			formatTick: 3,
    			xTick: 4,
    			yTick: 5,
    			dxTick: 6,
    			dyTick: 7,
    			textAnchor: 8,
    			lineColor: 9,
    			textColor: 10,
    			solid: 11,
    			nu: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisY",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*nu*/ ctx[12] === undefined && !('nu' in props)) {
    			console.warn("<AxisY> was created without expected prop 'nu'");
    		}
    	}

    	get ticks() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gridlines() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textAnchor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textAnchor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lineColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nu() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nu(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/AxisX.svelte generated by Svelte v3.43.1 */
    const file$j = "src/charts/small-multiple/components/AxisX.svelte";

    // (56:0) {#if baseline === true}
    function create_if_block$8(ctx) {
    	let line;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "baseline svelte-ej8ad5");
    			attr_dev(line, "y1", /*$height*/ ctx[9]);
    			attr_dev(line, "y2", "0");
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", "0");
    			attr_dev(line, "stroke", /*lineColor*/ ctx[5]);
    			add_location(line, file$j, 56, 2, 1432);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$height*/ 512) {
    				attr_dev(line, "y1", /*$height*/ ctx[9]);
    			}

    			if (dirty & /*lineColor*/ 32) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[5]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(56:0) {#if baseline === true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let g1;
    	let g0;
    	let line;
    	let line_y__value;
    	let line_y__value_1;
    	let text_1;
    	let t;
    	let text_1_x_value;
    	let text_1_dx_value;
    	let g0_transform_value;
    	let if_block = /*baseline*/ ctx[0] === true && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			g1 = svg_element("g");
    			g0 = svg_element("g");
    			line = svg_element("line");
    			text_1 = svg_element("text");
    			t = text("15%\n\t");
    			if (if_block) if_block.c();
    			attr_dev(line, "y1", line_y__value = /*$height*/ ctx[9] * -1);
    			attr_dev(line, "y2", line_y__value_1 = /*$height*/ ctx[9] * -1 + /*$height*/ ctx[9]);
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", "0");
    			attr_dev(line, "stroke", /*lineColor*/ ctx[5]);
    			attr_dev(line, "class", "svelte-ej8ad5");
    			toggle_class(line, "baseline", /*solid*/ ctx[6]);
    			add_location(line, file$j, 44, 1, 1014);

    			attr_dev(text_1, "x", text_1_x_value = /*xTick*/ ctx[1] || /*isBandwidth*/ ctx[7]
    			? /*$xScale*/ ctx[8].bandwidth() / 2
    			: 0);

    			attr_dev(text_1, "y", /*yTick*/ ctx[2]);

    			attr_dev(text_1, "dx", text_1_dx_value = /*textAnchor*/ ctx[12](15) == 'start'
    			? /*dxTick*/ ctx[3] - 2
    			: /*textAnchor*/ ctx[12](15) == 'end'
    				? /*dxTick*/ ctx[3] + 2
    				: /*dxTick*/ ctx[3]);

    			attr_dev(text_1, "dy", /*dyTick*/ ctx[4]);
    			attr_dev(text_1, "text-anchor", /*textAnchor*/ ctx[12](15));
    			attr_dev(text_1, "fill", /*lineColor*/ ctx[5]);
    			add_location(text_1, file$j, 45, 1, 1139);
    			attr_dev(g0, "class", "tick svelte-ej8ad5");
    			attr_dev(g0, "transform", g0_transform_value = "translate(" + /*$xScale*/ ctx[8](15) + "," + /*$height*/ ctx[9] + ")");
    			add_location(g0, file$j, 43, 0, 949);
    			attr_dev(g1, "class", "axis x-axis");
    			add_location(g1, file$j, 42, 0, 925);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g1, anchor);
    			append_dev(g1, g0);
    			append_dev(g0, line);
    			append_dev(g0, text_1);
    			append_dev(text_1, t);
    			if (if_block) if_block.m(g1, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$height*/ 512 && line_y__value !== (line_y__value = /*$height*/ ctx[9] * -1)) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*$height*/ 512 && line_y__value_1 !== (line_y__value_1 = /*$height*/ ctx[9] * -1 + /*$height*/ ctx[9])) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*lineColor*/ 32) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[5]);
    			}

    			if (dirty & /*solid*/ 64) {
    				toggle_class(line, "baseline", /*solid*/ ctx[6]);
    			}

    			if (dirty & /*xTick, isBandwidth, $xScale*/ 386 && text_1_x_value !== (text_1_x_value = /*xTick*/ ctx[1] || /*isBandwidth*/ ctx[7]
    			? /*$xScale*/ ctx[8].bandwidth() / 2
    			: 0)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*yTick*/ 4) {
    				attr_dev(text_1, "y", /*yTick*/ ctx[2]);
    			}

    			if (dirty & /*dxTick*/ 8 && text_1_dx_value !== (text_1_dx_value = /*textAnchor*/ ctx[12](15) == 'start'
    			? /*dxTick*/ ctx[3] - 2
    			: /*textAnchor*/ ctx[12](15) == 'end'
    				? /*dxTick*/ ctx[3] + 2
    				: /*dxTick*/ ctx[3])) {
    				attr_dev(text_1, "dx", text_1_dx_value);
    			}

    			if (dirty & /*dyTick*/ 16) {
    				attr_dev(text_1, "dy", /*dyTick*/ ctx[4]);
    			}

    			if (dirty & /*lineColor*/ 32) {
    				attr_dev(text_1, "fill", /*lineColor*/ ctx[5]);
    			}

    			if (dirty & /*$xScale, $height*/ 768 && g0_transform_value !== (g0_transform_value = "translate(" + /*$xScale*/ ctx[8](15) + "," + /*$height*/ ctx[9] + ")")) {
    				attr_dev(g0, "transform", g0_transform_value);
    			}

    			if (/*baseline*/ ctx[0] === true) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					if_block.m(g1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $xScale;
    	let $height;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisX', slots, []);
    	const { data, width, height, xScale, yScale, yRange } = getContext('LayerCake');
    	validate_store(height, 'height');
    	component_subscribe($$self, height, value => $$invalidate(9, $height = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(8, $xScale = value));
    	let { gridlines = true } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { baseline = false } = $$props;
    	let { flipped = false } = $$props;
    	let { snapTicks = false } = $$props;
    	let { ticks = undefined } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;
    	let { xTick = undefined } = $$props;
    	let { yTick = 15 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = 0 } = $$props;
    	let { lineColor = '#aaa' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { solid = false } = $$props;

    	function textAnchor(i) {
    		if (snapTicks === true) {
    			if (i === 0) {
    				return 'start';
    			}

    			if (i === tickVals.length - 1) {
    				return 'end';
    			}
    		}

    		return 'middle';
    	}

    	const writable_props = [
    		'gridlines',
    		'formatTick',
    		'baseline',
    		'flipped',
    		'snapTicks',
    		'ticks',
    		'prefix',
    		'suffix',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'lineColor',
    		'textColor',
    		'solid'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisX> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('gridlines' in $$props) $$invalidate(13, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(14, formatTick = $$props.formatTick);
    		if ('baseline' in $$props) $$invalidate(0, baseline = $$props.baseline);
    		if ('flipped' in $$props) $$invalidate(15, flipped = $$props.flipped);
    		if ('snapTicks' in $$props) $$invalidate(16, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(17, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(18, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(19, suffix = $$props.suffix);
    		if ('xTick' in $$props) $$invalidate(1, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(2, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(3, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(4, dyTick = $$props.dyTick);
    		if ('lineColor' in $$props) $$invalidate(5, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(20, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(6, solid = $$props.solid);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		width,
    		height,
    		xScale,
    		yScale,
    		yRange,
    		gridlines,
    		formatTick,
    		baseline,
    		flipped,
    		snapTicks,
    		ticks,
    		prefix,
    		suffix,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		lineColor,
    		textColor,
    		solid,
    		textAnchor,
    		tickVals,
    		isBandwidth,
    		$xScale,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ('gridlines' in $$props) $$invalidate(13, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(14, formatTick = $$props.formatTick);
    		if ('baseline' in $$props) $$invalidate(0, baseline = $$props.baseline);
    		if ('flipped' in $$props) $$invalidate(15, flipped = $$props.flipped);
    		if ('snapTicks' in $$props) $$invalidate(16, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(17, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(18, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(19, suffix = $$props.suffix);
    		if ('xTick' in $$props) $$invalidate(1, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(2, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(3, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(4, dyTick = $$props.dyTick);
    		if ('lineColor' in $$props) $$invalidate(5, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(20, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(6, solid = $$props.solid);
    		if ('tickVals' in $$props) tickVals = $$props.tickVals;
    		if ('isBandwidth' in $$props) $$invalidate(7, isBandwidth = $$props.isBandwidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$xScale*/ 256) {
    			$$invalidate(7, isBandwidth = typeof $xScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $xScale*/ 131456) {
    			tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth ? $xScale.domain() : $xScale.ticks(ticks);
    		}
    	};

    	return [
    		baseline,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		lineColor,
    		solid,
    		isBandwidth,
    		$xScale,
    		$height,
    		height,
    		xScale,
    		textAnchor,
    		gridlines,
    		formatTick,
    		flipped,
    		snapTicks,
    		ticks,
    		prefix,
    		suffix,
    		textColor
    	];
    }

    class AxisX$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			gridlines: 13,
    			formatTick: 14,
    			baseline: 0,
    			flipped: 15,
    			snapTicks: 16,
    			ticks: 17,
    			prefix: 18,
    			suffix: 19,
    			xTick: 1,
    			yTick: 2,
    			dxTick: 3,
    			dyTick: 4,
    			lineColor: 5,
    			textColor: 20,
    			solid: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisX",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get gridlines() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseline() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseline(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flipped() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flipped(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get snapTicks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set snapTicks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lineColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/HeadLabel.svelte generated by Svelte v3.43.1 */
    const file$i = "src/charts/small-multiple/components/HeadLabel.svelte";

    function create_fragment$l(ctx) {
    	let rect;
    	let t0;
    	let foreignObject;
    	let div;
    	let t1_value = /*labels*/ ctx[0][/*nu*/ ctx[1]] + "";
    	let t1;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			t0 = space();
    			foreignObject = svg_element("foreignObject");
    			div = element("div");
    			t1 = text(t1_value);
    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "140");
    			attr_dev(rect, "height", "20");
    			attr_dev(rect, "fill", "none");
    			add_location(rect, file$i, 26, 0, 410);
    			set_style(div, "position", "absolute");
    			set_style(div, "bottom", "0");
    			attr_dev(div, "class", "svelte-16861pb");
    			add_location(div, file$i, 29, 4, 525);
    			attr_dev(foreignObject, "x", "5");
    			attr_dev(foreignObject, "y", "-50");
    			attr_dev(foreignObject, "width", "100");
    			attr_dev(foreignObject, "height", "40");
    			add_location(foreignObject, file$i, 28, 0, 467);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, foreignObject, anchor);
    			append_dev(foreignObject, div);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*labels, nu*/ 3 && t1_value !== (t1_value = /*labels*/ ctx[0][/*nu*/ ctx[1]] + "")) set_data_dev(t1, t1_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(foreignObject);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeadLabel', slots, []);
    	let { labels } = $$props;
    	let { nu } = $$props;
    	const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');
    	let thisLabel = labels[nu].split(" ");
    	const writable_props = ['labels', 'nu'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeadLabel> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('labels' in $$props) $$invalidate(0, labels = $$props.labels);
    		if ('nu' in $$props) $$invalidate(1, nu = $$props.nu);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		labels,
    		nu,
    		data,
    		xGet,
    		yGet,
    		xScale,
    		yScale,
    		thisLabel
    	});

    	$$self.$inject_state = $$props => {
    		if ('labels' in $$props) $$invalidate(0, labels = $$props.labels);
    		if ('nu' in $$props) $$invalidate(1, nu = $$props.nu);
    		if ('thisLabel' in $$props) thisLabel = $$props.thisLabel;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [labels, nu];
    }

    class HeadLabel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { labels: 0, nu: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeadLabel",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*labels*/ ctx[0] === undefined && !('labels' in props)) {
    			console.warn("<HeadLabel> was created without expected prop 'labels'");
    		}

    		if (/*nu*/ ctx[1] === undefined && !('nu' in props)) {
    			console.warn("<HeadLabel> was created without expected prop 'nu'");
    		}
    	}

    	get labels() {
    		throw new Error("<HeadLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<HeadLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nu() {
    		throw new Error("<HeadLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nu(value) {
    		throw new Error("<HeadLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/LabelsAge.svelte generated by Svelte v3.43.1 */
    const file$h = "src/charts/small-multiple/components/LabelsAge.svelte";

    // (9:0) {#if ageLabel.detail}
    function create_if_block$7(ctx) {
    	let if_block_anchor;
    	let if_block = /*ageLabel*/ ctx[0].detail.data && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*ageLabel*/ ctx[0].detail.data) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(9:0) {#if ageLabel.detail}",
    		ctx
    	});

    	return block;
    }

    // (10:0) {#if ageLabel.detail.data}
    function create_if_block_1$5(ctx) {
    	let g;
    	let rect;
    	let rect_y_value;
    	let text_1;
    	let t_value = Math.round(/*ageLabel*/ ctx[0].detail.data.y * 10) / 10 + "% aged " + /*ageLabel*/ ctx[0].detail.data.x + " in " + /*ageLabel*/ ctx[0].detail.data.g + "";
    	let t;
    	let text_1_y_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			rect = svg_element("rect");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(rect, "fill", "rgba(255,255,255,0.9)");
    			attr_dev(rect, "x", -20);
    			attr_dev(rect, "y", rect_y_value = /*$yGet*/ ctx[1](/*ageLabel*/ ctx[0].detail.data) + (/*ageLabel*/ ctx[0].detail.data.g == 2021 ? 10 : 0) - 10);
    			attr_dev(rect, "transform", "translate(5,-25)");
    			attr_dev(rect, "width", "170");
    			attr_dev(rect, "height", "25");
    			attr_dev(rect, "rx", "15");
    			add_location(rect, file$h, 11, 1, 289);
    			attr_dev(text_1, "class", "label-bold svelte-gjdahk");
    			attr_dev(text_1, "transform", "translate(0,-7)");
    			attr_dev(text_1, "fill", "#333");
    			attr_dev(text_1, "x", 10);
    			attr_dev(text_1, "y", text_1_y_value = /*$yGet*/ ctx[1](/*ageLabel*/ ctx[0].detail.data) + (/*ageLabel*/ ctx[0].detail.data.g == 2021 ? 10 : 0) - 10);
    			add_location(text_1, file$h, 20, 1, 485);
    			attr_dev(g, "class", "label-group");
    			add_location(g, file$h, 10, 0, 264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, rect);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$yGet, ageLabel*/ 3 && rect_y_value !== (rect_y_value = /*$yGet*/ ctx[1](/*ageLabel*/ ctx[0].detail.data) + (/*ageLabel*/ ctx[0].detail.data.g == 2021 ? 10 : 0) - 10)) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (dirty & /*ageLabel*/ 1 && t_value !== (t_value = Math.round(/*ageLabel*/ ctx[0].detail.data.y * 10) / 10 + "% aged " + /*ageLabel*/ ctx[0].detail.data.x + " in " + /*ageLabel*/ ctx[0].detail.data.g + "")) set_data_dev(t, t_value);

    			if (dirty & /*$yGet, ageLabel*/ 3 && text_1_y_value !== (text_1_y_value = /*$yGet*/ ctx[1](/*ageLabel*/ ctx[0].detail.data) + (/*ageLabel*/ ctx[0].detail.data.g == 2021 ? 10 : 0) - 10)) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(10:0) {#if ageLabel.detail.data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let if_block_anchor;
    	let if_block = /*ageLabel*/ ctx[0].detail && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*ageLabel*/ ctx[0].detail) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $yGet;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LabelsAge', slots, []);
    	const { data, xScale, yScale, xDomain, y, xGet, yGet, Domain, custom } = getContext('LayerCake');
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(1, $yGet = value));
    	let { hovered = null } = $$props;
    	let { ageLabel = null } = $$props;
    	const writable_props = ['hovered', 'ageLabel'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LabelsAge> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('hovered' in $$props) $$invalidate(3, hovered = $$props.hovered);
    		if ('ageLabel' in $$props) $$invalidate(0, ageLabel = $$props.ageLabel);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		xScale,
    		yScale,
    		xDomain,
    		y,
    		xGet,
    		yGet,
    		Domain,
    		custom,
    		hovered,
    		ageLabel,
    		$yGet
    	});

    	$$self.$inject_state = $$props => {
    		if ('hovered' in $$props) $$invalidate(3, hovered = $$props.hovered);
    		if ('ageLabel' in $$props) $$invalidate(0, ageLabel = $$props.ageLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ageLabel, $yGet, yGet, hovered];
    }

    class LabelsAge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { hovered: 3, ageLabel: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LabelsAge",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get hovered() {
    		throw new Error("<LabelsAge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<LabelsAge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ageLabel() {
    		throw new Error("<LabelsAge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ageLabel(value) {
    		throw new Error("<LabelsAge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/Line.svelte generated by Svelte v3.43.1 */
    const file$g = "src/charts/small-multiple/components/Line.svelte";

    function create_fragment$j(ctx) {
    	let path_1;

    	const block = {
    		c: function create() {
    			path_1 = svg_element("path");
    			attr_dev(path_1, "class", "path-line svelte-2olc8f");
    			attr_dev(path_1, "d", /*path*/ ctx[1]);
    			attr_dev(path_1, "stroke", /*stroke*/ ctx[0]);
    			add_location(path_1, file$g, 19, 0, 576);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path_1, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*path*/ 2) {
    				attr_dev(path_1, "d", /*path*/ ctx[1]);
    			}

    			if (dirty & /*stroke*/ 1) {
    				attr_dev(path_1, "stroke", /*stroke*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let path;
    	let $yGet;
    	let $xGet;
    	let $data;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Line', slots, []);
    	const { data, xGet, yGet } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(7, $data = value));
    	validate_store(xGet, 'xGet');
    	component_subscribe($$self, xGet, value => $$invalidate(6, $xGet = value));
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(5, $yGet = value));
    	let { stroke = '#ab00d6' } = $$props;
    	const writable_props = ['stroke'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Line> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stroke' in $$props) $$invalidate(0, stroke = $$props.stroke);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		xGet,
    		yGet,
    		stroke,
    		path,
    		$yGet,
    		$xGet,
    		$data
    	});

    	$$self.$inject_state = $$props => {
    		if ('stroke' in $$props) $$invalidate(0, stroke = $$props.stroke);
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$data, $xGet, $yGet*/ 224) {
    			$$invalidate(1, path = 'M' + $data.map(d => {
    				return $xGet(d) + ',' + $yGet(d);
    			}).join('L'));
    		}
    	};

    	return [stroke, path, data, xGet, yGet, $yGet, $xGet, $data];
    }

    class Line extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { stroke: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Line",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get stroke() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stroke(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/Bar.svelte generated by Svelte v3.43.1 */
    const file$f = "src/charts/small-multiple/components/Bar.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	child_ctx[18] = i;
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[21] = i;
    	return child_ctx;
    }

    // (23:8) {#each e as d, i}
    function create_each_block_1$3(ctx) {
    	let rect;
    	let rect_x_value;
    	let rect_y_value;
    	let rect_height_value;
    	let rect_width_value;
    	let rect_stroke_value;
    	let rect_stroke_width_value;
    	let mounted;
    	let dispose;

    	function mouseover_handler(...args) {
    		return /*mouseover_handler*/ ctx[13](/*d*/ ctx[19], ...args);
    	}

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "group-rect");
    			attr_dev(rect, "data-id", /*i*/ ctx[21]);
    			attr_dev(rect, "x", rect_x_value = /*$xScale*/ ctx[2].range()[0]);

    			attr_dev(rect, "y", rect_y_value = /*j*/ ctx[18] % 2 == 0
    			? /*$yGet*/ ctx[3](/*d*/ ctx[19])
    			: /*$yGet*/ ctx[3](/*d*/ ctx[19]) + 12);

    			attr_dev(rect, "rx", 5);
    			attr_dev(rect, "height", rect_height_value = /*$yScale*/ ctx[4].bandwidth() / 2.3);
    			attr_dev(rect, "width", rect_width_value = /*$xGet*/ ctx[5](/*d*/ ctx[19]));
    			attr_dev(rect, "fill", /*j*/ ctx[18] % 2 == 0 ? '#DF0667' : '#3C388E');
    			attr_dev(rect, "stroke", rect_stroke_value = /*d*/ ctx[19] == /*hov*/ ctx[0] ? 'orange' : 'white');
    			attr_dev(rect, "stroke-width", rect_stroke_width_value = /*d*/ ctx[19] == /*hov*/ ctx[0] ? '3' : '2');
    			add_location(rect, file$f, 23, 12, 517);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(rect, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(rect, "mouseleave", /*mouseleave_handler*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$xScale*/ 4 && rect_x_value !== (rect_x_value = /*$xScale*/ ctx[2].range()[0])) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty & /*$yGet, $data*/ 10 && rect_y_value !== (rect_y_value = /*j*/ ctx[18] % 2 == 0
    			? /*$yGet*/ ctx[3](/*d*/ ctx[19])
    			: /*$yGet*/ ctx[3](/*d*/ ctx[19]) + 12)) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (dirty & /*$yScale*/ 16 && rect_height_value !== (rect_height_value = /*$yScale*/ ctx[4].bandwidth() / 2.3)) {
    				attr_dev(rect, "height", rect_height_value);
    			}

    			if (dirty & /*$xGet, $data*/ 34 && rect_width_value !== (rect_width_value = /*$xGet*/ ctx[5](/*d*/ ctx[19]))) {
    				attr_dev(rect, "width", rect_width_value);
    			}

    			if (dirty & /*$data, hov*/ 3 && rect_stroke_value !== (rect_stroke_value = /*d*/ ctx[19] == /*hov*/ ctx[0] ? 'orange' : 'white')) {
    				attr_dev(rect, "stroke", rect_stroke_value);
    			}

    			if (dirty & /*$data, hov*/ 3 && rect_stroke_width_value !== (rect_stroke_width_value = /*d*/ ctx[19] == /*hov*/ ctx[0] ? '3' : '2')) {
    				attr_dev(rect, "stroke-width", rect_stroke_width_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(23:8) {#each e as d, i}",
    		ctx
    	});

    	return block;
    }

    // (22:1) {#each $data as e, j}
    function create_each_block$a(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*e*/ ctx[16];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xScale, $yGet, $data, $yScale, $xGet, hov, doHover*/ 2111) {
    				each_value_1 = /*e*/ ctx[16];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(22:1) {#each $data as e, j}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let g;
    	let each_value = /*$data*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "bar-group");
    			add_location(g, file$f, 20, 0, 434);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$data, $xScale, $yGet, $yScale, $xGet, hov, doHover*/ 2111) {
    				each_value = /*$data*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $data;
    	let $xScale;
    	let $yGet;
    	let $yScale;
    	let $xGet;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Bar', slots, []);
    	const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(1, $data = value));
    	validate_store(xGet, 'xGet');
    	component_subscribe($$self, xGet, value => $$invalidate(5, $xGet = value));
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(3, $yGet = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(2, $xScale = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(4, $yScale = value));
    	const dispatch = createEventDispatcher();
    	let { hovered = null } = $$props;
    	let hov;

    	function doHover(e, d) {
    		// hovered = d ? d : null;
    		$$invalidate(0, hov = d);

    		dispatch('hover', {
    			// id: hovered,
    			data: d,
    			event: e
    		});
    	}

    	const writable_props = ['hovered'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Bar> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = (d, el) => doHover(el, d);
    	const mouseleave_handler = e => doHover(e, null);

    	$$self.$$set = $$props => {
    		if ('hovered' in $$props) $$invalidate(12, hovered = $$props.hovered);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		data,
    		xGet,
    		yGet,
    		xScale,
    		yScale,
    		dispatch,
    		hovered,
    		hov,
    		doHover,
    		$data,
    		$xScale,
    		$yGet,
    		$yScale,
    		$xGet
    	});

    	$$self.$inject_state = $$props => {
    		if ('hovered' in $$props) $$invalidate(12, hovered = $$props.hovered);
    		if ('hov' in $$props) $$invalidate(0, hov = $$props.hov);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hov,
    		$data,
    		$xScale,
    		$yGet,
    		$yScale,
    		$xGet,
    		data,
    		xGet,
    		yGet,
    		xScale,
    		yScale,
    		doHover,
    		hovered,
    		mouseover_handler,
    		mouseleave_handler
    	];
    }

    class Bar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { hovered: 12 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bar",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get hovered() {
    		throw new Error("<Bar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hovered(value) {
    		throw new Error("<Bar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/SmallMultipleWrapper.percent-range.svelte generated by Svelte v3.43.1 */

    // (51:2) <Svg>
    function create_default_slot_1$2(ctx) {
    	let headlabel;
    	let t0;
    	let axisy;
    	let t1;
    	let axisx;
    	let t2;
    	let bar;
    	let t3;
    	let labelsage;
    	let current;

    	headlabel = new HeadLabel({
    			props: {
    				labels: /*labels*/ ctx[1],
    				nu: /*nu*/ ctx[2]
    			},
    			$$inline: true
    		});

    	axisy = new AxisY$1({
    			props: { nu: /*nu*/ ctx[2] },
    			$$inline: true
    		});

    	axisx = new AxisX$1({ $$inline: true });
    	bar = new Bar({ $$inline: true });
    	bar.$on("hover", /*doHoverAge*/ ctx[5]);

    	labelsage = new LabelsAge({
    			props: {
    				hovered: /*hovered*/ ctx[3],
    				ageLabel: /*ageLabel*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(headlabel.$$.fragment);
    			t0 = space();
    			create_component(axisy.$$.fragment);
    			t1 = space();
    			create_component(axisx.$$.fragment);
    			t2 = space();
    			create_component(bar.$$.fragment);
    			t3 = space();
    			create_component(labelsage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(headlabel, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(axisy, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(axisx, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(bar, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(labelsage, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const headlabel_changes = {};
    			if (dirty & /*labels*/ 2) headlabel_changes.labels = /*labels*/ ctx[1];
    			if (dirty & /*nu*/ 4) headlabel_changes.nu = /*nu*/ ctx[2];
    			headlabel.$set(headlabel_changes);
    			const axisy_changes = {};
    			if (dirty & /*nu*/ 4) axisy_changes.nu = /*nu*/ ctx[2];
    			axisy.$set(axisy_changes);
    			const labelsage_changes = {};
    			if (dirty & /*hovered*/ 8) labelsage_changes.hovered = /*hovered*/ ctx[3];
    			if (dirty & /*ageLabel*/ 16) labelsage_changes.ageLabel = /*ageLabel*/ ctx[4];
    			labelsage.$set(labelsage_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(headlabel.$$.fragment, local);
    			transition_in(axisy.$$.fragment, local);
    			transition_in(axisx.$$.fragment, local);
    			transition_in(bar.$$.fragment, local);
    			transition_in(labelsage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(headlabel.$$.fragment, local);
    			transition_out(axisy.$$.fragment, local);
    			transition_out(axisx.$$.fragment, local);
    			transition_out(bar.$$.fragment, local);
    			transition_out(labelsage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(headlabel, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(axisy, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(axisx, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(bar, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(labelsage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(51:2) <Svg>",
    		ctx
    	});

    	return block;
    }

    // (38:0) <LayerCake   ssr={true}   padding={{ top: 40, right: 6, bottom: 2, left: 60 }}   x={'y'}   y={'x'}   data={data}   xScale={scaleLinear()}   yScale={scaleBand().paddingInner([0.05]).round(true)}   xDomain={[0, 15]}   yDomain={['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80plus'].reverse()}   height={300} >
    function create_default_slot$2(ctx) {
    	let svg;
    	let current;

    	svg = new Svg({
    			props: {
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(svg.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(svg, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const svg_changes = {};

    			if (dirty & /*$$scope, hovered, ageLabel, nu, labels*/ 1054) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svg.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svg.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(svg, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(38:0) <LayerCake   ssr={true}   padding={{ top: 40, right: 6, bottom: 2, left: 60 }}   x={'y'}   y={'x'}   data={data}   xScale={scaleLinear()}   yScale={scaleBand().paddingInner([0.05]).round(true)}   xDomain={[0, 15]}   yDomain={['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80plus'].reverse()}   height={300} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let layercake;
    	let current;

    	layercake = new LayerCake({
    			props: {
    				ssr: true,
    				padding: { top: 40, right: 6, bottom: 2, left: 60 },
    				x: 'y',
    				y: 'x',
    				data: /*data*/ ctx[0],
    				xScale: linear(),
    				yScale: band().paddingInner([0.05]).round(true),
    				xDomain: [0, 15],
    				yDomain: [
    					'0-9',
    					'10-19',
    					'20-29',
    					'30-39',
    					'40-49',
    					'50-59',
    					'60-69',
    					'70-79',
    					'80plus'
    				].reverse(),
    				height: 300,
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(layercake.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(layercake, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layercake_changes = {};
    			if (dirty & /*data*/ 1) layercake_changes.data = /*data*/ ctx[0];

    			if (dirty & /*$$scope, hovered, ageLabel, nu, labels*/ 1054) {
    				layercake_changes.$$scope = { dirty, ctx };
    			}

    			layercake.$set(layercake_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layercake.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layercake.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(layercake, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SmallMultipleWrapper_percent_range', slots, []);
    	let { data } = $$props;
    	let { labels } = $$props;
    	let { nu } = $$props;
    	let { fullExtents } = $$props;
    	let { scale } = $$props;
    	let { extentGetters } = $$props;
    	let hovered = null;
    	let ageLabel = true;
    	const extents = calcExtents(data, extentGetters);

    	function doHoverAge(e) {
    		$$invalidate(3, hovered = e.detail.id);
    		$$invalidate(4, ageLabel = e);
    	} // if (hovered) {
    	// 	placeLabel = e.detail.data.unique

    	const writable_props = ['data', 'labels', 'nu', 'fullExtents', 'scale', 'extentGetters'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SmallMultipleWrapper_percent_range> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    		if ('nu' in $$props) $$invalidate(2, nu = $$props.nu);
    		if ('fullExtents' in $$props) $$invalidate(6, fullExtents = $$props.fullExtents);
    		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
    		if ('extentGetters' in $$props) $$invalidate(8, extentGetters = $$props.extentGetters);
    	};

    	$$self.$capture_state = () => ({
    		LayerCake,
    		Svg,
    		calcExtents,
    		AxisY: AxisY$1,
    		AxisX: AxisX$1,
    		HeadLabel,
    		LabelsAge,
    		Line,
    		Bar,
    		scaleBand: band,
    		scaleLinear: linear,
    		data,
    		labels,
    		nu,
    		fullExtents,
    		scale,
    		extentGetters,
    		hovered,
    		ageLabel,
    		extents,
    		doHoverAge
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    		if ('nu' in $$props) $$invalidate(2, nu = $$props.nu);
    		if ('fullExtents' in $$props) $$invalidate(6, fullExtents = $$props.fullExtents);
    		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
    		if ('extentGetters' in $$props) $$invalidate(8, extentGetters = $$props.extentGetters);
    		if ('hovered' in $$props) $$invalidate(3, hovered = $$props.hovered);
    		if ('ageLabel' in $$props) $$invalidate(4, ageLabel = $$props.ageLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		data,
    		labels,
    		nu,
    		hovered,
    		ageLabel,
    		doHoverAge,
    		fullExtents,
    		scale,
    		extentGetters
    	];
    }

    class SmallMultipleWrapper_percent_range extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			data: 0,
    			labels: 1,
    			nu: 2,
    			fullExtents: 6,
    			scale: 7,
    			extentGetters: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SmallMultipleWrapper_percent_range",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !('data' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'data'");
    		}

    		if (/*labels*/ ctx[1] === undefined && !('labels' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'labels'");
    		}

    		if (/*nu*/ ctx[2] === undefined && !('nu' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'nu'");
    		}

    		if (/*fullExtents*/ ctx[6] === undefined && !('fullExtents' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'fullExtents'");
    		}

    		if (/*scale*/ ctx[7] === undefined && !('scale' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'scale'");
    		}

    		if (/*extentGetters*/ ctx[8] === undefined && !('extentGetters' in props)) {
    			console.warn("<SmallMultipleWrapper_percent_range> was created without expected prop 'extentGetters'");
    		}
    	}

    	get data() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labels() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nu() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nu(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullExtents() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullExtents(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extentGetters() {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extentGetters(value) {
    		throw new Error("<SmallMultipleWrapper_percent_range>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/components/Legend.svelte generated by Svelte v3.43.1 */

    const file$e = "src/charts/small-multiple/components/Legend.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (15:4) {#each domain as label, i}
    function create_each_block$9(ctx) {
    	let li;
    	let div;
    	let t0;
    	let t1_value = /*label*/ ctx[8] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(div, "class", "bullet svelte-o1q0c0");
    			set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);

    			set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			toggle_class(div, "round", /*round*/ ctx[7]);
    			add_location(div, file$e, 16, 8, 565);
    			attr_dev(li, "class", "svelte-o1q0c0");
    			add_location(li, file$e, 15, 6, 552);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*colors*/ 2) {
    				set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*round*/ 128) {
    				toggle_class(div, "round", /*round*/ ctx[7]);
    			}

    			if (dirty & /*domain*/ 1 && t1_value !== (t1_value = /*label*/ ctx[8] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(15:4) {#each domain as label, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let ul;
    	let each_value = /*domain*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "legend svelte-o1q0c0");
    			add_location(ul, file$e, 13, 2, 495);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*domain, colors, horizontal, line, comparison, markerWidth, markerLength, round*/ 255) {
    				each_value = /*domain*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Legend', slots, []);
    	let { domain = null } = $$props;
    	let { colors = null } = $$props;
    	let { line = false } = $$props;
    	let { comparison = false } = $$props;
    	let { horizontal = true } = $$props;
    	let { markerWidth = 2.5 } = $$props;
    	let { markerLength = 13 } = $$props;
    	let { round = false } = $$props;

    	const writable_props = [
    		'domain',
    		'colors',
    		'line',
    		'comparison',
    		'horizontal',
    		'markerWidth',
    		'markerLength',
    		'round'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Legend> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	$$self.$capture_state = () => ({
    		domain,
    		colors,
    		line,
    		comparison,
    		horizontal,
    		markerWidth,
    		markerLength,
    		round
    	});

    	$$self.$inject_state = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [domain, colors, line, comparison, horizontal, markerWidth, markerLength, round];
    }

    class Legend$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			domain: 0,
    			colors: 1,
    			line: 2,
    			comparison: 3,
    			horizontal: 4,
    			markerWidth: 5,
    			markerLength: 6,
    			round: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Legend",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get domain() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set domain(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get colors() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set colors(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get line() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get comparison() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comparison(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get horizontal() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set horizontal(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerWidth() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerWidth(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerLength() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerLength(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get round() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set round(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/small-multiple/AgeChart.svelte generated by Svelte v3.43.1 */
    const file$d = "src/charts/small-multiple/AgeChart.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (27:2) {#each chartData as data, i}
    function create_each_block$8(ctx) {
    	let div;
    	let smallmultiplewrapper;
    	let t;
    	let current;

    	smallmultiplewrapper = new SmallMultipleWrapper_percent_range({
    			props: {
    				data: /*data*/ ctx[5],
    				fullExtents: /*fullExtents*/ ctx[3],
    				scale: /*scale*/ ctx[4],
    				extentGetters: /*extentGetters*/ ctx[2],
    				nu: /*i*/ ctx[7],
    				labels: /*labels*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(smallmultiplewrapper.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "chart-container svelte-5oxew");
    			add_location(div, file$d, 27, 4, 580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(smallmultiplewrapper, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const smallmultiplewrapper_changes = {};
    			if (dirty & /*chartData*/ 1) smallmultiplewrapper_changes.data = /*data*/ ctx[5];
    			if (dirty & /*labels*/ 2) smallmultiplewrapper_changes.labels = /*labels*/ ctx[1];
    			smallmultiplewrapper.$set(smallmultiplewrapper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(smallmultiplewrapper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(smallmultiplewrapper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(smallmultiplewrapper);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(27:2) {#each chartData as data, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let t;
    	let legend;
    	let current;
    	let each_value = /*chartData*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	legend = new Legend$1({
    			props: {
    				domain: [2011, 2021],
    				colors: ['#DF0667', '#3C388E']
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			create_component(legend.$$.fragment);
    			attr_dev(div, "class", "group-container svelte-5oxew");
    			add_location(div, file$d, 25, 0, 515);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			insert_dev(target, t, anchor);
    			mount_component(legend, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*chartData, fullExtents, scale, extentGetters, labels*/ 31) {
    				each_value = /*chartData*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(legend.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(legend.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(legend, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AgeChart', slots, []);
    	let { chartData } = $$props;
    	let { labels } = $$props;
    	const extentGetters = { x: d => d.x, y: d => d.y };
    	const fullExtents = calcExtents(flatten(chartData), extentGetters);

    	chartData.sort((a, b) => {
    		return b[b.length - 1].y - a[a.length - 1].y;
    	});

    	let scale = 'individual';
    	const writable_props = ['chartData', 'labels'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AgeChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('chartData' in $$props) $$invalidate(0, chartData = $$props.chartData);
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    	};

    	$$self.$capture_state = () => ({
    		calcExtents,
    		flatten,
    		SmallMultipleWrapper: SmallMultipleWrapper_percent_range,
    		Legend: Legend$1,
    		chartData,
    		labels,
    		extentGetters,
    		fullExtents,
    		scale
    	});

    	$$self.$inject_state = $$props => {
    		if ('chartData' in $$props) $$invalidate(0, chartData = $$props.chartData);
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    		if ('scale' in $$props) $$invalidate(4, scale = $$props.scale);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [chartData, labels, extentGetters, fullExtents, scale];
    }

    class AgeChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { chartData: 0, labels: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AgeChart",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*chartData*/ ctx[0] === undefined && !('chartData' in props)) {
    			console.warn("<AgeChart> was created without expected prop 'chartData'");
    		}

    		if (/*labels*/ ctx[1] === undefined && !('labels' in props)) {
    			console.warn("<AgeChart> was created without expected prop 'labels'");
    		}
    	}

    	get chartData() {
    		throw new Error("<AgeChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set chartData(value) {
    		throw new Error("<AgeChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labels() {
    		throw new Error("<AgeChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<AgeChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/DotPlot.svelte generated by Svelte v3.43.1 */
    const file$c = "src/charts/DotPlot.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	child_ctx[19] = i;
    	return child_ctx;
    }

    // (37:3) {#each $xGet(row) as circleX, i}
    function create_each_block_1$2(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let circle_fill_value;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "cx", circle_cx_value = /*circleX*/ ctx[17]);
    			attr_dev(circle, "cy", circle_cy_value = /*$yGet*/ ctx[4](/*row*/ ctx[14]) + /*midHeight*/ ctx[1]);
    			attr_dev(circle, "r", /*r*/ ctx[0]);
    			attr_dev(circle, "fill", circle_fill_value = /*$zScale*/ ctx[5](/*$config*/ ctx[6].x[/*i*/ ctx[19]]));
    			attr_dev(circle, "class", "svelte-1mc14eq");
    			add_location(circle, file$c, 37, 4, 1043);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xGet, $data*/ 12 && circle_cx_value !== (circle_cx_value = /*circleX*/ ctx[17])) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*$yGet, $data, midHeight*/ 22 && circle_cy_value !== (circle_cy_value = /*$yGet*/ ctx[4](/*row*/ ctx[14]) + /*midHeight*/ ctx[1])) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*r*/ 1) {
    				attr_dev(circle, "r", /*r*/ ctx[0]);
    			}

    			if (dirty & /*$zScale, $config*/ 96 && circle_fill_value !== (circle_fill_value = /*$zScale*/ ctx[5](/*$config*/ ctx[6].x[/*i*/ ctx[19]]))) {
    				attr_dev(circle, "fill", circle_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(37:3) {#each $xGet(row) as circleX, i}",
    		ctx
    	});

    	return block;
    }

    // (13:1) {#each $data as row}
    function create_each_block$7(ctx) {
    	let g;
    	let defs0;
    	let linearGradient0;
    	let stop0;
    	let stop1;
    	let defs1;
    	let linearGradient1;
    	let stop2;
    	let stop3;
    	let rect;
    	let rect_x_value;
    	let rect_y_value;
    	let rect_width_value;
    	let rect_fill_value;
    	let each_value_1 = /*$xGet*/ ctx[3](/*row*/ ctx[14]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			defs0 = svg_element("defs");
    			linearGradient0 = svg_element("linearGradient");
    			stop0 = svg_element("stop");
    			stop1 = svg_element("stop");
    			defs1 = svg_element("defs");
    			linearGradient1 = svg_element("linearGradient");
    			stop2 = svg_element("stop");
    			stop3 = svg_element("stop");
    			rect = svg_element("rect");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(stop0, "offset", "5%");
    			attr_dev(stop0, "stop-color", "#3C388E10");
    			add_location(stop0, file$c, 16, 4, 388);
    			attr_dev(stop1, "offset", "95%");
    			attr_dev(stop1, "stop-color", "#3C388E80");
    			add_location(stop1, file$c, 17, 4, 437);
    			attr_dev(linearGradient0, "id", "myGradient");
    			attr_dev(linearGradient0, "gradientTransform", "rotate(0)");
    			add_location(linearGradient0, file$c, 15, 4, 321);
    			add_location(defs0, file$c, 14, 3, 310);
    			attr_dev(stop2, "offset", "5%");
    			attr_dev(stop2, "stop-color", "#3C388E80");
    			add_location(stop2, file$c, 22, 4, 599);
    			attr_dev(stop3, "offset", "95%");
    			attr_dev(stop3, "stop-color", "#3C388E10");
    			add_location(stop3, file$c, 23, 4, 648);
    			attr_dev(linearGradient1, "id", "myGradientRev");
    			attr_dev(linearGradient1, "gradientTransform", "rotate(0)");
    			add_location(linearGradient1, file$c, 21, 4, 529);
    			add_location(defs1, file$c, 20, 3, 518);
    			attr_dev(rect, "x", rect_x_value = Math.min(.../*$xGet*/ ctx[3](/*row*/ ctx[14])));
    			attr_dev(rect, "y", rect_y_value = /*$yGet*/ ctx[4](/*row*/ ctx[14]) + /*midHeight*/ ctx[1] - 7);
    			attr_dev(rect, "width", rect_width_value = Math.max(.../*$xGet*/ ctx[3](/*row*/ ctx[14])) - Math.min(.../*$xGet*/ ctx[3](/*row*/ ctx[14])));
    			attr_dev(rect, "height", "14");

    			attr_dev(rect, "fill", rect_fill_value = /*row*/ ctx[14][2021] - /*row*/ ctx[14][2011] > 0
    			? "url('#myGradient')"
    			: "url('#myGradientRev')");

    			attr_dev(rect, "opacity", "0.85");
    			add_location(rect, file$c, 27, 3, 730);
    			attr_dev(g, "class", "dot-row");
    			add_location(g, file$c, 13, 2, 287);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, defs0);
    			append_dev(defs0, linearGradient0);
    			append_dev(linearGradient0, stop0);
    			append_dev(linearGradient0, stop1);
    			append_dev(g, defs1);
    			append_dev(defs1, linearGradient1);
    			append_dev(linearGradient1, stop2);
    			append_dev(linearGradient1, stop3);
    			append_dev(g, rect);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$xGet, $data*/ 12 && rect_x_value !== (rect_x_value = Math.min(.../*$xGet*/ ctx[3](/*row*/ ctx[14])))) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (dirty & /*$yGet, $data, midHeight*/ 22 && rect_y_value !== (rect_y_value = /*$yGet*/ ctx[4](/*row*/ ctx[14]) + /*midHeight*/ ctx[1] - 7)) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (dirty & /*$xGet, $data*/ 12 && rect_width_value !== (rect_width_value = Math.max(.../*$xGet*/ ctx[3](/*row*/ ctx[14])) - Math.min(.../*$xGet*/ ctx[3](/*row*/ ctx[14])))) {
    				attr_dev(rect, "width", rect_width_value);
    			}

    			if (dirty & /*$data*/ 4 && rect_fill_value !== (rect_fill_value = /*row*/ ctx[14][2021] - /*row*/ ctx[14][2011] > 0
    			? "url('#myGradient')"
    			: "url('#myGradientRev')")) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}

    			if (dirty & /*$xGet, $data, $yGet, midHeight, r, $zScale, $config*/ 127) {
    				each_value_1 = /*$xGet*/ ctx[3](/*row*/ ctx[14]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(13:1) {#each $data as row}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let g;
    	let each_value = /*$data*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "dot-plot");
    			add_location(g, file$c, 11, 0, 242);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$xGet, $data, $yGet, midHeight, r, $zScale, $config, Math*/ 127) {
    				each_value = /*$data*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let midHeight;
    	let $yScale;
    	let $data;
    	let $xGet;
    	let $yGet;
    	let $zScale;
    	let $config;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DotPlot', slots, []);
    	const { data, xGet, yGet, yScale, zScale, config } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(2, $data = value));
    	validate_store(xGet, 'xGet');
    	component_subscribe($$self, xGet, value => $$invalidate(3, $xGet = value));
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(4, $yGet = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(13, $yScale = value));
    	validate_store(zScale, 'zScale');
    	component_subscribe($$self, zScale, value => $$invalidate(5, $zScale = value));
    	validate_store(config, 'config');
    	component_subscribe($$self, config, value => $$invalidate(6, $config = value));
    	let { r = 7 } = $$props;
    	const writable_props = ['r'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DotPlot> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('r' in $$props) $$invalidate(0, r = $$props.r);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		scaleOrdinal: ordinal,
    		data,
    		xGet,
    		yGet,
    		yScale,
    		zScale,
    		config,
    		r,
    		midHeight,
    		$yScale,
    		$data,
    		$xGet,
    		$yGet,
    		$zScale,
    		$config
    	});

    	$$self.$inject_state = $$props => {
    		if ('r' in $$props) $$invalidate(0, r = $$props.r);
    		if ('midHeight' in $$props) $$invalidate(1, midHeight = $$props.midHeight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$yScale*/ 8192) {
    			$$invalidate(1, midHeight = $yScale.bandwidth() / 2);
    		}
    	};

    	return [
    		r,
    		midHeight,
    		$data,
    		$xGet,
    		$yGet,
    		$zScale,
    		$config,
    		data,
    		xGet,
    		yGet,
    		yScale,
    		zScale,
    		config,
    		$yScale
    	];
    }

    class DotPlot extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { r: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DotPlot",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get r() {
    		throw new Error("<DotPlot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set r(value) {
    		throw new Error("<DotPlot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/DotLabels.svelte generated by Svelte v3.43.1 */
    const file$b = "src/charts/DotLabels.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[16] = i;
    	return child_ctx;
    }

    // (10:0) {#each $xGet(row) as circleX, i}
    function create_each_block_1$1(ctx) {
    	let div;

    	let t_value = (/*i*/ ctx[16] == 0
    	? 'least deprived'
    	: /*i*/ ctx[16] == 1 ? 'most deprived' : 'average') + "";

    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "label " + (/*i*/ ctx[16] == 2 ? 'below' : 'above') + " svelte-1cj7kw2");
    			set_style(div, "top", /*$yGet*/ ctx[3](/*row*/ ctx[11]) + /*midHeight*/ ctx[0] + "px");
    			set_style(div, "left", /*circleX*/ ctx[14] + "px");
    			add_location(div, file$b, 10, 0, 237);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$yGet, $data, midHeight*/ 11) {
    				set_style(div, "top", /*$yGet*/ ctx[3](/*row*/ ctx[11]) + /*midHeight*/ ctx[0] + "px");
    			}

    			if (dirty & /*$xGet, $data*/ 6) {
    				set_style(div, "left", /*circleX*/ ctx[14] + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(10:0) {#each $xGet(row) as circleX, i}",
    		ctx
    	});

    	return block;
    }

    // (9:0) {#each $data as row}
    function create_each_block$6(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*$xGet*/ ctx[2](/*row*/ ctx[11]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$yGet, $data, midHeight, $xGet*/ 15) {
    				each_value_1 = /*$xGet*/ ctx[2](/*row*/ ctx[11]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(9:0) {#each $data as row}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let each_1_anchor;
    	let each_value = /*$data*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$xGet, $data, $yGet, midHeight*/ 15) {
    				each_value = /*$data*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let midHeight;
    	let $yScale;
    	let $data;
    	let $xGet;
    	let $yGet;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DotLabels', slots, []);
    	const { data, xGet, yGet, yScale, zScale, config } = getContext('LayerCake');
    	validate_store(data, 'data');
    	component_subscribe($$self, data, value => $$invalidate(1, $data = value));
    	validate_store(xGet, 'xGet');
    	component_subscribe($$self, xGet, value => $$invalidate(2, $xGet = value));
    	validate_store(yGet, 'yGet');
    	component_subscribe($$self, yGet, value => $$invalidate(3, $yGet = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(8, $yScale = value));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DotLabels> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		xGet,
    		yGet,
    		yScale,
    		zScale,
    		config,
    		midHeight,
    		$yScale,
    		$data,
    		$xGet,
    		$yGet
    	});

    	$$self.$inject_state = $$props => {
    		if ('midHeight' in $$props) $$invalidate(0, midHeight = $$props.midHeight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$yScale*/ 256) {
    			$$invalidate(0, midHeight = $yScale.bandwidth() / 2);
    		}
    	};

    	return [midHeight, $data, $xGet, $yGet, data, xGet, yGet, yScale, $yScale];
    }

    class DotLabels extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DotLabels",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src/charts/AxisX.svelte generated by Svelte v3.43.1 */
    const file$a = "src/charts/AxisX.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[27] = list[i];
    	child_ctx[29] = i;
    	return child_ctx;
    }

    // (45:3) {#if gridlines !== false}
    function create_if_block_2$3(ctx) {
    	let line;
    	let line_y__value;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "y1", line_y__value = /*$height*/ ctx[17] * -1);
    			attr_dev(line, "y2", /*dyTick*/ ctx[9]);
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", "0");
    			attr_dev(line, "stroke", /*lineColor*/ ctx[10]);
    			attr_dev(line, "class", "svelte-1u7vzrc");
    			toggle_class(line, "baseline", /*solid*/ ctx[12]);
    			add_location(line, file$a, 45, 4, 1094);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$height*/ 131072 && line_y__value !== (line_y__value = /*$height*/ ctx[17] * -1)) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*dyTick*/ 512) {
    				attr_dev(line, "y2", /*dyTick*/ ctx[9]);
    			}

    			if (dirty & /*lineColor*/ 1024) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[10]);
    			}

    			if (dirty & /*solid*/ 4096) {
    				toggle_class(line, "baseline", /*solid*/ ctx[12]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(45:3) {#if gridlines !== false}",
    		ctx
    	});

    	return block;
    }

    // (57:4) {:else}
    function create_else_block$4(ctx) {
    	let t_value = /*formatTick*/ ctx[1](/*tick*/ ctx[27]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formatTick, tickVals*/ 32770 && t_value !== (t_value = /*formatTick*/ ctx[1](/*tick*/ ctx[27]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(57:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (55:4) {#if i == tickVals.length - 1}
    function create_if_block_1$4(ctx) {
    	let t0;
    	let t1_value = /*formatTick*/ ctx[1](/*tick*/ ctx[27]) + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(/*prefix*/ ctx[4]);
    			t1 = text(t1_value);
    			t2 = text(/*suffix*/ ctx[5]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 16) set_data_dev(t0, /*prefix*/ ctx[4]);
    			if (dirty & /*formatTick, tickVals*/ 32770 && t1_value !== (t1_value = /*formatTick*/ ctx[1](/*tick*/ ctx[27]) + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*suffix*/ 32) set_data_dev(t2, /*suffix*/ ctx[5]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(55:4) {#if i == tickVals.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (43:1) {#each tickVals as tick, i}
    function create_each_block$5(ctx) {
    	let g;
    	let text_1;
    	let text_1_x_value;
    	let text_1_y_value;
    	let text_1_dx_value;
    	let g_class_value;
    	let g_transform_value;
    	let if_block0 = /*gridlines*/ ctx[0] !== false && create_if_block_2$3(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*i*/ ctx[29] == /*tickVals*/ ctx[15].length - 1) return create_if_block_1$4;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			text_1 = svg_element("text");
    			if_block1.c();

    			attr_dev(text_1, "x", text_1_x_value = /*xTick*/ ctx[6] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0);

    			attr_dev(text_1, "y", text_1_y_value = /*flipped*/ ctx[3]
    			? /*$height*/ ctx[17] * -1 - 6
    			: /*yTick*/ ctx[7]);

    			attr_dev(text_1, "dx", text_1_dx_value = /*textAnchor*/ ctx[21](/*i*/ ctx[29]) == 'start'
    			? /*dxTick*/ ctx[8] - 2
    			: /*textAnchor*/ ctx[21](/*i*/ ctx[29]) == 'end'
    				? /*dxTick*/ ctx[8] + 2
    				: /*dxTick*/ ctx[8]);

    			attr_dev(text_1, "dy", /*dyTick*/ ctx[9]);
    			attr_dev(text_1, "text-anchor", /*textAnchor*/ ctx[21](/*i*/ ctx[29]));
    			attr_dev(text_1, "fill", /*textColor*/ ctx[11]);
    			add_location(text_1, file$a, 47, 3, 1214);
    			attr_dev(g, "class", g_class_value = "tick tick-" + /*tick*/ ctx[27] + " svelte-1u7vzrc");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*$xScale*/ ctx[14](/*tick*/ ctx[27]) + "," + /*$yRange*/ ctx[16][0] + ")");
    			add_location(g, file$a, 43, 2, 978);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, text_1);
    			if_block1.m(text_1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gridlines*/ ctx[0] !== false) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					if_block0.m(g, text_1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(text_1, null);
    				}
    			}

    			if (dirty & /*xTick, isBandwidth, $xScale*/ 24640 && text_1_x_value !== (text_1_x_value = /*xTick*/ ctx[6] || /*isBandwidth*/ ctx[13]
    			? /*$xScale*/ ctx[14].bandwidth() / 2
    			: 0)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*flipped, $height, yTick*/ 131208 && text_1_y_value !== (text_1_y_value = /*flipped*/ ctx[3]
    			? /*$height*/ ctx[17] * -1 - 6
    			: /*yTick*/ ctx[7])) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*dxTick*/ 256 && text_1_dx_value !== (text_1_dx_value = /*textAnchor*/ ctx[21](/*i*/ ctx[29]) == 'start'
    			? /*dxTick*/ ctx[8] - 2
    			: /*textAnchor*/ ctx[21](/*i*/ ctx[29]) == 'end'
    				? /*dxTick*/ ctx[8] + 2
    				: /*dxTick*/ ctx[8])) {
    				attr_dev(text_1, "dx", text_1_dx_value);
    			}

    			if (dirty & /*dyTick*/ 512) {
    				attr_dev(text_1, "dy", /*dyTick*/ ctx[9]);
    			}

    			if (dirty & /*textColor*/ 2048) {
    				attr_dev(text_1, "fill", /*textColor*/ ctx[11]);
    			}

    			if (dirty & /*tickVals*/ 32768 && g_class_value !== (g_class_value = "tick tick-" + /*tick*/ ctx[27] + " svelte-1u7vzrc")) {
    				attr_dev(g, "class", g_class_value);
    			}

    			if (dirty & /*$xScale, tickVals, $yRange*/ 114688 && g_transform_value !== (g_transform_value = "translate(" + /*$xScale*/ ctx[14](/*tick*/ ctx[27]) + "," + /*$yRange*/ ctx[16][0] + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(43:1) {#each tickVals as tick, i}",
    		ctx
    	});

    	return block;
    }

    // (63:1) {#if baseline === true}
    function create_if_block$6(ctx) {
    	let line;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "class", "baseline svelte-1u7vzrc");
    			attr_dev(line, "y1", /*$height*/ ctx[17]);
    			attr_dev(line, "y2", "0");
    			attr_dev(line, "x1", "0");
    			attr_dev(line, "x2", "0");
    			attr_dev(line, "stroke", /*lineColor*/ ctx[10]);
    			add_location(line, file$a, 63, 2, 1674);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$height*/ 131072) {
    				attr_dev(line, "y1", /*$height*/ ctx[17]);
    			}

    			if (dirty & /*lineColor*/ 1024) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[10]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(63:1) {#if baseline === true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let g;
    	let each_1_anchor;
    	let each_value = /*tickVals*/ ctx[15];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	let if_block = /*baseline*/ ctx[2] === true && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			if (if_block) if_block.c();
    			attr_dev(g, "class", "axis x-axis");
    			add_location(g, file$a, 41, 0, 923);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			append_dev(g, each_1_anchor);
    			if (if_block) if_block.m(g, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*tickVals, $xScale, $yRange, xTick, isBandwidth, flipped, $height, yTick, textAnchor, dxTick, dyTick, textColor, suffix, formatTick, prefix, lineColor, solid, gridlines*/ 2359291) {
    				each_value = /*tickVals*/ ctx[15];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*baseline*/ ctx[2] === true) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(g, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $xScale;
    	let $yRange;
    	let $height;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisX', slots, []);
    	const { data, width, height, xScale, yScale, yRange } = getContext('LayerCake');
    	validate_store(height, 'height');
    	component_subscribe($$self, height, value => $$invalidate(17, $height = value));
    	validate_store(xScale, 'xScale');
    	component_subscribe($$self, xScale, value => $$invalidate(14, $xScale = value));
    	validate_store(yRange, 'yRange');
    	component_subscribe($$self, yRange, value => $$invalidate(16, $yRange = value));
    	let { gridlines = true } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { baseline = false } = $$props;
    	let { flipped = false } = $$props;
    	let { snapTicks = false } = $$props;
    	let { ticks = undefined } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;
    	let { xTick = undefined } = $$props;
    	let { yTick = 15 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = 0 } = $$props;
    	let { lineColor = '#aaa' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { solid = false } = $$props;

    	function textAnchor(i) {
    		if (snapTicks === true) {
    			if (i === 0) {
    				return 'start';
    			}

    			if (i === tickVals.length - 1) {
    				return 'end';
    			}
    		}

    		return 'middle';
    	}

    	const writable_props = [
    		'gridlines',
    		'formatTick',
    		'baseline',
    		'flipped',
    		'snapTicks',
    		'ticks',
    		'prefix',
    		'suffix',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'lineColor',
    		'textColor',
    		'solid'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisX> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('gridlines' in $$props) $$invalidate(0, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(1, formatTick = $$props.formatTick);
    		if ('baseline' in $$props) $$invalidate(2, baseline = $$props.baseline);
    		if ('flipped' in $$props) $$invalidate(3, flipped = $$props.flipped);
    		if ('snapTicks' in $$props) $$invalidate(22, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(23, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(5, suffix = $$props.suffix);
    		if ('xTick' in $$props) $$invalidate(6, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(7, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(8, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(9, dyTick = $$props.dyTick);
    		if ('lineColor' in $$props) $$invalidate(10, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(11, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(12, solid = $$props.solid);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		data,
    		width,
    		height,
    		xScale,
    		yScale,
    		yRange,
    		gridlines,
    		formatTick,
    		baseline,
    		flipped,
    		snapTicks,
    		ticks,
    		prefix,
    		suffix,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		lineColor,
    		textColor,
    		solid,
    		textAnchor,
    		tickVals,
    		isBandwidth,
    		$xScale,
    		$yRange,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ('gridlines' in $$props) $$invalidate(0, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(1, formatTick = $$props.formatTick);
    		if ('baseline' in $$props) $$invalidate(2, baseline = $$props.baseline);
    		if ('flipped' in $$props) $$invalidate(3, flipped = $$props.flipped);
    		if ('snapTicks' in $$props) $$invalidate(22, snapTicks = $$props.snapTicks);
    		if ('ticks' in $$props) $$invalidate(23, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(5, suffix = $$props.suffix);
    		if ('xTick' in $$props) $$invalidate(6, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(7, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(8, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(9, dyTick = $$props.dyTick);
    		if ('lineColor' in $$props) $$invalidate(10, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(11, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(12, solid = $$props.solid);
    		if ('tickVals' in $$props) $$invalidate(15, tickVals = $$props.tickVals);
    		if ('isBandwidth' in $$props) $$invalidate(13, isBandwidth = $$props.isBandwidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$xScale*/ 16384) {
    			$$invalidate(13, isBandwidth = typeof $xScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $xScale*/ 8413184) {
    			$$invalidate(15, tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth ? $xScale.domain() : $xScale.ticks(ticks));
    		}
    	};

    	return [
    		gridlines,
    		formatTick,
    		baseline,
    		flipped,
    		prefix,
    		suffix,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		lineColor,
    		textColor,
    		solid,
    		isBandwidth,
    		$xScale,
    		tickVals,
    		$yRange,
    		$height,
    		height,
    		xScale,
    		yRange,
    		textAnchor,
    		snapTicks,
    		ticks
    	];
    }

    class AxisX extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			gridlines: 0,
    			formatTick: 1,
    			baseline: 2,
    			flipped: 3,
    			snapTicks: 22,
    			ticks: 23,
    			prefix: 4,
    			suffix: 5,
    			xTick: 6,
    			yTick: 7,
    			dxTick: 8,
    			dyTick: 9,
    			lineColor: 10,
    			textColor: 11,
    			solid: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisX",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get gridlines() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get baseline() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set baseline(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flipped() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flipped(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get snapTicks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set snapTicks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lineColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<AxisX>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<AxisX>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/AxisY.svelte generated by Svelte v3.43.1 */
    const file$9 = "src/charts/AxisY.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	child_ctx[24] = i;
    	return child_ctx;
    }

    // (31:3) {#if gridlines !== false}
    function create_if_block_1$3(ctx) {
    	let line;
    	let line_y__value;
    	let line_y__value_1;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "x2", "100%");

    			attr_dev(line, "y1", line_y__value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0));

    			attr_dev(line, "y2", line_y__value_1 = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0));

    			attr_dev(line, "stroke", /*lineColor*/ ctx[9]);
    			attr_dev(line, "class", "svelte-e79qfe");
    			toggle_class(line, "baseline", /*solid*/ ctx[11]);
    			add_location(line, file$9, 31, 4, 905);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yTick, isBandwidth, $yScale*/ 12320 && line_y__value !== (line_y__value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 12320 && line_y__value_1 !== (line_y__value_1 = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0))) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*lineColor*/ 512) {
    				attr_dev(line, "stroke", /*lineColor*/ ctx[9]);
    			}

    			if (dirty & /*solid*/ 2048) {
    				toggle_class(line, "baseline", /*solid*/ ctx[11]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(31:3) {#if gridlines !== false}",
    		ctx
    	});

    	return block;
    }

    // (50:4) {:else}
    function create_else_block$3(ctx) {
    	let t_value = /*formatTick*/ ctx[3](/*tick*/ ctx[22]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formatTick, tickVals*/ 16392 && t_value !== (t_value = /*formatTick*/ ctx[3](/*tick*/ ctx[22]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(50:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:4) {#if i == tickVals.length - 1}
    function create_if_block$5(ctx) {
    	let t0;
    	let t1_value = /*formatTick*/ ctx[3](/*tick*/ ctx[22]) + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(/*prefix*/ ctx[0]);
    			t1 = text(t1_value);
    			t2 = text(/*suffix*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prefix*/ 1) set_data_dev(t0, /*prefix*/ ctx[0]);
    			if (dirty & /*formatTick, tickVals*/ 16392 && t1_value !== (t1_value = /*formatTick*/ ctx[3](/*tick*/ ctx[22]) + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*suffix*/ 2) set_data_dev(t2, /*suffix*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(48:4) {#if i == tickVals.length - 1}",
    		ctx
    	});

    	return block;
    }

    // (29:1) {#each tickVals as tick, i}
    function create_each_block$4(ctx) {
    	let g;
    	let text_1;
    	let text_1_y_value;
    	let text_1_dx_value;
    	let text_1_dy_value;
    	let g_class_value;
    	let g_transform_value;
    	let if_block0 = /*gridlines*/ ctx[2] !== false && create_if_block_1$3(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*i*/ ctx[24] == /*tickVals*/ ctx[14].length - 1) return create_if_block$5;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if (if_block0) if_block0.c();
    			text_1 = svg_element("text");
    			if_block1.c();
    			attr_dev(text_1, "x", /*xTick*/ ctx[4]);

    			attr_dev(text_1, "y", text_1_y_value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0));

    			attr_dev(text_1, "dx", text_1_dx_value = /*isBandwidth*/ ctx[12] ? 3 : /*dxTick*/ ctx[6]);
    			attr_dev(text_1, "dy", text_1_dy_value = /*isBandwidth*/ ctx[12] ? 4 : /*dyTick*/ ctx[7]);
    			attr_dev(text_1, "fill", /*textColor*/ ctx[10]);
    			set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[12] ? 'end' : /*textAnchor*/ ctx[8]);
    			add_location(text_1, file$9, 39, 3, 1137);
    			attr_dev(g, "class", g_class_value = "tick tick-" + /*tick*/ ctx[22] + " svelte-e79qfe");
    			attr_dev(g, "transform", g_transform_value = "translate(" + (/*$xRange*/ ctx[16][0] + (/*isBandwidth*/ ctx[12] ? /*$padding*/ ctx[15].left : 0)) + ", " + /*$yScale*/ ctx[13](/*tick*/ ctx[22]) + ")");
    			add_location(g, file$9, 29, 2, 754);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, text_1);
    			if_block1.m(text_1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gridlines*/ ctx[2] !== false) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					if_block0.m(g, text_1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(text_1, null);
    				}
    			}

    			if (dirty & /*xTick*/ 16) {
    				attr_dev(text_1, "x", /*xTick*/ ctx[4]);
    			}

    			if (dirty & /*yTick, isBandwidth, $yScale*/ 12320 && text_1_y_value !== (text_1_y_value = /*yTick*/ ctx[5] + (/*isBandwidth*/ ctx[12]
    			? /*$yScale*/ ctx[13].bandwidth() / 2
    			: 0))) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*isBandwidth, dxTick*/ 4160 && text_1_dx_value !== (text_1_dx_value = /*isBandwidth*/ ctx[12] ? 3 : /*dxTick*/ ctx[6])) {
    				attr_dev(text_1, "dx", text_1_dx_value);
    			}

    			if (dirty & /*isBandwidth, dyTick*/ 4224 && text_1_dy_value !== (text_1_dy_value = /*isBandwidth*/ ctx[12] ? 4 : /*dyTick*/ ctx[7])) {
    				attr_dev(text_1, "dy", text_1_dy_value);
    			}

    			if (dirty & /*textColor*/ 1024) {
    				attr_dev(text_1, "fill", /*textColor*/ ctx[10]);
    			}

    			if (dirty & /*isBandwidth, textAnchor*/ 4352) {
    				set_style(text_1, "text-anchor", /*isBandwidth*/ ctx[12] ? 'end' : /*textAnchor*/ ctx[8]);
    			}

    			if (dirty & /*tickVals*/ 16384 && g_class_value !== (g_class_value = "tick tick-" + /*tick*/ ctx[22] + " svelte-e79qfe")) {
    				attr_dev(g, "class", g_class_value);
    			}

    			if (dirty & /*$xRange, isBandwidth, $padding, $yScale, tickVals*/ 126976 && g_transform_value !== (g_transform_value = "translate(" + (/*$xRange*/ ctx[16][0] + (/*isBandwidth*/ ctx[12] ? /*$padding*/ ctx[15].left : 0)) + ", " + /*$yScale*/ ctx[13](/*tick*/ ctx[22]) + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(29:1) {#each tickVals as tick, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let g;
    	let g_transform_value;
    	let each_value = /*tickVals*/ ctx[14];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "axis y-axis");
    			attr_dev(g, "transform", g_transform_value = "translate(" + -/*$padding*/ ctx[15].left + ", 0)");
    			add_location(g, file$9, 27, 0, 656);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*tickVals, $xRange, isBandwidth, $padding, $yScale, xTick, yTick, dxTick, dyTick, textColor, textAnchor, suffix, formatTick, prefix, lineColor, solid, gridlines*/ 131071) {
    				each_value = /*tickVals*/ ctx[14];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$padding*/ 32768 && g_transform_value !== (g_transform_value = "translate(" + -/*$padding*/ ctx[15].left + ", 0)")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let isBandwidth;
    	let tickVals;
    	let $yScale;
    	let $padding;
    	let $xRange;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AxisY', slots, []);
    	const { padding, xRange, xScale, yScale } = getContext('LayerCake');
    	validate_store(padding, 'padding');
    	component_subscribe($$self, padding, value => $$invalidate(15, $padding = value));
    	validate_store(xRange, 'xRange');
    	component_subscribe($$self, xRange, value => $$invalidate(16, $xRange = value));
    	validate_store(yScale, 'yScale');
    	component_subscribe($$self, yScale, value => $$invalidate(13, $yScale = value));
    	let { ticks = 4 } = $$props;
    	let { prefix = '' } = $$props;
    	let { suffix = '' } = $$props;
    	let { gridlines = true } = $$props;
    	let { formatTick = d => d } = $$props;
    	let { xTick = 0 } = $$props;
    	let { yTick = 0 } = $$props;
    	let { dxTick = 0 } = $$props;
    	let { dyTick = -4 } = $$props;
    	let { textAnchor = 'start' } = $$props;
    	let { lineColor = '#aaa' } = $$props;
    	let { textColor = '#666' } = $$props;
    	let { solid = false } = $$props;

    	const writable_props = [
    		'ticks',
    		'prefix',
    		'suffix',
    		'gridlines',
    		'formatTick',
    		'xTick',
    		'yTick',
    		'dxTick',
    		'dyTick',
    		'textAnchor',
    		'lineColor',
    		'textColor',
    		'solid'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AxisY> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ticks' in $$props) $$invalidate(20, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(0, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(1, suffix = $$props.suffix);
    		if ('gridlines' in $$props) $$invalidate(2, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(3, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(4, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(5, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(6, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(7, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(8, textAnchor = $$props.textAnchor);
    		if ('lineColor' in $$props) $$invalidate(9, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(10, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(11, solid = $$props.solid);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		padding,
    		xRange,
    		xScale,
    		yScale,
    		ticks,
    		prefix,
    		suffix,
    		gridlines,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		lineColor,
    		textColor,
    		solid,
    		isBandwidth,
    		tickVals,
    		$yScale,
    		$padding,
    		$xRange
    	});

    	$$self.$inject_state = $$props => {
    		if ('ticks' in $$props) $$invalidate(20, ticks = $$props.ticks);
    		if ('prefix' in $$props) $$invalidate(0, prefix = $$props.prefix);
    		if ('suffix' in $$props) $$invalidate(1, suffix = $$props.suffix);
    		if ('gridlines' in $$props) $$invalidate(2, gridlines = $$props.gridlines);
    		if ('formatTick' in $$props) $$invalidate(3, formatTick = $$props.formatTick);
    		if ('xTick' in $$props) $$invalidate(4, xTick = $$props.xTick);
    		if ('yTick' in $$props) $$invalidate(5, yTick = $$props.yTick);
    		if ('dxTick' in $$props) $$invalidate(6, dxTick = $$props.dxTick);
    		if ('dyTick' in $$props) $$invalidate(7, dyTick = $$props.dyTick);
    		if ('textAnchor' in $$props) $$invalidate(8, textAnchor = $$props.textAnchor);
    		if ('lineColor' in $$props) $$invalidate(9, lineColor = $$props.lineColor);
    		if ('textColor' in $$props) $$invalidate(10, textColor = $$props.textColor);
    		if ('solid' in $$props) $$invalidate(11, solid = $$props.solid);
    		if ('isBandwidth' in $$props) $$invalidate(12, isBandwidth = $$props.isBandwidth);
    		if ('tickVals' in $$props) $$invalidate(14, tickVals = $$props.tickVals);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$yScale*/ 8192) {
    			$$invalidate(12, isBandwidth = typeof $yScale.bandwidth === 'function');
    		}

    		if ($$self.$$.dirty & /*ticks, isBandwidth, $yScale*/ 1060864) {
    			$$invalidate(14, tickVals = Array.isArray(ticks)
    			? ticks
    			: isBandwidth ? $yScale.domain() : $yScale.ticks(ticks));
    		}
    	};

    	return [
    		prefix,
    		suffix,
    		gridlines,
    		formatTick,
    		xTick,
    		yTick,
    		dxTick,
    		dyTick,
    		textAnchor,
    		lineColor,
    		textColor,
    		solid,
    		isBandwidth,
    		$yScale,
    		tickVals,
    		$padding,
    		$xRange,
    		padding,
    		xRange,
    		yScale,
    		ticks
    	];
    }

    class AxisY extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			ticks: 20,
    			prefix: 0,
    			suffix: 1,
    			gridlines: 2,
    			formatTick: 3,
    			xTick: 4,
    			yTick: 5,
    			dxTick: 6,
    			dyTick: 7,
    			textAnchor: 8,
    			lineColor: 9,
    			textColor: 10,
    			solid: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AxisY",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get ticks() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suffix() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suffix(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gridlines() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gridlines(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formatTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formatTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get xTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set xTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get yTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set yTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dxTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dxTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dyTick() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dyTick(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textAnchor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textAnchor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lineColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lineColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textColor() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textColor(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get solid() {
    		throw new Error("<AxisY>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set solid(value) {
    		throw new Error("<AxisY>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/Legend.svelte generated by Svelte v3.43.1 */

    const file$8 = "src/charts/Legend.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (15:4) {#each domain as label, i}
    function create_each_block$3(ctx) {
    	let li;
    	let div;
    	let t0;
    	let t1_value = /*label*/ ctx[8] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(div, "class", "bullet svelte-o1q0c0");
    			set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);

    			set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    			? /*markerWidth*/ ctx[5]
    			: /*markerLength*/ ctx[6]) + "px");

    			toggle_class(div, "round", /*round*/ ctx[7]);
    			add_location(div, file$8, 16, 8, 565);
    			attr_dev(li, "class", "svelte-o1q0c0");
    			add_location(li, file$8, 15, 6, 552);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*colors*/ 2) {
    				set_style(div, "background-color", /*colors*/ ctx[1][/*i*/ ctx[10]]);
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "width", (!/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*horizontal, line, comparison, markerWidth, markerLength*/ 124) {
    				set_style(div, "height", (/*horizontal*/ ctx[4] && (/*line*/ ctx[2] || /*comparison*/ ctx[3] && /*i*/ ctx[10] != 0)
    				? /*markerWidth*/ ctx[5]
    				: /*markerLength*/ ctx[6]) + "px");
    			}

    			if (dirty & /*round*/ 128) {
    				toggle_class(div, "round", /*round*/ ctx[7]);
    			}

    			if (dirty & /*domain*/ 1 && t1_value !== (t1_value = /*label*/ ctx[8] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(15:4) {#each domain as label, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let ul;
    	let each_value = /*domain*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "legend svelte-o1q0c0");
    			add_location(ul, file$8, 13, 2, 495);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*domain, colors, horizontal, line, comparison, markerWidth, markerLength, round*/ 255) {
    				each_value = /*domain*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Legend', slots, []);
    	let { domain = null } = $$props;
    	let { colors = null } = $$props;
    	let { line = false } = $$props;
    	let { comparison = false } = $$props;
    	let { horizontal = true } = $$props;
    	let { markerWidth = 2.5 } = $$props;
    	let { markerLength = 13 } = $$props;
    	let { round = false } = $$props;

    	const writable_props = [
    		'domain',
    		'colors',
    		'line',
    		'comparison',
    		'horizontal',
    		'markerWidth',
    		'markerLength',
    		'round'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Legend> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	$$self.$capture_state = () => ({
    		domain,
    		colors,
    		line,
    		comparison,
    		horizontal,
    		markerWidth,
    		markerLength,
    		round
    	});

    	$$self.$inject_state = $$props => {
    		if ('domain' in $$props) $$invalidate(0, domain = $$props.domain);
    		if ('colors' in $$props) $$invalidate(1, colors = $$props.colors);
    		if ('line' in $$props) $$invalidate(2, line = $$props.line);
    		if ('comparison' in $$props) $$invalidate(3, comparison = $$props.comparison);
    		if ('horizontal' in $$props) $$invalidate(4, horizontal = $$props.horizontal);
    		if ('markerWidth' in $$props) $$invalidate(5, markerWidth = $$props.markerWidth);
    		if ('markerLength' in $$props) $$invalidate(6, markerLength = $$props.markerLength);
    		if ('round' in $$props) $$invalidate(7, round = $$props.round);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [domain, colors, line, comparison, horizontal, markerWidth, markerLength, round];
    }

    class Legend extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			domain: 0,
    			colors: 1,
    			line: 2,
    			comparison: 3,
    			horizontal: 4,
    			markerWidth: 5,
    			markerLength: 6,
    			round: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Legend",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get domain() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set domain(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get colors() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set colors(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get line() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get comparison() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comparison(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get horizontal() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set horizontal(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerWidth() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerWidth(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get markerLength() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set markerLength(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get round() {
    		throw new Error("<Legend>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set round(value) {
    		throw new Error("<Legend>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/charts/DotPlotChart.svelte generated by Svelte v3.43.1 */

    const { Object: Object_1$2 } = globals;
    const file$7 = "src/charts/DotPlotChart.svelte";

    // (45:2) <Svg>
    function create_default_slot_2$1(ctx) {
    	let axisx;
    	let t0;
    	let axisy;
    	let t1;
    	let dotplot;
    	let current;
    	axisx = new AxisX({ $$inline: true });

    	axisy = new AxisY({
    			props: { gridlines: false },
    			$$inline: true
    		});

    	dotplot = new DotPlot({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(axisx.$$.fragment);
    			t0 = space();
    			create_component(axisy.$$.fragment);
    			t1 = space();
    			create_component(dotplot.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(axisx, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(axisy, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(dotplot, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axisx.$$.fragment, local);
    			transition_in(axisy.$$.fragment, local);
    			transition_in(dotplot.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axisx.$$.fragment, local);
    			transition_out(axisy.$$.fragment, local);
    			transition_out(dotplot.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(axisx, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(axisy, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(dotplot, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(45:2) <Svg>",
    		ctx
    	});

    	return block;
    }

    // (53:2) {#if labels}
    function create_if_block$4(ctx) {
    	let html;
    	let current;

    	html = new Html({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(html.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(html, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(html.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(html.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(html, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(53:2) {#if labels}",
    		ctx
    	});

    	return block;
    }

    // (54:2) <Html>
    function create_default_slot_1$1(ctx) {
    	let dotlabels;
    	let current;
    	dotlabels = new DotLabels({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(dotlabels.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dotlabels, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dotlabels.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dotlabels.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dotlabels, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(54:2) <Html>",
    		ctx
    	});

    	return block;
    }

    // (33:1) <LayerCake   padding={{ right: 0, bottom: 20, left: 0 }}   x={xKey}   y={yKey}   yScale={scaleBand().paddingInner([0.05]).round(true)}   yDomain={data.map(d => d[yKey])}   xPadding={[15, 0]}   zScale={scaleOrdinal()}   zDomain={xKey}   zRange={seriesColors}   data={data}  >
    function create_default_slot$1(ctx) {
    	let svg;
    	let t;
    	let if_block_anchor;
    	let current;

    	svg = new Svg({
    			props: {
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*labels*/ ctx[2] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			create_component(svg.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(svg, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const svg_changes = {};

    			if (dirty & /*$$scope*/ 64) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);

    			if (/*labels*/ ctx[2]) {
    				if (if_block) {
    					if (dirty & /*labels*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svg.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svg.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(svg, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(33:1) <LayerCake   padding={{ right: 0, bottom: 20, left: 0 }}   x={xKey}   y={yKey}   yScale={scaleBand().paddingInner([0.05]).round(true)}   yDomain={data.map(d => d[yKey])}   xPadding={[15, 0]}   zScale={scaleOrdinal()}   zDomain={xKey}   zRange={seriesColors}   data={data}  >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let layercake;
    	let t;
    	let legend;
    	let current;

    	layercake = new LayerCake({
    			props: {
    				padding: { right: 0, bottom: 20, left: 0 },
    				x: /*xKey*/ ctx[3],
    				y: yKey,
    				yScale: band().paddingInner([0.05]).round(true),
    				yDomain: /*data*/ ctx[0].map(/*func*/ ctx[5]),
    				xPadding: [15, 0],
    				zScale: ordinal(),
    				zDomain: /*xKey*/ ctx[3],
    				zRange: /*seriesColors*/ ctx[4],
    				data: /*data*/ ctx[0],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	legend = new Legend({
    			props: {
    				domain: /*xKey*/ ctx[3],
    				colors: /*seriesColors*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(layercake.$$.fragment);
    			t = space();
    			create_component(legend.$$.fragment);
    			attr_dev(div, "class", "chart-container svelte-ivcd9i");
    			set_style(div, "height", /*height*/ ctx[1] + "px");
    			add_location(div, file$7, 31, 0, 767);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(layercake, div, null);
    			insert_dev(target, t, anchor);
    			mount_component(legend, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const layercake_changes = {};
    			if (dirty & /*data*/ 1) layercake_changes.yDomain = /*data*/ ctx[0].map(/*func*/ ctx[5]);
    			if (dirty & /*data*/ 1) layercake_changes.data = /*data*/ ctx[0];

    			if (dirty & /*$$scope, labels*/ 68) {
    				layercake_changes.$$scope = { dirty, ctx };
    			}

    			layercake.$set(layercake_changes);

    			if (!current || dirty & /*height*/ 2) {
    				set_style(div, "height", /*height*/ ctx[1] + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(layercake.$$.fragment, local);
    			transition_in(legend.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(layercake.$$.fragment, local);
    			transition_out(legend.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(layercake);
    			if (detaching) detach_dev(t);
    			destroy_component(legend, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const yKey = 'label';

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DotPlotChart', slots, []);
    	let { data } = $$props;
    	let { height = 400 } = $$props;
    	let { labels = false } = $$props;
    	const xKey = Object.keys(data[0]).filter(d => d !== yKey);
    	const seriesColors = ['#DF0667', '#3C388E', '#2166ac', '#b2182b', 'grey'];

    	data.forEach(d => {
    		xKey.forEach(name => {
    			d[name] = +d[name];
    		});
    	});

    	const writable_props = ['data', 'height', 'labels'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DotPlotChart> was created with unknown prop '${key}'`);
    	});

    	const func = d => d[yKey];

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('labels' in $$props) $$invalidate(2, labels = $$props.labels);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		LayerCake,
    		Svg,
    		Html,
    		scaleBand: band,
    		scaleOrdinal: ordinal,
    		DotPlot,
    		DotLabels,
    		AxisX,
    		AxisY,
    		Legend,
    		data,
    		height,
    		labels,
    		yKey,
    		xKey,
    		seriesColors
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('labels' in $$props) $$invalidate(2, labels = $$props.labels);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data, height, labels, xKey, seriesColors, func];
    }

    class DotPlotChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { data: 0, height: 1, labels: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DotPlotChart",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !('data' in props)) {
    			console.warn("<DotPlotChart> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<DotPlotChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<DotPlotChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<DotPlotChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<DotPlotChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labels() {
    		throw new Error("<DotPlotChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<DotPlotChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Reports.svelte generated by Svelte v3.43.1 */

    const { Object: Object_1$1, console: console_1$2, document: document_1 } = globals;
    const file$6 = "src/Reports.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[40] = list[i];
    	child_ctx[42] = i;
    	return child_ctx;
    }

    // (570:1) {#if place}
    function create_if_block$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*ladLoaded*/ ctx[6] && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*ladLoaded*/ ctx[6]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*ladLoaded*/ 64) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(570:1) {#if place}",
    		ctx
    	});

    	return block;
    }

    // (571:2) {#if ladLoaded}
    function create_if_block_1$2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*loaded*/ ctx[8] && create_if_block_2$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*loaded*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*loaded*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(571:2) {#if ladLoaded}",
    		ctx
    	});

    	return block;
    }

    // (572:2) {#if loaded}
    function create_if_block_2$2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*eng*/ ctx[3] && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*eng*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*eng*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(572:2) {#if loaded}",
    		ctx
    	});

    	return block;
    }

    // (573:3) {#if eng}
    function create_if_block_3$2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*rgn*/ ctx[4] && create_if_block_4$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*rgn*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*rgn*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_4$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(573:3) {#if eng}",
    		ctx
    	});

    	return block;
    }

    // (574:4) {#if rgn}
    function create_if_block_4$2(ctx) {
    	let div3;
    	let div2;
    	let h1;
    	let t0_value = cap(/*place*/ ctx[2].name) + "";
    	let t0;
    	let t1;
    	let span0;
    	let t3;
    	let div1;
    	let div0;
    	let select;
    	let updating_selected;
    	let t4;
    	let html_tag;
    	let raw_value = /*standfirst*/ ctx[12](/*place*/ ctx[2], /*topics*/ ctx[5]) + "";
    	let t5;
    	let p0;
    	let t6;
    	let span1;
    	let t8;

    	let t9_value = (/*place*/ ctx[2].gss
    	? /*place*/ ctx[2].gss.long
    	: "local authority district") + "";

    	let t9;
    	let t10;
    	let t11;
    	let main;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t12;
    	let button;
    	let div4;
    	let svg;
    	let t13;
    	let t14_value = (/*more*/ ctx[7] ? 'Read less' : 'Read more') + "";
    	let t14;
    	let t15;
    	let hr;
    	let t16;
    	let h2;
    	let t18;
    	let p1;
    	let t20;
    	let p2;
    	let t22;
    	let div5;
    	let current;
    	let mounted;
    	let dispose;

    	function select_selected_binding(value) {
    		/*select_selected_binding*/ ctx[16](value);
    	}

    	let select_props = {
    		options: /*options*/ ctx[0],
    		group: "typenm",
    		search: true
    	};

    	if (/*selected*/ ctx[1] !== void 0) {
    		select_props.selected = /*selected*/ ctx[1];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'selected', select_selected_binding));
    	select.$on("select", /*select_handler*/ ctx[17]);
    	let each_value = /*results*/ ctx[9](/*rgn*/ ctx[4], /*place*/ ctx[2], /*topics*/ ctx[5]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*i*/ ctx[42];
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	function select_block_type(ctx, dirty) {
    		if (/*more*/ ctx[7]) return create_if_block_5$2;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = text(": ");
    			span0 = element("span");
    			span0.textContent = "Changes over time";
    			t3 = space();
    			div1 = element("div");
    			div0 = element("div");
    			create_component(select.$$.fragment);
    			t4 = space();
    			html_tag = new HtmlTag();
    			t5 = space();
    			p0 = element("p");
    			t6 = text("Here are some of the ");
    			span1 = element("span");
    			span1.textContent = "most notable changes";
    			t8 = text(" from across the ");
    			t9 = text(t9_value);
    			t10 = text(".");
    			t11 = space();
    			main = element("main");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t12 = space();
    			button = element("button");
    			div4 = element("div");
    			svg = svg_element("svg");
    			if_block.c();
    			t13 = space();
    			t14 = text(t14_value);
    			t15 = space();
    			hr = element("hr");
    			t16 = space();
    			h2 = element("h2");
    			h2.textContent = "Creating this article";
    			t18 = space();
    			p1 = element("p");
    			p1.textContent = "This article was generated using some automation. Topics are selected based on the most notable changes seen in each local authority.";
    			t20 = space();
    			p2 = element("p");
    			p2.textContent = "Notable changes include a high percentage point shift, a pattern of change that differs from the pattern seen at the regional or national level, and the shifting of a variable for which the area ranks considerably high or low.";
    			t22 = space();
    			div5 = element("div");
    			set_style(span0, "font-weight", "400");
    			add_location(span0, file$6, 576, 30, 14826);
    			attr_dev(h1, "class", "svelte-1eybmbe");
    			add_location(h1, file$6, 576, 7, 14803);
    			set_style(div0, "width", "640px");
    			set_style(div0, "margin", "50px auto");
    			add_location(div0, file$6, 578, 8, 14909);
    			add_location(div1, file$6, 577, 7, 14895);
    			html_tag.a = t5;
    			attr_dev(span1, "class", "back-to-top svelte-1eybmbe");
    			add_location(span1, file$6, 583, 31, 15194);
    			add_location(p0, file$6, 583, 7, 15170);
    			set_style(div2, "width", "640px");
    			set_style(div2, "margin", "0 auto");
    			add_location(div2, file$6, 575, 6, 14753);
    			attr_dev(div3, "id", "sf");
    			attr_dev(div3, "class", "svelte-1eybmbe");
    			add_location(div3, file$6, 574, 5, 14733);
    			attr_dev(svg, "height", "25");
    			attr_dev(svg, "width", "50");
    			add_location(svg, file$6, 597, 8, 15719);
    			attr_dev(div4, "class", "triangle-container svelte-1eybmbe");
    			add_location(div4, file$6, 596, 7, 15678);
    			attr_dev(button, "class", "svelte-1eybmbe");
    			add_location(button, file$6, 595, 6, 15642);
    			attr_dev(hr, "class", "svelte-1eybmbe");
    			add_location(hr, file$6, 607, 6, 16038);
    			attr_dev(h2, "id", "create");
    			add_location(h2, file$6, 608, 6, 16050);
    			add_location(p1, file$6, 609, 6, 16099);
    			add_location(p2, file$6, 610, 6, 16246);
    			set_style(div5, "height", "200px");
    			add_location(div5, file$6, 611, 6, 16486);
    			attr_dev(main, "class", "svelte-1eybmbe");
    			add_location(main, file$6, 586, 5, 15372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, h1);
    			append_dev(h1, t0);
    			append_dev(h1, t1);
    			append_dev(h1, span0);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			mount_component(select, div0, null);
    			append_dev(div2, t4);
    			html_tag.m(raw_value, div2);
    			append_dev(div2, t5);
    			append_dev(div2, p0);
    			append_dev(p0, t6);
    			append_dev(p0, span1);
    			append_dev(p0, t8);
    			append_dev(p0, t9);
    			append_dev(p0, t10);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, main, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(main, null);
    			}

    			append_dev(main, t12);
    			append_dev(main, button);
    			append_dev(button, div4);
    			append_dev(div4, svg);
    			if_block.m(svg, null);
    			append_dev(button, t13);
    			append_dev(button, t14);
    			append_dev(main, t15);
    			append_dev(main, hr);
    			append_dev(main, t16);
    			append_dev(main, h2);
    			append_dev(main, t18);
    			append_dev(main, p1);
    			append_dev(main, t20);
    			append_dev(main, p2);
    			append_dev(main, t22);
    			append_dev(main, div5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span1, "click", goTop, false, false, false),
    					listen_dev(button, "click", /*readMore*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*place*/ 4) && t0_value !== (t0_value = cap(/*place*/ ctx[2].name) + "")) set_data_dev(t0, t0_value);
    			const select_changes = {};
    			if (dirty[0] & /*options*/ 1) select_changes.options = /*options*/ ctx[0];

    			if (!updating_selected && dirty[0] & /*selected*/ 2) {
    				updating_selected = true;
    				select_changes.selected = /*selected*/ ctx[1];
    				add_flush_callback(() => updating_selected = false);
    			}

    			select.$set(select_changes);
    			if ((!current || dirty[0] & /*place, topics*/ 36) && raw_value !== (raw_value = /*standfirst*/ ctx[12](/*place*/ ctx[2], /*topics*/ ctx[5]) + "")) html_tag.p(raw_value);

    			if ((!current || dirty[0] & /*place*/ 4) && t9_value !== (t9_value = (/*place*/ ctx[2].gss
    			? /*place*/ ctx[2].gss.long
    			: "local authority district") + "")) set_data_dev(t9, t9_value);

    			if (dirty[0] & /*chartType, results, rgn, place, topics, makeProps*/ 25140) {
    				each_value = /*results*/ ctx[9](/*rgn*/ ctx[4], /*place*/ ctx[2], /*topics*/ ctx[5]);
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, main, outro_and_destroy_block, create_each_block$2, t12, get_each_context$2);
    				check_outros();
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(svg, null);
    				}
    			}

    			if ((!current || dirty[0] & /*more*/ 128) && t14_value !== (t14_value = (/*more*/ ctx[7] ? 'Read less' : 'Read more') + "")) set_data_dev(t14, t14_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(select);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(main);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(574:4) {#if rgn}",
    		ctx
    	});

    	return block;
    }

    // (588:6) {#each results(rgn, place, topics) as res, i (i)}
    function create_each_block$2(key_1, ctx) {
    	let first;
    	let html_tag;
    	let raw_value = /*res*/ ctx[40] + "";
    	let t;
    	let div;
    	let switch_instance;
    	let current;
    	const switch_instance_spread_levels = [/*makeProps*/ ctx[13](/*i*/ ctx[42])];
    	var switch_value = /*chartType*/ ctx[14](/*i*/ ctx[42]);

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			html_tag = new HtmlTag();
    			t = space();
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			html_tag.a = t;
    			set_style(div, "width", "100%");
    			add_location(div, file$6, 590, 8, 15490);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*results, rgn, place, topics*/ 564) && raw_value !== (raw_value = /*res*/ ctx[40] + "")) html_tag.p(raw_value);

    			const switch_instance_changes = (dirty[0] & /*makeProps, results, rgn, place, topics*/ 8756)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*makeProps*/ ctx[13](/*i*/ ctx[42]))])
    			: {};

    			if (switch_value !== (switch_value = /*chartType*/ ctx[14](/*i*/ ctx[42]))) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if (detaching) html_tag.d();
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(588:6) {#each results(rgn, place, topics) as res, i (i)}",
    		ctx
    	});

    	return block;
    }

    // (601:10) {:else}
    function create_else_block$2(ctx) {
    	let polygon;

    	const block = {
    		c: function create() {
    			polygon = svg_element("polygon");
    			attr_dev(polygon, "points", "25,20 15,10 25,20 35,10");
    			attr_dev(polygon, "class", "triangle svelte-1eybmbe");
    			add_location(polygon, file$6, 601, 11, 15871);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, polygon, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(polygon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(601:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (599:10) {#if more}
    function create_if_block_5$2(ctx) {
    	let polygon;

    	const block = {
    		c: function create() {
    			polygon = svg_element("polygon");
    			attr_dev(polygon, "points", "25,10 15,20 25,10 35,20");
    			attr_dev(polygon, "class", "triangle svelte-1eybmbe");
    			add_location(polygon, file$6, 599, 11, 15780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, polygon, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(polygon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(599:10) {#if more}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let script0;
    	let script0_src_value;
    	let script1;
    	let script1_src_value;
    	let t;
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*place*/ ctx[2] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			script0 = element("script");
    			script1 = element("script");
    			t = space();
    			div = element("div");
    			if (if_block) if_block.c();
    			if (!src_url_equal(script0.src, script0_src_value = "https://d3js.org/d3.v3.min.js")) attr_dev(script0, "src", script0_src_value);
    			attr_dev(script0, "charset", "utf-8");
    			add_location(script0, file$6, 564, 1, 14431);
    			if (!src_url_equal(script1.src, script1_src_value = "https://unpkg.com/rosaenlg@3.0.1/dist/rollup/rosaenlg_tiny_en_US_3.0.1_comp.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$6, 565, 1, 14502);
    			add_location(div, file$6, 568, 0, 14648);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document_1.head, script0);
    			append_dev(document_1.head, script1);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(script1, "load", /*onRosaeNlgLoad*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*place*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*place*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(script0);
    			detach_dev(script1);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function cap(string) {
    	return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function goTop() {
    	let creation = document.getElementById('create');
    	creation.scrollIntoView();
    }

    // MAKE CHARTS
    function makeChartData(place, region, england, i) {
    	let temp = [];
    	let arr = [place, region, england];

    	if (place) {
    		for (const k in { 2015: "", 2016: "", 2017: "", 2018: "" }) {
    			for (const j in arr) {
    				let top = arr[j].data[subDomains[i]['Domain']]['subdomains'][subDomains[i]['Subdomain']].total;

    				temp.push({
    					year: parseInt(k),
    					value: top[k]['value'],
    					group: arr[j].name
    				});
    			}
    		}
    	}

    	return temp;
    }

    function fbp(x) {
    	return Number.parseFloat(Number.parseFloat(0.714 * x).toPrecision(2));
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Reports', slots, []);

    	function fuzz(w1, w2) {
    		const options = { includeScore: true };
    		const fuse = new Fuse([w1], options);
    		const result = fuse.search(w2);

    		if (result.length > 0) {
    			return false;
    		} else {
    			return true;
    		}
    	}

    	var options,
    		selected,
    		place,
    		locRankCha,
    		locRankCur,
    		eng,
    		rgncode,
    		rgn,
    		s,
    		natRankCha,
    		natRankCur,
    		topics,
    		wal,
    		found,
    		ladData,
    		props;

    	var health, expand, ladLoaded, cou;

    	const findOne = (haystack, arr) => {
    		return arr.some(v => haystack.includes(v));
    	};

    	var more = false;
    	var topics;
    	fetch("./archie.aml").then(res => res.text()).then(txt => $$invalidate(5, topics = archieml.load(txt)));
    	var puggy;
    	fetch("./puggy.pug").then(res => res.text()).then(txt => puggy = txt);
    	var stand;
    	fetch("./standf.pug").then(res => res.text()).then(txt => stand = txt);

    	const types = {
    		ew: { name: '', pl: '' },
    		wd: { name: 'Ward', pl: 'Wards' },
    		lad: { name: 'District', pl: 'Districts' },
    		rgn: { name: 'Region', pl: 'Regions' },
    		ctry: { name: 'Country', pl: 'Countries' }
    	};

    	let loaded = false;

    	const onRosaeNlgLoad = () => {
    		$$invalidate(8, loaded = true);
    	};

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/laddata.csv").then(res => {
    		res.forEach(d => {
    			d.code = d[""];
    			delete d[""];
    		});

    		ladData = res;
    		$$invalidate(6, ladLoaded = true);
    	});

    	var regionLU = {};

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Corresponding%20Local%20Authorities-Table%201.csv").then(res => {
    		res.forEach(d => {
    			regionLU[d['Name']] = d['Region/Country'];
    		});
    	});

    	var countyLU = {};

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Local_Authority_District_to_County_(April_2021)_Lookup_in_England.csv").then(res => {
    		res.forEach(d => {
    			countyLU[d['LAD21NM']] = d['CTY21NM'];
    		});
    	});

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Local_Authority_Districts_(May_2021)_UK_BFE_V3.csv").then(res => {
    		res.forEach(d => {
    			d.code = d.LAD21CD;
    			d.name = d.LAD21NM;
    		});

    		res = res.filter(d => d['LAD21CD'].substring(0, 1) != 'S' & d['LAD21CD'].substring(0, 1) != 'N');
    		$$invalidate(0, options = res.sort((a, b) => a.LAD21NM.localeCompare(b.LAD21NM)));
    		let defaultLoc = options[Math.round(331 * Math.random())]['LAD21NM'];

    		// defaultLoc = 'Winchester';
    		console.log(defaultLoc);

    		$$invalidate(1, selected = options.find(d => d.LAD21NM == defaultLoc));
    		console.log(selected.LAD21CD);
    		loadArea(selected.LAD21CD);
    	});

    	function loadArea(code) {
    		fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/" + code + ".json").then(res => res.json()).then(json => {
    			json.children = options.filter(d => d.parent == code);
    			json.siblings = options.filter(d => d.parent == json['parents'][0]['code']);
    			$$invalidate(2, place = json);
    			rgncode = place.parents[0].code;

    			fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/" + rgncode + ".json").then(res => res.json()).then(json => {
    				json.children = options.filter(d => d.parent == code);
    				json.siblings = options.filter(d => d.parent == json['parents'][0]['code']);
    				$$invalidate(4, rgn = json);
    				console.log('rgn', rgn);
    			});

    			// Define the word to describe population change in standfirst
    			if (place.data.population.value.change.all > 8) {
    				expand = "expanded";
    			} else if (place.data.population.value.change.all > 3) {
    				expand = "grew";
    			} else if (place.data.population.value.change.all > 0) {
    				expand = "did not change much";
    			} else {
    				expand = "shrunk";
    			}

    			// Define the word to describe health change in standfirst
    			if (place.data.health.perc.change.good > 0) {
    				health = "improved";
    			} else if (place.data.health.perc.change.good < 0) {
    				health = "deteriorated";
    			}

    			s = place.stories.map(d => d.label.split("_"));

    			s.forEach(e => {
    				if (e.length > 4) {
    					e[3] = e[3] + "_" + e[4];
    					e.pop();
    				}
    			});

    			locRankCha = s.map(d => parseInt(place.data[d[0]][d[1] + "_rank_local"][d[2]][d[3]]));
    			natRankCha = s.map(d => parseInt(place.data[d[0]][d[1] + "_rank"][d[2]][d[3]]));
    			locRankCur = s.map(d => parseInt(place.data[d[0]][d[1] + "_rank_local"]['2011'][d[3]]));
    			natRankCur = s.map(d => parseInt(place.data[d[0]][d[1] + "_rank"]['2011'][d[3]]));
    		});

    		fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/E92000001.json").then(res => res.json()).then(json => {
    			json.children = options.filter(d => d.parent == code);
    			json.siblings = options.filter(d => d.parent == json['parents'][0]['code']);
    			$$invalidate(3, eng = json);
    		});

    		fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/W92000004.json").then(res => res.json()).then(json => {
    			json.children = options.filter(d => d.parent == code);
    			json.siblings = options.filter(d => d.parent == json['parents'][0]['code']);
    			wal = json;
    		});
    	}

    	let grewSyn = {
    		1: "expanded",
    		2: "grew",
    		3: "grew",
    		4: "remained relatively stable",
    		5: "fell"
    	};

    	function iterate(obj, pname) {
    		Object.keys(obj).forEach(key => {
    			if (typeof obj[key] === 'object') {
    				iterate(obj[key], pname);
    			} else {
    				obj[key] = createText(obj[key], {
    					health,
    					health,
    					expanded: expand,
    					plcname: pname
    				});
    			}
    		});
    	}

    	function standfirst(place, topicsIn) {
    		var o = JSON.parse(JSON.stringify(topicsIn));
    		iterate(o, place.name);
    		let sf = [];
    		let changeMag = 0;

    		place.stories.forEach(e => {
    			if (sf.length < 4 & Math.abs(e['value']) > 3) {
    				sf.push(e['label'].split("_"));
    				changeMag = changeMag + Math.abs(e['value']);
    			}
    		});

    		return rosaenlg_en_US.render(stand, {
    			language: 'en_UK',
    			place,
    			topics: o,
    			s,
    			sf,
    			changeMag,
    			grewSyn,
    			qui,
    			natRankCha
    		});
    	}

    	function results(rgn, place, topicsIn) {
    		var o = JSON.parse(JSON.stringify(topicsIn));
    		iterate(o, place.name);

    		function topic(i, top) {
    			let ttop;

    			if (top) {
    				ttop = top;
    			} else {
    				ttop = s[i][3];
    			}

    			return o[s[i][0]][ttop];
    		}

    		console.log("topics", o);
    		cou = place.parents[0].name == "Wales" ? wal : eng;

    		let res = rosaenlg_en_US.render(puggy, {
    			language: 'en_UK',
    			place,
    			data: place.data,
    			cou,
    			// replace eng with country data (inc Wales)
    			eng,
    			rgn,
    			uncap1,
    			regionThe,
    			parent: uncap1(regionThe(place.parents[0].name)),
    			parentNT: uncap1(regionThe(place.parents[0].name, "NT")),
    			s,
    			stories: place.stories,
    			priorities: place.Priorities,
    			grewSyn,
    			locRankCha,
    			natRankCha,
    			locRankCur,
    			natRankCur,
    			hiRank: place.hiRank,
    			topic,
    			topics: o,
    			chains,
    			country: place.parents[0].name == "Wales" ? "Wales" : "England",
    			get_word,
    			figs,
    			otherEst,
    			cur,
    			cha,
    			qui,
    			cap,
    			cap,
    			otherRank,
    			ud,
    			city,
    			drop,
    			drop,
    			ord,
    			ageBandLU,
    			eq,
    			nuword,
    			sign,
    			udord,
    			near: place.nearbyArea.nearTops,
    			simi: place.similar,
    			adv,
    			uds,
    			more,
    			pluralize,
    			pluralize,
    			countyLU,
    			fuzz,
    			prev,
    			regionLU,
    			findOne
    		});

    		return res.split(`<div id="esc123"></div>`);
    	}

    	onMount(() => {
    		setInterval(
    			function () {
    				d3.selectAll('div#visph').attr('style', `
			background-color: #f6f6f6; 
			color: #e1e7ea; 
			height: 240px;
			padding: 80px;
			font-size: 2.8rem;
			font-weight: 600;
			margin-bottom: 80px;`);
    			},
    			1000
    		);
    	});

    	function makeProps(i) {
    		let s = place.stories[i].label.split("_");

    		if (s.length > 4) {
    			s[3] = s[3] + "_" + s[4];
    			s.pop();
    		}

    		if (s[0] == "agemed") {
    			function dtrans(d, g) {
    				let a = [];

    				Object.keys(d).forEach(e => {
    					a.push({ 'x': e, 'y': d[e], g });
    				});

    				return a;
    			}

    			let chartData = [
    				[
    					dtrans(cou.data.age10yr.perc['2001'], 2011),
    					dtrans(cou.data.age10yr.perc['2011'], 2021)
    				],
    				[
    					dtrans(rgn.data.age10yr.perc['2001'], 2011),
    					dtrans(rgn.data.age10yr.perc['2011'], 2021)
    				],
    				[
    					dtrans(place.data.age10yr.perc['2001'], 2011),
    					dtrans(place.data.age10yr.perc['2011'], 2021)
    				]
    			];

    			let props = {
    				legend: true,
    				height: 120,
    				chartData,
    				labels: [cou.name, rgn.name, place.name],
    				xKey: "value",
    				yKey: "year"
    			};

    			return props;
    		} else if (s[0] == "care") {
    			let chartData = [
    				{ year: 2017, value: 320, group: 'apples' },
    				{ year: 2017, value: 480, group: 'bananas' },
    				{
    					year: 2017,
    					value: 640,
    					group: 'cherries'
    				},
    				{ year: 2017, value: 400, group: 'dates' },
    				{ year: 2018, value: 640, group: 'apples' },
    				{ year: 2018, value: 960, group: 'bananas' },
    				{
    					year: 2018,
    					value: 640,
    					group: 'cherries'
    				},
    				{ year: 2018, value: 400, group: 'dates' }
    			];

    			let props = {
    				legend: true,
    				height: 120,
    				data: chartData,
    				labels: [cou.name, rgn.name, place.name],
    				xKey: "year",
    				yKey: "value",
    				zKey: "group"
    			};

    			return props;
    		} else if (place.stories[i].type.includes('size')) {
    			if (s[0] == "population") {
    				if (rgn.name == 'Wales') {
    					return {
    						height: 120,
    						data: [
    							{
    								label: eng.name,
    								2011: fbp(eng.data.density.value[2001].all),
    								2021: fbp(eng.data.density.value[2011].all)
    							},
    							{
    								label: rgn.name,
    								2011: fbp(rgn.data.density.value[2001].all),
    								2021: fbp(rgn.data.density.value[2011].all)
    							},
    							{
    								label: place.name,
    								2011: fbp(place.data.density.value[2001].all),
    								2021: fbp(place.data.density.value[2011].all)
    							}
    						]
    					};
    				} else {
    					return {
    						height: 120,
    						data: [
    							{
    								label: rgn.name,
    								2011: fbp(rgn.data.density.value[2001].all),
    								2021: fbp(rgn.data.density.value[2011].all)
    							},
    							{
    								label: place.nearbyArea.nearTops.name.name,
    								2011: fbp(place.nearbyArea.nearTops.name.data.density.value[2001].all),
    								2021: fbp(place.nearbyArea.nearTops.name.data.density.value[2011].all)
    							},
    							{
    								label: place.name,
    								2011: fbp(place.data.density.value[2001].all),
    								2021: fbp(place.data.density.value[2011].all)
    							}
    						]
    					};
    				}
    			} else {
    				if (rgn.name == 'Wales') {
    					return {
    						legend: true,
    						height: 120,
    						data: [
    							{
    								label: rgn.name,
    								2011: rgn.data[s[0]][s[1]][2001][s[3]],
    								2021: rgn.data[s[0]][s[1]][2011][s[3]]
    							},
    							{
    								label: place.nearbyArea.nearTops.name,
    								2011: place.nearbyArea.nearTops.data[s[0]][s[1]][2001][s[3]],
    								2021: place.nearbyArea.nearTops.data[s[0]][s[1]][2011][s[3]]
    							},
    							{
    								label: place.name,
    								2011: place.data[s[0]][s[1]][2001][s[3]],
    								2021: place.data[s[0]][s[1]][2011][s[3]]
    							}
    						]
    					};
    				} else {
    					return {
    						legend: true,
    						height: 120,
    						data: [
    							{
    								label: eng.name,
    								2011: eng.data[s[0]][s[1]][2001][s[3]],
    								2021: eng.data[s[0]][s[1]][2011][s[3]]
    							},
    							{
    								label: place.parents[0].name,
    								2011: rgn.data[s[0]][s[1]][2001][s[3]],
    								2021: rgn.data[s[0]][s[1]][2011][s[3]]
    							},
    							{
    								label: place.name,
    								2011: place.data[s[0]][s[1]][2001][s[3]],
    								2021: place.data[s[0]][s[1]][2011][s[3]]
    							}
    						]
    					};
    				}
    			}
    		} else {
    			// ScatterChart
    			var chartdata;

    			if (s[0] == "population") {
    				s[0] = 'density';
    				s[3] = 'all';
    			}

    			chartdata = ladData.filter(d => d['parent'] == place.parents[0].name & d.topic == s[0] + "_" + s[3]);

    			chartdata = chartdata.map(d => ({
    				'change': d['change'],
    				'value': s[0] == "density"
    				? 0.714 * parseFloat(d[2011])
    				: parseFloat(d[2011]),
    				'unique': d['lad'],
    				'id': d['parent']
    			}));

    			chartdata.forEach((item, i) => {
    				if (item.unique == place.name) {
    					item.id = place.name;
    				} else if (item.id == place.parents[0].name) {
    					item.id = "Rest of " + uncap1(regionThe(place.parents[0].name));
    				} else {
    					item.id = "Rest of England";
    				}
    			});

    			chartdata.push({
    				change: +cou.data[s[0]][s[1]]['change'][s[3]],
    				value: +cou.data[s[0]][s[1]]['2011'][s[3]],
    				unique: 'Average across ' + cou.name,
    				id: 'Average across ' + cou.name
    			});

    			return props = {
    				mode: "stacked",
    				line: false,
    				legend: true,
    				data: chartdata,
    				xKey: "value",
    				yKey: null,
    				rKey: "change",
    				r: [3, 9],
    				zKey: "id"
    			};
    		}
    	}

    	function chartType(i) {
    		let s = place.stories[i].label.split("_");

    		if (s.length > 4) {
    			s[3] = s[3] + "_" + s[4];
    			s.pop();
    		}

    		if (s[0] == 'agemed') {
    			return AgeChart;
    		} else if (s[0] == 'care') {
    			return ColumnChart;
    		} else if (place.stories[i].type.includes('size')) {
    			return DotPlotChart;
    		} else {
    			// LINECHART
    			return ScatterChart;
    		}
    	}

    	function readMore() {
    		$$invalidate(7, more = !more);
    		$$invalidate(9, results);
    	}

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Reports> was created with unknown prop '${key}'`);
    	});

    	function select_selected_binding(value) {
    		selected = value;
    		$$invalidate(1, selected);
    	}

    	const select_handler = () => {
    		if (selected) {
    			loadArea(selected.code);
    		}
    	};

    	$$self.$capture_state = () => ({
    		uds,
    		adv,
    		udord,
    		sign,
    		nuword,
    		eq,
    		ageBandLU,
    		ord,
    		uncap1,
    		getData,
    		regionThe,
    		drop,
    		ud,
    		otherRank,
    		otherEst,
    		qui,
    		cha,
    		cur,
    		figs,
    		get_word,
    		city,
    		chains,
    		prev,
    		Select,
    		load: archieml.load,
    		onMount,
    		robojournalist: createText,
    		pluralize,
    		Fuse,
    		LineChart,
    		ScatterChart,
    		ColumnChart,
    		AgeChart,
    		DotPlotChart,
    		fuzz,
    		options,
    		selected,
    		place,
    		locRankCha,
    		locRankCur,
    		eng,
    		rgncode,
    		rgn,
    		s,
    		natRankCha,
    		natRankCur,
    		topics,
    		wal,
    		found,
    		ladData,
    		props,
    		health,
    		expand,
    		ladLoaded,
    		cou,
    		findOne,
    		cap,
    		more,
    		puggy,
    		stand,
    		types,
    		loaded,
    		onRosaeNlgLoad,
    		regionLU,
    		countyLU,
    		loadArea,
    		grewSyn,
    		iterate,
    		standfirst,
    		results,
    		goTop,
    		makeChartData,
    		fbp,
    		makeProps,
    		chartType,
    		readMore
    	});

    	$$self.$inject_state = $$props => {
    		if ('options' in $$props) $$invalidate(0, options = $$props.options);
    		if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
    		if ('place' in $$props) $$invalidate(2, place = $$props.place);
    		if ('locRankCha' in $$props) locRankCha = $$props.locRankCha;
    		if ('locRankCur' in $$props) locRankCur = $$props.locRankCur;
    		if ('eng' in $$props) $$invalidate(3, eng = $$props.eng);
    		if ('rgncode' in $$props) rgncode = $$props.rgncode;
    		if ('rgn' in $$props) $$invalidate(4, rgn = $$props.rgn);
    		if ('s' in $$props) s = $$props.s;
    		if ('natRankCha' in $$props) natRankCha = $$props.natRankCha;
    		if ('natRankCur' in $$props) natRankCur = $$props.natRankCur;
    		if ('topics' in $$props) $$invalidate(5, topics = $$props.topics);
    		if ('wal' in $$props) wal = $$props.wal;
    		if ('found' in $$props) found = $$props.found;
    		if ('ladData' in $$props) ladData = $$props.ladData;
    		if ('props' in $$props) props = $$props.props;
    		if ('health' in $$props) health = $$props.health;
    		if ('expand' in $$props) expand = $$props.expand;
    		if ('ladLoaded' in $$props) $$invalidate(6, ladLoaded = $$props.ladLoaded);
    		if ('cou' in $$props) cou = $$props.cou;
    		if ('more' in $$props) $$invalidate(7, more = $$props.more);
    		if ('puggy' in $$props) puggy = $$props.puggy;
    		if ('stand' in $$props) stand = $$props.stand;
    		if ('loaded' in $$props) $$invalidate(8, loaded = $$props.loaded);
    		if ('regionLU' in $$props) regionLU = $$props.regionLU;
    		if ('countyLU' in $$props) countyLU = $$props.countyLU;
    		if ('grewSyn' in $$props) grewSyn = $$props.grewSyn;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		options,
    		selected,
    		place,
    		eng,
    		rgn,
    		topics,
    		ladLoaded,
    		more,
    		loaded,
    		results,
    		onRosaeNlgLoad,
    		loadArea,
    		standfirst,
    		makeProps,
    		chartType,
    		readMore,
    		select_selected_binding,
    		select_handler
    	];
    }

    class Reports extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Reports",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/ui/SelectB.svelte generated by Svelte v3.43.1 */
    const file$5 = "src/ui/SelectB.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	child_ctx[35] = list;
    	child_ctx[34] = i;
    	return child_ctx;
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	child_ctx[33] = list;
    	child_ctx[34] = i;
    	return child_ctx;
    }

    // (225:1) {:else}
    function create_else_block_1$1(ctx) {
    	let a;
    	let span0;

    	let t0_value = (/*placeholder*/ ctx[0]
    	? /*placeholder*/ ctx[0]
    	: 'Select one') + "";

    	let t0;
    	let t1;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			span1.textContent = " ";
    			attr_dev(span0, "class", "svelte-qdzmwx");
    			add_location(span0, file$5, 226, 2, 4768);
    			attr_dev(span1, "class", "button svelte-qdzmwx");
    			toggle_class(span1, "search", /*search*/ ctx[3]);
    			toggle_class(span1, "down", !/*search*/ ctx[3]);
    			add_location(span1, file$5, 227, 2, 4826);
    			attr_dev(a, "id", "toggle");
    			attr_dev(a, "class", "svelte-qdzmwx");
    			add_location(a, file$5, 225, 1, 4732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, span0);
    			append_dev(span0, t0);
    			append_dev(a, t1);
    			append_dev(a, span1);

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*toggle*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*placeholder*/ 1 && t0_value !== (t0_value = (/*placeholder*/ ctx[0]
    			? /*placeholder*/ ctx[0]
    			: 'Select one') + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*search*/ 8) {
    				toggle_class(span1, "search", /*search*/ ctx[3]);
    			}

    			if (dirty[0] & /*search*/ 8) {
    				toggle_class(span1, "down", !/*search*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(225:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (220:1) {#if selectedItem && !search}
    function create_if_block_4$1(ctx) {
    	let a;
    	let span0;
    	let t0_value = /*selectedItem*/ ctx[6][/*label*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let mounted;
    	let dispose;
    	let if_block = /*group*/ ctx[2] && create_if_block_5$1(ctx);

    	const block = {
    		c: function create() {
    			a = element("a");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = " ";
    			attr_dev(span0, "class", "selection svelte-qdzmwx");
    			add_location(span0, file$5, 221, 2, 4547);
    			attr_dev(span1, "class", "button close svelte-qdzmwx");
    			add_location(span1, file$5, 222, 2, 4655);
    			attr_dev(a, "id", "toggle");
    			attr_dev(a, "class", "selected svelte-qdzmwx");
    			add_location(a, file$5, 220, 1, 4494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			if (if_block) if_block.m(span0, null);
    			append_dev(a, t2);
    			append_dev(a, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(span1, "click", /*unSelect*/ ctx[14], false, false, false),
    					listen_dev(a, "click", /*toggle*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem, label*/ 66 && t0_value !== (t0_value = /*selectedItem*/ ctx[6][/*label*/ ctx[1]] + "")) set_data_dev(t0, t0_value);

    			if (/*group*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_5$1(ctx);
    					if_block.c();
    					if_block.m(span0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(220:1) {#if selectedItem && !search}",
    		ctx
    	});

    	return block;
    }

    // (222:48) {#if group}
    function create_if_block_5$1(ctx) {
    	let small;
    	let t_value = /*selectedItem*/ ctx[6][/*group*/ ctx[2]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			small = element("small");
    			t = text(t_value);
    			attr_dev(small, "class", "svelte-qdzmwx");
    			add_location(small, file$5, 221, 59, 4604);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, small, anchor);
    			append_dev(small, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem, group*/ 68 && t_value !== (t_value = /*selectedItem*/ ctx[6][/*group*/ ctx[2]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(small);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(222:48) {#if group}",
    		ctx
    	});

    	return block;
    }

    // (231:1) {#if expanded}
    function create_if_block$2(ctx) {
    	let div;
    	let input_1;
    	let t;
    	let ul;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*filter*/ ctx[4].length < 0) return create_if_block_1$1;
    		if (/*filtered*/ ctx[9][0] && /*group*/ ctx[2]) return create_if_block_2$1;
    		if (/*filtered*/ ctx[9][0]) return create_if_block_3$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			input_1 = element("input");
    			t = space();
    			ul = element("ul");
    			if_block.c();
    			attr_dev(input_1, "type", "text");
    			attr_dev(input_1, "placeholder", "");
    			attr_dev(input_1, "autocomplete", "false");
    			attr_dev(input_1, "class", "svelte-qdzmwx");
    			add_location(input_1, file$5, 232, 2, 4978);
    			attr_dev(ul, "class", "svelte-qdzmwx");
    			add_location(ul, file$5, 233, 2, 5095);
    			attr_dev(div, "id", "dropdown");
    			set_style(div, "top", "0");
    			attr_dev(div, "class", "svelte-qdzmwx");
    			add_location(div, file$5, 231, 1, 4925);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input_1);
    			set_input_value(input_1, /*filter*/ ctx[4]);
    			/*input_1_binding*/ ctx[23](input_1);
    			append_dev(div, t);
    			append_dev(div, ul);
    			if_block.m(ul, null);
    			/*div_binding*/ ctx[30](div);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[22]),
    					listen_dev(input_1, "keyup", /*doKeyup*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filter*/ 16 && input_1.value !== /*filter*/ ctx[4]) {
    				set_input_value(input_1, /*filter*/ ctx[4]);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(ul, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*input_1_binding*/ ctx[23](null);
    			if_block.d();
    			/*div_binding*/ ctx[30](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(231:1) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (249:3) {:else}
    function create_else_block$1(ctx) {
    	let li;

    	const block = {
    		c: function create() {
    			li = element("li");
    			li.textContent = "No results";
    			attr_dev(li, "class", "svelte-qdzmwx");
    			add_location(li, file$5, 249, 3, 5668);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(249:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (243:25) 
    function create_if_block_3$1(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*filtered*/ ctx[9];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*items, active, select, filtered, label*/ 11010) {
    				each_value_1 = /*filtered*/ ctx[9];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(243:25) ",
    		ctx
    	});

    	return block;
    }

    // (237:34) 
    function create_if_block_2$1(ctx) {
    	let each_1_anchor;
    	let each_value = /*filtered*/ ctx[9];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*items, active, select, filtered, group, label*/ 11014) {
    				each_value = /*filtered*/ ctx[9];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(237:34) ",
    		ctx
    	});

    	return block;
    }

    // (235:3) {#if filter.length < 0}
    function create_if_block_1$1(ctx) {
    	let li;

    	const block = {
    		c: function create() {
    			li = element("li");
    			li.textContent = "Type a name...";
    			attr_dev(li, "class", "svelte-qdzmwx");
    			add_location(li, file$5, 235, 3, 5130);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(235:3) {#if filter.length < 0}",
    		ctx
    	});

    	return block;
    }

    // (244:3) {#each filtered as option, i}
    function create_each_block_1(ctx) {
    	let li;
    	let t0_value = /*option*/ ctx[32][/*label*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let i = /*i*/ ctx[34];
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[27](/*option*/ ctx[32]);
    	}

    	function mouseover_handler_1() {
    		return /*mouseover_handler_1*/ ctx[28](/*i*/ ctx[34]);
    	}

    	const assign_li = () => /*li_binding_1*/ ctx[29](li, i);
    	const unassign_li = () => /*li_binding_1*/ ctx[29](null, i);

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(li, "class", "svelte-qdzmwx");
    			toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[34]);
    			add_location(li, file$5, 244, 3, 5486);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			assign_li();

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", click_handler_1, false, false, false),
    					listen_dev(li, "mouseover", mouseover_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*filtered, label*/ 514 && t0_value !== (t0_value = /*option*/ ctx[32][/*label*/ ctx[1]] + "")) set_data_dev(t0, t0_value);

    			if (i !== /*i*/ ctx[34]) {
    				unassign_li();
    				i = /*i*/ ctx[34];
    				assign_li();
    			}

    			if (dirty[0] & /*active*/ 256) {
    				toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[34]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			unassign_li();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(244:3) {#each filtered as option, i}",
    		ctx
    	});

    	return block;
    }

    // (238:3) {#each filtered as option, i}
    function create_each_block$1(ctx) {
    	let li;
    	let t0_value = /*option*/ ctx[32][/*label*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let small;
    	let t2_value = /*option*/ ctx[32][/*group*/ ctx[2]] + "";
    	let t2;
    	let t3;
    	let i = /*i*/ ctx[34];
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[24](/*option*/ ctx[32]);
    	}

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[25](/*i*/ ctx[34]);
    	}

    	const assign_li = () => /*li_binding*/ ctx[26](li, i);
    	const unassign_li = () => /*li_binding*/ ctx[26](null, i);

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			small = element("small");
    			t2 = text(t2_value);
    			t3 = space();
    			attr_dev(small, "class", "svelte-qdzmwx");
    			add_location(small, file$5, 239, 20, 5373);
    			attr_dev(li, "class", "svelte-qdzmwx");
    			toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[34]);
    			add_location(li, file$5, 238, 3, 5225);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, small);
    			append_dev(small, t2);
    			append_dev(li, t3);
    			assign_li();

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", click_handler, false, false, false),
    					listen_dev(li, "mouseover", mouseover_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*filtered, label*/ 514 && t0_value !== (t0_value = /*option*/ ctx[32][/*label*/ ctx[1]] + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*filtered, group*/ 516 && t2_value !== (t2_value = /*option*/ ctx[32][/*group*/ ctx[2]] + "")) set_data_dev(t2, t2_value);

    			if (i !== /*i*/ ctx[34]) {
    				unassign_li();
    				i = /*i*/ ctx[34];
    				assign_li();
    			}

    			if (dirty[0] & /*active*/ 256) {
    				toggle_class(li, "highlight", /*active*/ ctx[8] == /*i*/ ctx[34]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			unassign_li();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(238:3) {#each filtered as option, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let t;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedItem*/ ctx[6] && !/*search*/ ctx[3]) return create_if_block_4$1;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*expanded*/ ctx[7] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "id", "select");
    			attr_dev(div, "class", "svelte-qdzmwx");
    			toggle_class(div, "active", /*expanded*/ ctx[7]);
    			add_location(div, file$5, 218, 0, 4397);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);

    			if (!mounted) {
    				dispose = listen_dev(div, "keydown", /*doKeydown*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			}

    			if (/*expanded*/ ctx[7]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty[0] & /*expanded*/ 128) {
    				toggle_class(div, "active", /*expanded*/ ctx[7]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sleep(ms) {
    	return new Promise(resolve => setTimeout(resolve, ms));
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let regex;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SelectB', slots, []);
    	const dispatch = createEventDispatcher();
    	let { options } = $$props;
    	let { selectedb = null } = $$props;
    	let { placeholder = "Find an area..." } = $$props;
    	let { value = "code" } = $$props;
    	let { label = "name" } = $$props;
    	let { group = null } = $$props;
    	let { search = false } = $$props;
    	let selectedPrev = selectedb;

    	let selectedItem = selectedb
    	? options.find(d => {
    			d[value] == selectedb[value];
    		})
    	: null;

    	let expanded = false;
    	let filter = '';
    	let active = null;
    	let filtered;
    	let el;
    	let input;
    	let items = [];

    	function toggle(ev) {
    		ev.stopPropagation();
    		$$invalidate(4, filter = '');
    		$$invalidate(7, expanded = !expanded);

    		sleep(10).then(() => {
    			if (input && expanded) {
    				input.focus();
    			}
    		});
    	}

    	function select(option) {
    		$$invalidate(17, selectedb = option);
    		$$invalidate(7, expanded = false);
    		dispatch('select', { selectedb: option, value: option[value] });
    	}

    	function unSelect(ev) {
    		ev.stopPropagation();
    		$$invalidate(17, selectedb = null);
    		$$invalidate(20, selectedPrev = null);
    		$$invalidate(6, selectedItem = null);
    		dispatch('select', { selectedb: null, value: null });
    	}

    	function doKeydown(ev) {
    		if (expanded && filtered[0] && Number.isInteger(active)) {
    			if (ev.keyCode === 38) {
    				$$invalidate(8, active -= active > 0 ? 1 : 0);
    				items[active].scrollIntoView({ block: 'nearest', inline: 'start' });
    			} else if (ev.keyCode === 40) {
    				$$invalidate(8, active += active < filtered.length - 1 ? 1 : 0);
    				items[active].scrollIntoView({ block: 'nearest', inline: 'end' });
    			}
    		}
    	}

    	function doKeyup(ev) {
    		if (filtered[0] && Number.isInteger(active)) {
    			if (ev.keyCode === 13) {
    				select(filtered[active]);
    			}
    		}
    	}

    	const writable_props = ['options', 'selectedb', 'placeholder', 'value', 'label', 'group', 'search'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectB> was created with unknown prop '${key}'`);
    	});

    	function input_1_input_handler() {
    		filter = this.value;
    		$$invalidate(4, filter);
    	}

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(10, input);
    		});
    	}

    	const click_handler = option => select(option);
    	const mouseover_handler = i => $$invalidate(8, active = i);

    	function li_binding($$value, i) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			items[i] = $$value;
    			$$invalidate(11, items);
    		});
    	}

    	const click_handler_1 = option => select(option);
    	const mouseover_handler_1 = i => $$invalidate(8, active = i);

    	function li_binding_1($$value, i) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			items[i] = $$value;
    			$$invalidate(11, items);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			el = $$value;
    			$$invalidate(5, el);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('options' in $$props) $$invalidate(18, options = $$props.options);
    		if ('selectedb' in $$props) $$invalidate(17, selectedb = $$props.selectedb);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(19, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('group' in $$props) $$invalidate(2, group = $$props.group);
    		if ('search' in $$props) $$invalidate(3, search = $$props.search);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		options,
    		selectedb,
    		placeholder,
    		value,
    		label,
    		group,
    		search,
    		selectedPrev,
    		selectedItem,
    		expanded,
    		filter,
    		active,
    		filtered,
    		el,
    		input,
    		items,
    		sleep,
    		toggle,
    		select,
    		unSelect,
    		doKeydown,
    		doKeyup,
    		regex
    	});

    	$$self.$inject_state = $$props => {
    		if ('options' in $$props) $$invalidate(18, options = $$props.options);
    		if ('selectedb' in $$props) $$invalidate(17, selectedb = $$props.selectedb);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(19, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('group' in $$props) $$invalidate(2, group = $$props.group);
    		if ('search' in $$props) $$invalidate(3, search = $$props.search);
    		if ('selectedPrev' in $$props) $$invalidate(20, selectedPrev = $$props.selectedPrev);
    		if ('selectedItem' in $$props) $$invalidate(6, selectedItem = $$props.selectedItem);
    		if ('expanded' in $$props) $$invalidate(7, expanded = $$props.expanded);
    		if ('filter' in $$props) $$invalidate(4, filter = $$props.filter);
    		if ('active' in $$props) $$invalidate(8, active = $$props.active);
    		if ('filtered' in $$props) $$invalidate(9, filtered = $$props.filtered);
    		if ('el' in $$props) $$invalidate(5, el = $$props.el);
    		if ('input' in $$props) $$invalidate(10, input = $$props.input);
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('regex' in $$props) $$invalidate(21, regex = $$props.regex);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*filter*/ 16) {
    			$$invalidate(21, regex = filter ? new RegExp(filter, 'i') : null);
    		}

    		if ($$self.$$.dirty[0] & /*regex, options, label*/ 2359298) {
    			{
    				$$invalidate(9, filtered = regex
    				? options.filter(option => regex.test(option[label]))
    				: options);

    				$$invalidate(8, active = 0);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*el*/ 32) {
    			document.onclick = function (e) {
    				if (e.target !== el) {
    					$$invalidate(7, expanded = false);
    					$$invalidate(8, active = 0);
    				}
    			};
    		}

    		if ($$self.$$.dirty[0] & /*selectedPrev, selectedb, options, value*/ 1966080) {
    			if (selectedPrev != selectedb) {
    				$$invalidate(6, selectedItem = options.find(d => d[value] == selectedb[value]));
    				$$invalidate(20, selectedPrev = selectedb);
    			}
    		}
    	};

    	return [
    		placeholder,
    		label,
    		group,
    		search,
    		filter,
    		el,
    		selectedItem,
    		expanded,
    		active,
    		filtered,
    		input,
    		items,
    		toggle,
    		select,
    		unSelect,
    		doKeydown,
    		doKeyup,
    		selectedb,
    		options,
    		value,
    		selectedPrev,
    		regex,
    		input_1_input_handler,
    		input_1_binding,
    		click_handler,
    		mouseover_handler,
    		li_binding,
    		click_handler_1,
    		mouseover_handler_1,
    		li_binding_1,
    		div_binding
    	];
    }

    class SelectB extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$7,
    			create_fragment$7,
    			safe_not_equal,
    			{
    				options: 18,
    				selectedb: 17,
    				placeholder: 0,
    				value: 19,
    				label: 1,
    				group: 2,
    				search: 3
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectB",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*options*/ ctx[18] === undefined && !('options' in props)) {
    			console.warn("<SelectB> was created without expected prop 'options'");
    		}
    	}

    	get options() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedb() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedb(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get search() {
    		throw new Error("<SelectB>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set search(value) {
    		throw new Error("<SelectB>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var regions = [
    	{
    		code: "E12000006",
    		name: "East",
    		type: "rgn",
    		area: 1910838.21,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000031",
    				name: "Peterborough",
    				type: "lad"
    			},
    			{
    				code: "E06000032",
    				name: "Luton",
    				type: "lad"
    			},
    			{
    				code: "E06000033",
    				name: "Southend-on-Sea",
    				type: "lad"
    			},
    			{
    				code: "E06000034",
    				name: "Thurrock",
    				type: "lad"
    			},
    			{
    				code: "E06000055",
    				name: "Bedford",
    				type: "lad"
    			},
    			{
    				code: "E06000056",
    				name: "Central Bedfordshire",
    				type: "lad"
    			},
    			{
    				code: "E10000003",
    				name: "Cambridgeshire",
    				type: "cty"
    			},
    			{
    				code: "E10000012",
    				name: "Essex",
    				type: "cty"
    			},
    			{
    				code: "E10000015",
    				name: "Hertfordshire",
    				type: "cty"
    			},
    			{
    				code: "E10000020",
    				name: "Norfolk",
    				type: "cty"
    			},
    			{
    				code: "E10000029",
    				name: "Suffolk",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-0.74579,
    				51.44828
    			],
    			[
    				1.76891,
    				52.99004
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.03,
    						male: 48.97
    					},
    					"2011": {
    						female: 50.83,
    						male: 49.17
    					},
    					change: {
    						female: -0.2,
    						male: 0.2
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 8,
    						male: 2
    					},
    					"2011": {
    						female: 5,
    						male: 4
    					},
    					change: {
    						female: 1,
    						male: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 5006954,
    						female: 2555133,
    						male: 2451821
    					},
    					"2011": {
    						all: 5436657,
    						female: 2763281,
    						male: 2673376
    					},
    					change: {
    						all: 8.58,
    						female: 8.15,
    						male: 9.04
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						female: 5,
    						male: 5
    					},
    					"2011": {
    						all: 5,
    						female: 5,
    						male: 5
    					},
    					change: {
    						all: 2,
    						female: 2,
    						male: 2
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 6.94,
    						"20to49hoursWeek": 0.92,
    						"40PlushoursWeek": 1.78,
    						noCare: 90.37
    					},
    					"2011": {
    						"1to19hoursWeek": 6.75,
    						"20to49hoursWeek": 1.22,
    						"40PlushoursWeek": 2.2,
    						noCare: 89.83
    					},
    					change: {
    						"1to19hoursWeek": -0.19,
    						"20to49hoursWeek": 0.3,
    						"40PlushoursWeek": 0.42,
    						noCare: -0.54
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 6,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 7,
    						noCare: 3
    					},
    					"2011": {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 7,
    						noCare: 3
    					},
    					change: {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						noCare: 7
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 347459,
    						"20to49hoursWeek": 45883,
    						"40PlushoursWeek": 88966,
    						all: 5006954,
    						noCare: 4524646
    					},
    					"2011": {
    						"1to19hoursWeek": 366788,
    						"20to49hoursWeek": 66576,
    						"40PlushoursWeek": 119728,
    						all: 5436657,
    						noCare: 4883565
    					},
    					change: {
    						"1to19hoursWeek": 5.56,
    						"20to49hoursWeek": 45.1,
    						"40PlushoursWeek": 34.58,
    						all: 8.58,
    						noCare: 7.93
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 6,
    						all: 5,
    						noCare: 5
    					},
    					"2011": {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 6,
    						all: 5,
    						noCare: 5
    					},
    					change: {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 1,
    						all: 2,
    						noCare: 3
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.23,
    						Christian: 71.93,
    						Hindu: 0.62,
    						Jewish: 0.6,
    						Muslim: 1.56,
    						Noreligion: 16.81,
    						Otherreligion: 0.29,
    						Religionnotstated: 7.71,
    						Sikh: 0.26
    					},
    					"2011": {
    						Buddhist: 0.39,
    						Christian: 59.45,
    						Hindu: 0.98,
    						Jewish: 0.63,
    						Muslim: 2.69,
    						Noreligion: 27.85,
    						Otherreligion: 0.43,
    						Religionnotstated: 7.25,
    						Sikh: 0.33
    					},
    					change: {
    						Buddhist: 0.16,
    						Christian: -12.48,
    						Hindu: 0.36,
    						Jewish: 0.03,
    						Muslim: 1.13,
    						Noreligion: 11.04,
    						Otherreligion: 0.14,
    						Religionnotstated: -0.46,
    						Sikh: 0.07
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 3,
    						Christian: 8,
    						Hindu: 4,
    						Jewish: 2,
    						Muslim: 6,
    						Noreligion: 2,
    						Otherreligion: 4,
    						Religionnotstated: 4,
    						Sikh: 6
    					},
    					"2011": {
    						Buddhist: 3,
    						Christian: 7,
    						Hindu: 5,
    						Jewish: 2,
    						Muslim: 6,
    						Noreligion: 3,
    						Otherreligion: 5,
    						Religionnotstated: 4,
    						Sikh: 6
    					},
    					change: {
    						Buddhist: 3,
    						Christian: 4,
    						Hindu: 4,
    						Jewish: 2,
    						Muslim: 6,
    						Noreligion: 6,
    						Otherreligion: 4,
    						Religionnotstated: 4,
    						Sikh: 5
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 11360,
    						Christian: 3601631,
    						Hindu: 31049,
    						Jewish: 29960,
    						Muslim: 77967,
    						Noreligion: 841520,
    						Otherreligion: 14455,
    						Religionnotstated: 385800,
    						Sikh: 13212,
    						all: 5006954
    					},
    					"2011": {
    						Buddhist: 21097,
    						Christian: 3232363,
    						Hindu: 53028,
    						Jewish: 34430,
    						Muslim: 146448,
    						Noreligion: 1513904,
    						Otherreligion: 23342,
    						Religionnotstated: 394087,
    						Sikh: 17958,
    						all: 5436657
    					},
    					change: {
    						Buddhist: 85.71,
    						Christian: -10.25,
    						Hindu: 70.79,
    						Jewish: 14.92,
    						Muslim: 87.83,
    						Noreligion: 79.9,
    						Otherreligion: 61.48,
    						Religionnotstated: 2.15,
    						Sikh: 35.92,
    						all: 8.58
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 4,
    						Christian: 6,
    						Hindu: 5,
    						Jewish: 2,
    						Muslim: 6,
    						Noreligion: 3,
    						Otherreligion: 4,
    						Religionnotstated: 5,
    						Sikh: 6,
    						all: 5
    					},
    					"2011": {
    						Buddhist: 3,
    						Christian: 5,
    						Hindu: 5,
    						Jewish: 2,
    						Muslim: 6,
    						Noreligion: 3,
    						Otherreligion: 5,
    						Religionnotstated: 4,
    						Sikh: 6,
    						all: 5
    					},
    					change: {
    						Buddhist: 4,
    						Christian: 3,
    						Hindu: 4,
    						Jewish: 2,
    						Muslim: 4,
    						Noreligion: 8,
    						Otherreligion: 6,
    						Religionnotstated: 4,
    						Sikh: 3,
    						all: 2
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 2.79,
    						black: 0.93,
    						mixed: 1.09,
    						other: 0.27,
    						white: 94.92
    					},
    					"2011": {
    						asian: 5.01,
    						black: 2.1,
    						mixed: 1.95,
    						other: 0.51,
    						white: 90.43
    					},
    					change: {
    						asian: 2.22,
    						black: 1.17,
    						mixed: 0.86,
    						other: 0.24,
    						white: -4.49
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 6,
    						black: 3,
    						mixed: 3,
    						other: 3,
    						white: 4
    					},
    					"2011": {
    						asian: 7,
    						black: 3,
    						mixed: 3,
    						other: 7,
    						white: 4
    					},
    					change: {
    						asian: 7,
    						black: 3,
    						mixed: 4,
    						other: 7,
    						white: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 5006954,
    						asian: 139836,
    						black: 46560,
    						mixed: 54523,
    						other: 13390,
    						white: 4752645
    					},
    					"2011": {
    						all: 5436657,
    						asian: 272294,
    						black: 114319,
    						mixed: 106240,
    						other: 27697,
    						white: 4916107
    					},
    					change: {
    						all: 8.58,
    						asian: 94.72,
    						black: 145.53,
    						mixed: 94.85,
    						other: 106.85,
    						white: 3.44
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						asian: 7,
    						black: 4,
    						mixed: 5,
    						other: 4,
    						white: 4
    					},
    					"2011": {
    						all: 5,
    						asian: 6,
    						black: 4,
    						mixed: 5,
    						other: 6,
    						white: 3
    					},
    					change: {
    						all: 2,
    						asian: 3,
    						black: 3,
    						mixed: 3,
    						other: 7,
    						white: 2
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 7.57,
    						fair: 21.98,
    						good: 70.45
    					},
    					"2011": {
    						bad: 4.65,
    						fair: 12.79,
    						good: 82.56
    					},
    					change: {
    						bad: -2.92,
    						fair: -9.19,
    						good: 12.11
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 8,
    						fair: 7,
    						good: 3
    					},
    					"2011": {
    						bad: 8,
    						fair: 7,
    						good: 3
    					},
    					change: {
    						bad: 2,
    						fair: 6,
    						good: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 5006954,
    						bad: 379222,
    						fair: 1100466,
    						good: 3527266
    					},
    					"2011": {
    						all: 5436657,
    						bad: 252797,
    						fair: 695345,
    						good: 4488515
    					},
    					change: {
    						all: 8.58,
    						bad: -33.34,
    						fair: -36.81,
    						good: 27.25
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						bad: 6,
    						fair: 6,
    						good: 5
    					},
    					"2011": {
    						all: 5,
    						bad: 6,
    						fair: 6,
    						good: 4
    					},
    					change: {
    						all: 2,
    						bad: 3,
    						fair: 7,
    						good: 3
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 55.15,
    						inactive: 30.66,
    						"self-employed": 9.26,
    						student: 2.34,
    						unemployed: 2.6
    					},
    					"2011": {
    						employee: 54.26,
    						inactive: 28.33,
    						"self-employed": 10.54,
    						student: 3.03,
    						unemployed: 3.84
    					},
    					change: {
    						employee: -0.89,
    						inactive: -2.33,
    						"self-employed": 1.28,
    						student: 0.69,
    						unemployed: 1.24
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 2,
    						inactive: 8,
    						"self-employed": 3,
    						student: 8,
    						unemployed: 8
    					},
    					"2011": {
    						employee: 1,
    						inactive: 7,
    						"self-employed": 4,
    						student: 9,
    						unemployed: 7
    					},
    					change: {
    						employee: 8,
    						inactive: 2,
    						"self-employed": 3,
    						student: 7,
    						unemployed: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 3613155,
    						employee: 1992495,
    						inactive: 1107950,
    						"self-employed": 334438,
    						student: 84485,
    						unemployed: 93787
    					},
    					"2011": {
    						all: 3950396,
    						employee: 2143630,
    						inactive: 1119211,
    						"self-employed": 416278,
    						student: 119639,
    						unemployed: 151638
    					},
    					change: {
    						all: 9.33,
    						employee: 7.59,
    						inactive: 1.02,
    						"self-employed": 24.47,
    						student: 41.61,
    						unemployed: 61.68
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						employee: 4,
    						inactive: 6,
    						"self-employed": 4,
    						student: 6,
    						unemployed: 6
    					},
    					"2011": {
    						all: 5,
    						employee: 4,
    						inactive: 6,
    						"self-employed": 4,
    						student: 6,
    						unemployed: 6
    					},
    					change: {
    						all: 3,
    						employee: 7,
    						inactive: 3,
    						"self-employed": 5,
    						student: 7,
    						unemployed: 2
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 29.42,
    						NoKids: 61.29,
    						NonDepKids: 9.29
    					},
    					"2011": {
    						Kids: 29.61,
    						NoKids: 60.77,
    						NonDepKids: 9.62
    					},
    					change: {
    						Kids: 0.19,
    						NoKids: -0.52,
    						NonDepKids: 0.33
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 5,
    						NoKids: 5,
    						NonDepKids: 6
    					},
    					"2011": {
    						Kids: 3,
    						NoKids: 6,
    						NonDepKids: 4
    					},
    					change: {
    						Kids: 3,
    						NoKids: 8,
    						NonDepKids: 2
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 609231,
    						NoKids: 1269316,
    						NonDepKids: 192406,
    						all: 2070953
    					},
    					"2011": {
    						Kids: 665525,
    						NoKids: 1365780,
    						NonDepKids: 216111,
    						all: 2247416
    					},
    					change: {
    						Kids: 9.24,
    						NoKids: 7.6,
    						NonDepKids: 12.32,
    						all: 8.52
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 6,
    						NoKids: 5,
    						NonDepKids: 5,
    						all: 5
    					},
    					"2011": {
    						Kids: 5,
    						NoKids: 5,
    						NonDepKids: 5,
    						all: 5
    					},
    					change: {
    						Kids: 2,
    						NoKids: 6,
    						NonDepKids: 2,
    						all: 3
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 10.03,
    						Cohabiting: 8.84,
    						LoneParent: 8.07,
    						Married: 39.52,
    						OnePerson: 28.24,
    						Other: 5.3
    					},
    					"2011": {
    						"65andOver": 9.19,
    						Cohabiting: 10.25,
    						LoneParent: 9.46,
    						Married: 36.09,
    						OnePerson: 28.43,
    						Other: 6.58
    					},
    					change: {
    						"65andOver": -0.84,
    						Cohabiting: 1.41,
    						LoneParent: 1.39,
    						Married: -3.43,
    						OnePerson: 0.19,
    						Other: 1.28
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 2,
    						Cohabiting: 1,
    						LoneParent: 8,
    						Married: 1,
    						OnePerson: 9,
    						Other: 8
    					},
    					"2011": {
    						"65andOver": 2,
    						Cohabiting: 3,
    						LoneParent: 7,
    						Married: 1,
    						OnePerson: 9,
    						Other: 7
    					},
    					change: {
    						"65andOver": 8,
    						Cohabiting: 7,
    						LoneParent: 2,
    						Married: 4,
    						OnePerson: 8,
    						Other: 3
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 207774,
    						Cohabiting: 182996,
    						LoneParent: 167175,
    						Married: 818498,
    						OnePerson: 584769,
    						Other: 109741,
    						all: 2070953
    					},
    					"2011": {
    						"65andOver": 206441,
    						Cohabiting: 230451,
    						LoneParent: 212559,
    						Married: 811138,
    						OnePerson: 638993,
    						Other: 147834,
    						all: 2247416
    					},
    					change: {
    						"65andOver": -0.64,
    						Cohabiting: 25.93,
    						LoneParent: 27.15,
    						Married: -0.9,
    						OnePerson: 9.27,
    						Other: 34.71,
    						all: 8.52
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 3,
    						Cohabiting: 4,
    						LoneParent: 6,
    						Married: 5,
    						OnePerson: 6,
    						Other: 6,
    						all: 5
    					},
    					"2011": {
    						"65andOver": 3,
    						Cohabiting: 5,
    						LoneParent: 6,
    						Married: 4,
    						OnePerson: 6,
    						Other: 6,
    						all: 5
    					},
    					change: {
    						"65andOver": 4,
    						Cohabiting: 7,
    						LoneParent: 1,
    						Married: 3,
    						OnePerson: 6,
    						Other: 2,
    						all: 3
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 54.16,
    						Seperated: 10.44,
    						Single: 27.37,
    						Widowed: 8.03
    					},
    					"2011": {
    						Married: 49.89,
    						Seperated: 11.73,
    						Single: 31.41,
    						Widowed: 6.97
    					},
    					change: {
    						Married: -4.27,
    						Seperated: 1.29,
    						Single: 4.04,
    						Widowed: -1.06
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 1,
    						Seperated: 6,
    						Single: 8,
    						Widowed: 8
    					},
    					"2011": {
    						Married: 1,
    						Seperated: 5,
    						Single: 9,
    						Widowed: 7
    					},
    					change: {
    						Married: 4,
    						Seperated: 2,
    						Single: 7,
    						Widowed: 1
    					}
    				},
    				value: {
    					"2001": {
    						Married: 2165637,
    						Seperated: 417605,
    						Single: 1094421,
    						Widowed: 321095,
    						all: 3998758
    					},
    					"2011": {
    						Married: 2195859,
    						Seperated: 516387,
    						Single: 1382316,
    						Widowed: 306634,
    						all: 4401196
    					},
    					change: {
    						Married: 1.4,
    						Seperated: 23.65,
    						Single: 26.31,
    						Widowed: -4.5,
    						all: 10.06
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 5,
    						Seperated: 6,
    						Single: 6,
    						Widowed: 6,
    						all: 5
    					},
    					"2011": {
    						Married: 4,
    						Seperated: 4,
    						Single: 6,
    						Widowed: 6,
    						all: 5
    					},
    					change: {
    						Married: 3,
    						Seperated: 2,
    						Single: 6,
    						Widowed: 1,
    						all: 3
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 4.07,
    						bus: 4.41,
    						car_van: 67.68,
    						foot: 9.77,
    						home: 10.22,
    						moto: 1.03,
    						other: 0.37,
    						taxi: 0.48,
    						train_metro: 1.97
    					},
    					"2011": {
    						bicycle: 3.47,
    						bus: 3.83,
    						car_van: 66.32,
    						foot: 10.03,
    						home: 5.64,
    						moto: 0.78,
    						other: 0.61,
    						taxi: 0.47,
    						train_metro: 8.86
    					},
    					change: {
    						bicycle: -0.6,
    						bus: -0.58,
    						car_van: -1.36,
    						foot: 0.26,
    						home: -4.58,
    						moto: -0.25,
    						other: 0.24,
    						taxi: -0.01,
    						train_metro: 6.89
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 1,
    						bus: 9,
    						car_van: 1,
    						foot: 7,
    						home: 3,
    						moto: 5,
    						other: 4,
    						taxi: 5,
    						train_metro: 5
    					},
    					"2011": {
    						bicycle: 2,
    						bus: 9,
    						car_van: 7,
    						foot: 7,
    						home: 3,
    						moto: 4,
    						other: 6,
    						taxi: 6,
    						train_metro: 2
    					},
    					change: {
    						bicycle: 8,
    						bus: 5,
    						car_van: 7,
    						foot: 8,
    						home: 9,
    						moto: 4,
    						other: 6,
    						taxi: 7,
    						train_metro: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 2210271,
    						bicycle: 90059,
    						bus: 97491,
    						car_van: 1495907,
    						foot: 215841,
    						home: 225878,
    						moto: 22734,
    						other: 8069,
    						taxi: 10647,
    						train_metro: 43645
    					},
    					"2011": {
    						all: 2654051,
    						bicycle: 91995,
    						bus: 101598,
    						car_van: 1760190,
    						foot: 266300,
    						home: 149618,
    						moto: 20625,
    						other: 16087,
    						taxi: 12427,
    						train_metro: 235211
    					},
    					change: {
    						all: 20.08,
    						bicycle: 2.15,
    						bus: 4.21,
    						car_van: 17.67,
    						foot: 23.38,
    						home: -33.76,
    						moto: -9.28,
    						other: 99.37,
    						taxi: 16.72,
    						train_metro: 438.92
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						bicycle: 2,
    						bus: 9,
    						car_van: 4,
    						foot: 7,
    						home: 4,
    						moto: 5,
    						other: 5,
    						taxi: 5,
    						train_metro: 4
    					},
    					"2011": {
    						all: 4,
    						bicycle: 3,
    						bus: 9,
    						car_van: 4,
    						foot: 6,
    						home: 3,
    						moto: 4,
    						other: 4,
    						taxi: 6,
    						train_metro: 3
    					},
    					change: {
    						all: 1,
    						bicycle: 6,
    						bus: 4,
    						car_van: 4,
    						foot: 3,
    						home: 4,
    						moto: 2,
    						other: 6,
    						taxi: 5,
    						train_metro: 1
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.98,
    						"Female16-30": 12.66,
    						"Female31-48": 22.19,
    						Female49plus: 3.06,
    						"Male1-15": 1.87,
    						"Male16-30": 2.94,
    						"Male31-48": 35.64,
    						Male49plus: 14.66
    					},
    					"2011": {
    						"Female1-15": 7.26,
    						"Female16-30": 14.01,
    						"Female31-48": 22.34,
    						Female49plus: 3.04,
    						"Male1-15": 2.93,
    						"Male16-30": 4.51,
    						"Male31-48": 34.69,
    						Male49plus: 11.24
    					},
    					change: {
    						"Female1-15": 0.28,
    						"Female16-30": 1.35,
    						"Female31-48": 0.15,
    						Female49plus: -0.02,
    						"Male1-15": 1.06,
    						"Male16-30": 1.57,
    						"Male31-48": -0.95,
    						Male49plus: -3.42
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 2,
    						"Female16-30": 7,
    						"Female31-48": 6,
    						Female49plus: 4,
    						"Male1-15": 4,
    						"Male16-30": 9,
    						"Male31-48": 6,
    						Male49plus: 1
    					},
    					"2011": {
    						"Female1-15": 2,
    						"Female16-30": 7,
    						"Female31-48": 8,
    						Female49plus: 3,
    						"Male1-15": 8,
    						"Male16-30": 8,
    						"Male31-48": 6,
    						Male49plus: 2
    					},
    					change: {
    						"Female1-15": 2,
    						"Female16-30": 3,
    						"Female31-48": 7,
    						Female49plus: 4,
    						"Male1-15": 8,
    						"Male16-30": 7,
    						"Male31-48": 1,
    						Male49plus: 8
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 167709,
    						"Female16-30": 304272,
    						"Female31-48": 533200,
    						Female49plus: 73442,
    						"Male1-15": 44853,
    						"Male16-30": 70564,
    						"Male31-48": 856263,
    						Male49plus: 352268,
    						all: 2402571
    					},
    					"2011": {
    						"Female1-15": 192555,
    						"Female16-30": 371704,
    						"Female31-48": 592899,
    						Female49plus: 80556,
    						"Male1-15": 77885,
    						"Male16-30": 119639,
    						"Male31-48": 920592,
    						Male49plus: 298221,
    						all: 2654051
    					},
    					change: {
    						"Female1-15": 14.81,
    						"Female16-30": 22.16,
    						"Female31-48": 11.2,
    						Female49plus: 9.69,
    						"Male1-15": 73.65,
    						"Male16-30": 69.55,
    						"Male31-48": 7.51,
    						Male49plus: -15.34,
    						all: 10.47
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 3,
    						"Female16-30": 6,
    						"Female31-48": 5,
    						Female49plus: 4,
    						"Male1-15": 4,
    						"Male16-30": 6,
    						"Male31-48": 5,
    						Male49plus: 3,
    						all: 4
    					},
    					"2011": {
    						"Female1-15": 4,
    						"Female16-30": 6,
    						"Female31-48": 4,
    						Female49plus: 4,
    						"Male1-15": 4,
    						"Male16-30": 6,
    						"Male31-48": 4,
    						Male49plus: 3,
    						all: 4
    					},
    					change: {
    						"Female1-15": 2,
    						"Female16-30": 5,
    						"Female31-48": 7,
    						Female49plus: 4,
    						"Male1-15": 7,
    						"Male16-30": 7,
    						"Male31-48": 5,
    						Male49plus: 5,
    						all: 7
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 72.44,
    						rent_free: 1.88,
    						rented_private: 8.58,
    						rented_social: 16.58,
    						shared_ownership: 0.53
    					},
    					"2011": {
    						owned: 67.57,
    						rent_free: 1.24,
    						rented_private: 14.61,
    						rented_social: 15.84,
    						shared_ownership: 0.74
    					},
    					change: {
    						owned: -4.87,
    						rent_free: -0.64,
    						rented_private: 6.03,
    						rented_social: -0.74,
    						shared_ownership: 0.21
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 2,
    						rent_free: 6,
    						rented_private: 5,
    						rented_social: 7,
    						shared_ownership: 7
    					},
    					"2011": {
    						owned: 1,
    						rent_free: 8,
    						rented_private: 7,
    						rented_social: 7,
    						shared_ownership: 4
    					},
    					change: {
    						owned: 6,
    						rent_free: 5,
    						rented_private: 8,
    						rented_social: 3,
    						shared_ownership: 3
    					}
    				},
    				value: {
    					"2001": {
    						all: 2081882,
    						owned: 1508158,
    						rent_free: 39052,
    						rented_private: 178551,
    						rented_social: 345186,
    						shared_ownership: 10935
    					},
    					"2011": {
    						all: 2247416,
    						owned: 1518578,
    						rent_free: 27811,
    						rented_private: 328389,
    						rented_social: 356057,
    						shared_ownership: 16581
    					},
    					change: {
    						all: 7.95,
    						owned: 0.69,
    						rent_free: -28.78,
    						rented_private: 83.92,
    						rented_social: 3.15,
    						shared_ownership: 51.63
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5,
    						owned: 4,
    						rent_free: 6,
    						rented_private: 6,
    						rented_social: 6,
    						shared_ownership: 5
    					},
    					"2011": {
    						all: 5,
    						owned: 4,
    						rent_free: 6,
    						rented_private: 5,
    						rented_social: 6,
    						shared_ownership: 3
    					},
    					change: {
    						all: 2,
    						owned: 4,
    						rent_free: 5,
    						rented_private: 6,
    						rented_social: 3,
    						shared_ownership: 2
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 2.62
    					},
    					"2011": {
    						all: 2.85
    					},
    					change: {
    						all: 0.22999999999999998
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7
    					},
    					"2011": {
    						all: 7
    					},
    					change: {
    						all: 2
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.39,
    						"10-19": 12.43,
    						"20-29": 11.93,
    						"30-39": 15.42,
    						"40-49": 13.57,
    						"50-59": 13.1,
    						"60-69": 9.4,
    						"70-79": 4.07,
    						"80plus": 7.7
    					},
    					"2011": {
    						"0-9": 11.86,
    						"10-19": 12.09,
    						"20-29": 12.32,
    						"30-39": 12.97,
    						"40-49": 14.9,
    						"50-59": 12.32,
    						"60-69": 11.26,
    						"70-79": 3.99,
    						"80plus": 8.29
    					},
    					change: {
    						"0-9": -0.53,
    						"10-19": -0.34,
    						"20-29": 0.39,
    						"30-39": -2.45,
    						"40-49": 1.33,
    						"50-59": -0.78,
    						"60-69": 1.86,
    						"70-79": -0.08,
    						"80plus": 0.59
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 3,
    						"10-19": 7,
    						"20-29": 7,
    						"30-39": 2,
    						"40-49": 3,
    						"50-59": 3,
    						"60-69": 7,
    						"70-79": 4,
    						"80plus": 3
    					},
    					"2011": {
    						"0-9": 3,
    						"10-19": 7,
    						"20-29": 8,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 5,
    						"60-69": 4,
    						"70-79": 7,
    						"80plus": 3
    					},
    					change: {
    						"0-9": 5,
    						"10-19": 2,
    						"20-29": 8,
    						"30-39": 2,
    						"40-49": 4,
    						"50-59": 8,
    						"60-69": 4,
    						"70-79": 7,
    						"80plus": 2
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 620112,
    						"10-19": 622574,
    						"20-29": 597169,
    						"30-39": 772093,
    						"40-49": 679206,
    						"50-59": 655725,
    						"60-69": 470745,
    						"70-79": 203727,
    						"80plus": 385603,
    						all: 5006954
    					},
    					"2011": {
    						"0-9": 644918,
    						"10-19": 657235,
    						"20-29": 669736,
    						"30-39": 705148,
    						"40-49": 810104,
    						"50-59": 669687,
    						"60-69": 612108,
    						"70-79": 216921,
    						"80plus": 450800,
    						all: 5436657
    					},
    					change: {
    						"0-9": 4,
    						"10-19": 5.57,
    						"20-29": 12.15,
    						"30-39": -8.67,
    						"40-49": 19.27,
    						"50-59": 2.13,
    						"60-69": 30.03,
    						"70-79": 6.48,
    						"80plus": 16.91,
    						all: 8.58
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 5,
    						"10-19": 6,
    						"20-29": 6,
    						"30-39": 5,
    						"40-49": 5,
    						"50-59": 5,
    						"60-69": 6,
    						"70-79": 5,
    						"80plus": 5,
    						all: 5
    					},
    					"2011": {
    						"0-9": 5,
    						"10-19": 5,
    						"20-29": 6,
    						"30-39": 4,
    						"40-49": 5,
    						"50-59": 5,
    						"60-69": 4,
    						"70-79": 4,
    						"80plus": 3,
    						all: 5
    					},
    					change: {
    						"0-9": 3,
    						"10-19": 2,
    						"20-29": 8,
    						"30-39": 2,
    						"40-49": 3,
    						"50-59": 7,
    						"60-69": 4,
    						"70-79": 2,
    						"80plus": 1,
    						all: 2
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 40
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 3
    					},
    					change: {
    						all: 3
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "W92000004",
    		name: "Wales",
    		type: "ctry",
    		area: 2073510.98,
    		count: 2,
    		parents: [
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "W06000001",
    				name: "Isle of Anglesey",
    				type: "lad"
    			},
    			{
    				code: "W06000002",
    				name: "Gwynedd",
    				type: "lad"
    			},
    			{
    				code: "W06000003",
    				name: "Conwy",
    				type: "lad"
    			},
    			{
    				code: "W06000004",
    				name: "Denbighshire",
    				type: "lad"
    			},
    			{
    				code: "W06000005",
    				name: "Flintshire",
    				type: "lad"
    			},
    			{
    				code: "W06000006",
    				name: "Wrexham",
    				type: "lad"
    			},
    			{
    				code: "W06000008",
    				name: "Ceredigion",
    				type: "lad"
    			},
    			{
    				code: "W06000009",
    				name: "Pembrokeshire",
    				type: "lad"
    			},
    			{
    				code: "W06000010",
    				name: "Carmarthenshire",
    				type: "lad"
    			},
    			{
    				code: "W06000011",
    				name: "Swansea",
    				type: "lad"
    			},
    			{
    				code: "W06000012",
    				name: "Neath Port Talbot",
    				type: "lad"
    			},
    			{
    				code: "W06000013",
    				name: "Bridgend",
    				type: "lad"
    			},
    			{
    				code: "W06000014",
    				name: "Vale of Glamorgan",
    				type: "lad"
    			},
    			{
    				code: "W06000015",
    				name: "Cardiff",
    				type: "lad"
    			},
    			{
    				code: "W06000016",
    				name: "Rhondda Cynon Taf",
    				type: "lad"
    			},
    			{
    				code: "W06000018",
    				name: "Caerphilly",
    				type: "lad"
    			},
    			{
    				code: "W06000019",
    				name: "Blaenau Gwent",
    				type: "lad"
    			},
    			{
    				code: "W06000020",
    				name: "Torfaen",
    				type: "lad"
    			},
    			{
    				code: "W06000021",
    				name: "Monmouthshire",
    				type: "lad"
    			},
    			{
    				code: "W06000022",
    				name: "Newport",
    				type: "lad"
    			},
    			{
    				code: "W06000023",
    				name: "Powys",
    				type: "lad"
    			},
    			{
    				code: "W06000024",
    				name: "Merthyr Tydfil",
    				type: "lad"
    			}
    		],
    		bounds: [
    			[
    				-5.6703,
    				51.37456
    			],
    			[
    				-2.64986,
    				53.4358
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.65,
    						male: 48.35
    					},
    					"2011": {
    						female: 50.9,
    						male: 49.1
    					},
    					change: {
    						female: -0.75,
    						male: 0.75
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 1,
    						male: 2
    					},
    					"2011": {
    						female: 1,
    						male: 2
    					},
    					change: {
    						female: 2,
    						male: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 2903085,
    						female: 1499303,
    						male: 1403782
    					},
    					"2011": {
    						all: 3063456,
    						female: 1559228,
    						male: 1504228
    					},
    					change: {
    						all: 5.52,
    						female: 4,
    						male: 7.16
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						female: 2,
    						male: 2
    					},
    					"2011": {
    						all: 2,
    						female: 2,
    						male: 2
    					},
    					change: {
    						all: 2,
    						female: 2,
    						male: 2
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 20.51,
    						NoWelsh: 79.49,
    						all: 100
    					},
    					"2011": {
    						SpeaksWelsh: 19.02,
    						NoWelsh: 80.98,
    						all: 100
    					},
    					change: {
    						SpeaksWelsh: -1.49,
    						NoWelsh: 1.49,
    						all: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 575640,
    						all: 2805701,
    						NoWelsh: 2230061
    					},
    					"2011": {
    						SpeaksWelsh: 562016,
    						all: 2955841,
    						NoWelsh: 2393825
    					},
    					change: {
    						SpeaksWelsh: -2.37,
    						all: 5.35,
    						NoWelsh: 7.34
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 7.17,
    						"20to49hoursWeek": 1.48,
    						"40PlushoursWeek": 3.09,
    						noCare: 88.26
    					},
    					"2011": {
    						"1to19hoursWeek": 6.93,
    						"20to49hoursWeek": 1.76,
    						"40PlushoursWeek": 3.39,
    						noCare: 87.91
    					},
    					change: {
    						"1to19hoursWeek": -0.24,
    						"20to49hoursWeek": 0.28,
    						"40PlushoursWeek": 0.3,
    						noCare: -0.35
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						noCare: 2
    					},
    					"2011": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						noCare: 2
    					},
    					change: {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 2,
    						noCare: 2
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 208291,
    						"20to49hoursWeek": 42850,
    						"40PlushoursWeek": 89604,
    						all: 2903085,
    						noCare: 2562340
    					},
    					"2011": {
    						"1to19hoursWeek": 212436,
    						"20to49hoursWeek": 54046,
    						"40PlushoursWeek": 103748,
    						all: 3063456,
    						noCare: 2693226
    					},
    					change: {
    						"1to19hoursWeek": 1.99,
    						"20to49hoursWeek": 26.13,
    						"40PlushoursWeek": 15.79,
    						all: 5.52,
    						noCare: 5.11
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 2,
    						all: 2,
    						noCare: 2
    					},
    					"2011": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 2,
    						all: 2,
    						noCare: 2
    					},
    					change: {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 2,
    						all: 2,
    						noCare: 2
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.19,
    						Christian: 71.9,
    						Hindu: 0.19,
    						Jewish: 0.08,
    						Muslim: 0.75,
    						Noreligion: 18.53,
    						Otherreligion: 0.24,
    						Religionnotstated: 8.07,
    						Sikh: 0.07
    					},
    					"2011": {
    						Buddhist: 0.3,
    						Christian: 57.56,
    						Hindu: 0.34,
    						Jewish: 0.07,
    						Muslim: 1.5,
    						Noreligion: 32.09,
    						Otherreligion: 0.41,
    						Religionnotstated: 7.64,
    						Sikh: 0.1
    					},
    					change: {
    						Buddhist: 0.11,
    						Christian: -14.34,
    						Hindu: 0.15,
    						Jewish: -0.01,
    						Muslim: 0.75,
    						Noreligion: 13.56,
    						Otherreligion: 0.17,
    						Religionnotstated: -0.43,
    						Sikh: 0.03
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 2,
    						Christian: 1,
    						Hindu: 2,
    						Jewish: 2,
    						Muslim: 2,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 1,
    						Sikh: 2
    					},
    					"2011": {
    						Buddhist: 2,
    						Christian: 2,
    						Hindu: 2,
    						Jewish: 2,
    						Muslim: 2,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 1,
    						Sikh: 2
    					},
    					change: {
    						Buddhist: 2,
    						Christian: 2,
    						Hindu: 2,
    						Jewish: 1,
    						Muslim: 2,
    						Noreligion: 1,
    						Otherreligion: 1,
    						Religionnotstated: 1,
    						Sikh: 2
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 5407,
    						Christian: 2087242,
    						Hindu: 5439,
    						Jewish: 2256,
    						Muslim: 21739,
    						Noreligion: 537935,
    						Otherreligion: 6909,
    						Religionnotstated: 234143,
    						Sikh: 2015,
    						all: 2903085
    					},
    					"2011": {
    						Buddhist: 9117,
    						Christian: 1763299,
    						Hindu: 10434,
    						Jewish: 2064,
    						Muslim: 45950,
    						Noreligion: 982997,
    						Otherreligion: 12705,
    						Religionnotstated: 233928,
    						Sikh: 2962,
    						all: 3063456
    					},
    					change: {
    						Buddhist: 68.61,
    						Christian: -15.52,
    						Hindu: 91.84,
    						Jewish: -8.51,
    						Muslim: 111.37,
    						Noreligion: 82.74,
    						Otherreligion: 83.89,
    						Religionnotstated: -0.09,
    						Sikh: 47,
    						all: 5.52
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 2,
    						Christian: 2,
    						Hindu: 2,
    						Jewish: 2,
    						Muslim: 2,
    						Noreligion: 2,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 2,
    						all: 2
    					},
    					"2011": {
    						Buddhist: 2,
    						Christian: 2,
    						Hindu: 2,
    						Jewish: 2,
    						Muslim: 2,
    						Noreligion: 2,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 2,
    						all: 2
    					},
    					change: {
    						Buddhist: 2,
    						Christian: 2,
    						Hindu: 1,
    						Jewish: 2,
    						Muslim: 1,
    						Noreligion: 2,
    						Otherreligion: 1,
    						Religionnotstated: 2,
    						Sikh: 1,
    						all: 2
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 1.09,
    						black: 0.24,
    						mixed: 0.61,
    						other: 0.18,
    						white: 97.88
    					},
    					"2011": {
    						asian: 2.29,
    						black: 0.6,
    						mixed: 1.03,
    						other: 0.5,
    						white: 95.59
    					},
    					change: {
    						asian: 1.2,
    						black: 0.36,
    						mixed: 0.42,
    						other: 0.32,
    						white: -2.29
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 1
    					},
    					"2011": {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 1
    					},
    					change: {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 2903085,
    						asian: 31715,
    						black: 7069,
    						mixed: 17661,
    						other: 5135,
    						white: 2841505
    					},
    					"2011": {
    						all: 3063456,
    						asian: 70128,
    						black: 18276,
    						mixed: 31521,
    						other: 15278,
    						white: 2928253
    					},
    					change: {
    						all: 5.52,
    						asian: 121.12,
    						black: 158.54,
    						mixed: 78.48,
    						other: 197.53,
    						white: 3.05
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 2
    					},
    					"2011": {
    						all: 2,
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 2
    					},
    					change: {
    						all: 2,
    						asian: 1,
    						black: 1,
    						mixed: 2,
    						other: 1,
    						white: 1
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 12.45,
    						fair: 22.49,
    						good: 65.06
    					},
    					"2011": {
    						bad: 7.63,
    						fair: 14.62,
    						good: 77.76
    					},
    					change: {
    						bad: -4.82,
    						fair: -7.87,
    						good: 12.7
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 1,
    						fair: 1,
    						good: 2
    					},
    					"2011": {
    						bad: 1,
    						fair: 1,
    						good: 2
    					},
    					change: {
    						bad: 2,
    						fair: 1,
    						good: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 2903085,
    						bad: 361467,
    						fair: 652769,
    						good: 1888849
    					},
    					"2011": {
    						all: 3063456,
    						bad: 233607,
    						fair: 447789,
    						good: 2382060
    					},
    					change: {
    						all: 5.52,
    						bad: -35.37,
    						fair: -31.4,
    						good: 26.11
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						bad: 2,
    						fair: 2,
    						good: 2
    					},
    					"2011": {
    						all: 2,
    						bad: 2,
    						fair: 2,
    						good: 2
    					},
    					change: {
    						all: 2,
    						bad: 2,
    						fair: 1,
    						good: 2
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 47.5,
    						inactive: 39.02,
    						"self-employed": 7.69,
    						student: 2.3,
    						unemployed: 3.49
    					},
    					"2011": {
    						employee: 49.55,
    						inactive: 34.23,
    						"self-employed": 8.64,
    						student: 3.28,
    						unemployed: 4.31
    					},
    					change: {
    						employee: 2.05,
    						inactive: -4.79,
    						"self-employed": 0.95,
    						student: 0.98,
    						unemployed: 0.82
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 2,
    						inactive: 1,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 1
    					},
    					"2011": {
    						employee: 2,
    						inactive: 1,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 2
    					},
    					change: {
    						employee: 1,
    						inactive: 2,
    						"self-employed": 2,
    						student: 1,
    						unemployed: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 2075347,
    						employee: 985748,
    						inactive: 809850,
    						"self-employed": 159502,
    						student: 47759,
    						unemployed: 72488
    					},
    					"2011": {
    						all: 2245166,
    						employee: 1112370,
    						inactive: 768431,
    						"self-employed": 194029,
    						student: 73647,
    						unemployed: 96689
    					},
    					change: {
    						all: 8.18,
    						employee: 12.85,
    						inactive: -5.11,
    						"self-employed": 21.65,
    						student: 54.21,
    						unemployed: 33.39
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						employee: 2,
    						inactive: 2,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 2
    					},
    					"2011": {
    						all: 2,
    						employee: 2,
    						inactive: 2,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 2
    					},
    					change: {
    						all: 2,
    						employee: 1,
    						inactive: 2,
    						"self-employed": 2,
    						student: 1,
    						unemployed: 2
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 30.23,
    						NoKids: 59.55,
    						NonDepKids: 10.22
    					},
    					"2011": {
    						Kids: 28.16,
    						NoKids: 61.17,
    						NonDepKids: 10.67
    					},
    					change: {
    						Kids: -2.07,
    						NoKids: 1.62,
    						NonDepKids: 0.45
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 1,
    						NoKids: 2,
    						NonDepKids: 1
    					},
    					"2011": {
    						Kids: 2,
    						NoKids: 2,
    						NonDepKids: 1
    					},
    					change: {
    						Kids: 2,
    						NoKids: 1,
    						NonDepKids: 1
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 365510,
    						NoKids: 719987,
    						NonDepKids: 123555,
    						all: 1209052
    					},
    					"2011": {
    						Kids: 366874,
    						NoKids: 796865,
    						NonDepKids: 138937,
    						all: 1302676
    					},
    					change: {
    						Kids: 0.37,
    						NoKids: 10.68,
    						NonDepKids: 12.45,
    						all: 7.74
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 2,
    						NoKids: 2,
    						NonDepKids: 2,
    						all: 2
    					},
    					"2011": {
    						Kids: 2,
    						NoKids: 2,
    						NonDepKids: 2,
    						all: 2
    					},
    					change: {
    						Kids: 2,
    						NoKids: 1,
    						NonDepKids: 1,
    						all: 2
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 9.62,
    						Cohabiting: 7.46,
    						LoneParent: 10.64,
    						Married: 37.17,
    						OnePerson: 29.14,
    						Other: 5.98
    					},
    					"2011": {
    						"65andOver": 8.9,
    						Cohabiting: 9.66,
    						LoneParent: 11.36,
    						Married: 32.84,
    						OnePerson: 30.76,
    						Other: 6.48
    					},
    					change: {
    						"65andOver": -0.72,
    						Cohabiting: 2.2,
    						LoneParent: 0.72,
    						Married: -4.33,
    						OnePerson: 1.62,
    						Other: 0.5
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 1,
    						Cohabiting: 2,
    						LoneParent: 1,
    						Married: 1,
    						OnePerson: 2,
    						Other: 2
    					},
    					"2011": {
    						"65andOver": 1,
    						Cohabiting: 2,
    						LoneParent: 1,
    						Married: 2,
    						OnePerson: 1,
    						Other: 2
    					},
    					change: {
    						"65andOver": 1,
    						Cohabiting: 1,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 1,
    						Other: 2
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 116284,
    						Cohabiting: 90147,
    						LoneParent: 128608,
    						Married: 449349,
    						OnePerson: 352348,
    						Other: 72316,
    						all: 1209052
    					},
    					"2011": {
    						"65andOver": 115928,
    						Cohabiting: 125796,
    						LoneParent: 147940,
    						Married: 427800,
    						OnePerson: 400768,
    						Other: 84444,
    						all: 1302676
    					},
    					change: {
    						"65andOver": -0.31,
    						Cohabiting: 39.55,
    						LoneParent: 15.03,
    						Married: -4.8,
    						OnePerson: 13.74,
    						Other: 16.77,
    						all: 7.74
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 2,
    						Cohabiting: 2,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 2,
    						Other: 2,
    						all: 2
    					},
    					"2011": {
    						"65andOver": 2,
    						Cohabiting: 2,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 2,
    						Other: 2,
    						all: 2
    					},
    					change: {
    						"65andOver": 1,
    						Cohabiting: 1,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 1,
    						Other: 2,
    						all: 2
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 51.99,
    						Seperated: 10.57,
    						Single: 28.05,
    						Widowed: 9.4
    					},
    					"2011": {
    						Married: 46.74,
    						Seperated: 11.84,
    						Single: 33.52,
    						Widowed: 7.9
    					},
    					change: {
    						Married: -5.25,
    						Seperated: 1.27,
    						Single: 5.47,
    						Widowed: -1.5
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 1,
    						Seperated: 2,
    						Single: 2,
    						Widowed: 1
    					},
    					"2011": {
    						Married: 1,
    						Seperated: 1,
    						Single: 2,
    						Widowed: 1
    					},
    					change: {
    						Married: 2,
    						Seperated: 1,
    						Single: 1,
    						Widowed: 2
    					}
    				},
    				value: {
    					"2001": {
    						Married: 1203977,
    						Seperated: 244810,
    						Single: 649512,
    						Widowed: 217631,
    						all: 2315930
    					},
    					"2011": {
    						Married: 1171969,
    						Seperated: 296879,
    						Single: 840347,
    						Widowed: 197965,
    						all: 2507160
    					},
    					change: {
    						Married: -2.66,
    						Seperated: 21.27,
    						Single: 29.38,
    						Widowed: -9.04,
    						all: 8.26
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 2,
    						Seperated: 2,
    						Single: 2,
    						Widowed: 2,
    						all: 2
    					},
    					"2011": {
    						Married: 2,
    						Seperated: 2,
    						Single: 2,
    						Widowed: 2,
    						all: 2
    					},
    					change: {
    						Married: 2,
    						Seperated: 1,
    						Single: 1,
    						Widowed: 2,
    						all: 2
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 1.41,
    						bus: 5.22,
    						car_van: 70.11,
    						foot: 10.48,
    						home: 10,
    						moto: 0.75,
    						other: 0.39,
    						taxi: 0.51,
    						train_metro: 1.13
    					},
    					"2011": {
    						bicycle: 1.44,
    						bus: 4.61,
    						car_van: 74.17,
    						foot: 10.64,
    						home: 5.36,
    						moto: 0.56,
    						other: 0.64,
    						taxi: 0.48,
    						train_metro: 2.09
    					},
    					change: {
    						bicycle: 0.03,
    						bus: -0.61,
    						car_van: 4.06,
    						foot: 0.16,
    						home: -4.64,
    						moto: -0.19,
    						other: 0.25,
    						taxi: -0.03,
    						train_metro: 0.96
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 2,
    						bus: 2,
    						car_van: 1,
    						foot: 1,
    						home: 1,
    						moto: 2,
    						other: 1,
    						taxi: 2,
    						train_metro: 2
    					},
    					"2011": {
    						bicycle: 2,
    						bus: 2,
    						car_van: 1,
    						foot: 2,
    						home: 1,
    						moto: 2,
    						other: 2,
    						taxi: 2,
    						train_metro: 2
    					},
    					change: {
    						bicycle: 2,
    						bus: 2,
    						car_van: 1,
    						foot: 2,
    						home: 2,
    						moto: 1,
    						other: 2,
    						taxi: 2,
    						train_metro: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 1152933,
    						bicycle: 16202,
    						bus: 60173,
    						car_van: 808356,
    						foot: 120847,
    						home: 115323,
    						moto: 8650,
    						other: 4486,
    						taxi: 5885,
    						train_metro: 13011
    					},
    					"2011": {
    						all: 1363615,
    						bicycle: 19659,
    						bus: 62903,
    						car_van: 1011372,
    						foot: 145135,
    						home: 73140,
    						moto: 7694,
    						other: 8673,
    						taxi: 6523,
    						train_metro: 28516
    					},
    					change: {
    						all: 18.27,
    						bicycle: 21.34,
    						bus: 4.54,
    						car_van: 25.11,
    						foot: 20.1,
    						home: -36.58,
    						moto: -11.05,
    						other: 93.33,
    						taxi: 10.84,
    						train_metro: 119.17
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						bicycle: 2,
    						bus: 2,
    						car_van: 2,
    						foot: 2,
    						home: 2,
    						moto: 2,
    						other: 2,
    						taxi: 2,
    						train_metro: 2
    					},
    					"2011": {
    						all: 2,
    						bicycle: 2,
    						bus: 2,
    						car_van: 2,
    						foot: 2,
    						home: 2,
    						moto: 2,
    						other: 2,
    						taxi: 2,
    						train_metro: 2
    					},
    					change: {
    						all: 1,
    						bicycle: 1,
    						bus: 2,
    						car_van: 1,
    						foot: 2,
    						home: 2,
    						moto: 1,
    						other: 2,
    						taxi: 2,
    						train_metro: 1
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.23,
    						"Female16-30": 14.05,
    						"Female31-48": 23.17,
    						Female49plus: 2.89,
    						"Male1-15": 1.73,
    						"Male16-30": 3.32,
    						"Male31-48": 36.59,
    						Male49plus: 12.01
    					},
    					"2011": {
    						"Female1-15": 6.2,
    						"Female16-30": 15.68,
    						"Female31-48": 23.24,
    						Female49plus: 2.59,
    						"Male1-15": 2.97,
    						"Male16-30": 5.33,
    						"Male31-48": 34.74,
    						Male49plus: 9.25
    					},
    					change: {
    						"Female1-15": -0.03,
    						"Female16-30": 1.63,
    						"Female31-48": 0.07,
    						Female49plus: -0.3,
    						"Male1-15": 1.24,
    						"Male16-30": 2.01,
    						"Male31-48": -1.85,
    						Male49plus: -2.76
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 2,
    						"Female16-30": 1,
    						"Female31-48": 2,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 2,
    						"Male31-48": 1,
    						Male49plus: 2
    					},
    					"2011": {
    						"Female1-15": 2,
    						"Female16-30": 1,
    						"Female31-48": 1,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 1,
    						"Male31-48": 1,
    						Male49plus: 2
    					},
    					change: {
    						"Female1-15": 2,
    						"Female16-30": 1,
    						"Female31-48": 1,
    						Female49plus: 2,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 2,
    						Male49plus: 1
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 73960,
    						"Female16-30": 166686,
    						"Female31-48": 274842,
    						Female49plus: 34316,
    						"Male1-15": 20483,
    						"Male16-30": 39439,
    						"Male31-48": 434084,
    						Male49plus: 142446,
    						all: 1186256
    					},
    					"2011": {
    						"Female1-15": 84606,
    						"Female16-30": 213846,
    						"Female31-48": 316935,
    						Female49plus: 35268,
    						"Male1-15": 40454,
    						"Male16-30": 72667,
    						"Male31-48": 473670,
    						Male49plus: 126169,
    						all: 1363615
    					},
    					change: {
    						"Female1-15": 14.39,
    						"Female16-30": 28.29,
    						"Female31-48": 15.32,
    						Female49plus: 2.77,
    						"Male1-15": 97.5,
    						"Male16-30": 84.25,
    						"Male31-48": 9.12,
    						Male49plus: -11.43,
    						all: 14.95
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 2,
    						"Female16-30": 2,
    						"Female31-48": 2,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 2,
    						"Male31-48": 2,
    						Male49plus: 2,
    						all: 2
    					},
    					"2011": {
    						"Female1-15": 2,
    						"Female16-30": 2,
    						"Female31-48": 2,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 2,
    						"Male31-48": 2,
    						Male49plus: 2,
    						all: 2
    					},
    					change: {
    						"Female1-15": 1,
    						"Female16-30": 1,
    						"Female31-48": 1,
    						Female49plus: 2,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 1,
    						Male49plus: 1,
    						all: 1
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 70.98,
    						rent_free: 2.17,
    						rented_private: 8.55,
    						rented_social: 17.82,
    						shared_ownership: 0.49
    					},
    					"2011": {
    						owned: 67.45,
    						rent_free: 1.56,
    						rented_private: 14.14,
    						rented_social: 16.5,
    						shared_ownership: 0.34
    					},
    					change: {
    						owned: -3.53,
    						rent_free: -0.61,
    						rented_private: 5.59,
    						rented_social: -1.32,
    						shared_ownership: -0.15
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 2,
    						shared_ownership: 2
    					},
    					"2011": {
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 2,
    						shared_ownership: 2
    					},
    					change: {
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 1,
    						shared_ownership: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 1214960,
    						owned: 862343,
    						rent_free: 26330,
    						rented_private: 103852,
    						rented_social: 216523,
    						shared_ownership: 5912
    					},
    					"2011": {
    						all: 1302676,
    						owned: 878654,
    						rent_free: 20381,
    						rented_private: 184254,
    						rented_social: 214911,
    						shared_ownership: 4476
    					},
    					change: {
    						all: 7.22,
    						owned: 1.89,
    						rent_free: -22.59,
    						rented_private: 77.42,
    						rented_social: -0.74,
    						shared_ownership: -24.29
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						owned: 2,
    						rent_free: 2,
    						rented_private: 2,
    						rented_social: 2,
    						shared_ownership: 2
    					},
    					"2011": {
    						all: 2,
    						owned: 2,
    						rent_free: 2,
    						rented_private: 2,
    						rented_social: 2,
    						shared_ownership: 2
    					},
    					change: {
    						all: 1,
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 1,
    						shared_ownership: 2
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 1.4
    					},
    					"2011": {
    						all: 1.48
    					},
    					change: {
    						all: 0.08000000000000007
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 2
    					},
    					change: {
    						all: 2
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.17,
    						"10-19": 13.11,
    						"20-29": 11.57,
    						"30-39": 14.14,
    						"40-49": 13.09,
    						"50-59": 13.27,
    						"60-69": 10.04,
    						"70-79": 4.33,
    						"80plus": 8.29
    					},
    					"2011": {
    						"0-9": 11.14,
    						"10-19": 12.3,
    						"20-29": 12.98,
    						"30-39": 11.68,
    						"40-49": 14.16,
    						"50-59": 12.68,
    						"60-69": 12.11,
    						"70-79": 4.39,
    						"80plus": 8.55
    					},
    					change: {
    						"0-9": -1.03,
    						"10-19": -0.81,
    						"20-29": 1.41,
    						"30-39": -2.46,
    						"40-49": 1.07,
    						"50-59": -0.59,
    						"60-69": 2.07,
    						"70-79": 0.06,
    						"80plus": 0.26
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 1,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1
    					},
    					"2011": {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 1,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1
    					},
    					change: {
    						"0-9": 2,
    						"10-19": 2,
    						"20-29": 1,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 2,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 353228,
    						"10-19": 380680,
    						"20-29": 335841,
    						"30-39": 410481,
    						"40-49": 379969,
    						"50-59": 385188,
    						"60-69": 291383,
    						"70-79": 125732,
    						"80plus": 240583,
    						all: 2903085
    					},
    					"2011": {
    						"0-9": 341380,
    						"10-19": 376868,
    						"20-29": 397652,
    						"30-39": 357739,
    						"40-49": 433866,
    						"50-59": 388522,
    						"60-69": 370892,
    						"70-79": 134543,
    						"80plus": 261994,
    						all: 3063456
    					},
    					change: {
    						"0-9": -3.35,
    						"10-19": -1,
    						"20-29": 18.4,
    						"30-39": -12.85,
    						"40-49": 14.18,
    						"50-59": 0.87,
    						"60-69": 27.29,
    						"70-79": 7.01,
    						"80plus": 8.9,
    						all: 5.52
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 2,
    						"10-19": 2,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 2,
    						"60-69": 2,
    						"70-79": 2,
    						"80plus": 2,
    						all: 2
    					},
    					"2011": {
    						"0-9": 2,
    						"10-19": 2,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 2,
    						"60-69": 2,
    						"70-79": 2,
    						"80plus": 2,
    						all: 2
    					},
    					change: {
    						"0-9": 2,
    						"10-19": 2,
    						"20-29": 1,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 2,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 2,
    						all: 2
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 39
    					},
    					"2011": {
    						all: 41
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1
    					},
    					"2011": {
    						all: 1
    					},
    					change: {
    						all: 2
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000008",
    		name: "South East",
    		type: "rgn",
    		area: 1906964.91,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000035",
    				name: "Medway",
    				type: "lad"
    			},
    			{
    				code: "E06000036",
    				name: "Bracknell Forest",
    				type: "lad"
    			},
    			{
    				code: "E06000037",
    				name: "West Berkshire",
    				type: "lad"
    			},
    			{
    				code: "E06000038",
    				name: "Reading",
    				type: "lad"
    			},
    			{
    				code: "E06000039",
    				name: "Slough",
    				type: "lad"
    			},
    			{
    				code: "E06000040",
    				name: "Windsor and Maidenhead",
    				type: "lad"
    			},
    			{
    				code: "E06000041",
    				name: "Wokingham",
    				type: "lad"
    			},
    			{
    				code: "E06000042",
    				name: "Milton Keynes",
    				type: "lad"
    			},
    			{
    				code: "E06000043",
    				name: "Brighton and Hove",
    				type: "lad"
    			},
    			{
    				code: "E06000044",
    				name: "Portsmouth",
    				type: "lad"
    			},
    			{
    				code: "E06000045",
    				name: "Southampton",
    				type: "lad"
    			},
    			{
    				code: "E06000046",
    				name: "Isle of Wight",
    				type: "lad"
    			},
    			{
    				code: "E06000060",
    				name: "Buckinghamshire",
    				type: "lad"
    			},
    			{
    				code: "E10000011",
    				name: "East Sussex",
    				type: "cty"
    			},
    			{
    				code: "E10000014",
    				name: "Hampshire",
    				type: "cty"
    			},
    			{
    				code: "E10000016",
    				name: "Kent",
    				type: "cty"
    			},
    			{
    				code: "E10000025",
    				name: "Oxfordshire",
    				type: "cty"
    			},
    			{
    				code: "E10000030",
    				name: "Surrey",
    				type: "cty"
    			},
    			{
    				code: "E10000032",
    				name: "West Sussex",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-1.95728,
    				50.57465
    			],
    			[
    				1.4519,
    				52.19632
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.2,
    						male: 48.8
    					},
    					"2011": {
    						female: 50.91,
    						male: 49.09
    					},
    					change: {
    						female: -0.29,
    						male: 0.29
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 6,
    						male: 4
    					},
    					"2011": {
    						female: 3,
    						male: 7
    					},
    					change: {
    						female: 4,
    						male: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 7521619,
    						female: 3851203,
    						male: 3670416
    					},
    					"2011": {
    						all: 8129467,
    						female: 4138515,
    						male: 3990952
    					},
    					change: {
    						all: 8.08,
    						female: 7.46,
    						male: 8.73
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						female: 1,
    						male: 1
    					},
    					"2011": {
    						all: 2,
    						female: 2,
    						male: 2
    					},
    					change: {
    						all: 4,
    						female: 4,
    						male: 4
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 6.75,
    						"20to49hoursWeek": 0.83,
    						"40PlushoursWeek": 1.65,
    						noCare: 90.77
    					},
    					"2011": {
    						"1to19hoursWeek": 6.66,
    						"20to49hoursWeek": 1.13,
    						"40PlushoursWeek": 2.03,
    						noCare: 90.19
    					},
    					change: {
    						"1to19hoursWeek": -0.09,
    						"20to49hoursWeek": 0.3,
    						"40PlushoursWeek": 0.38,
    						noCare: -0.58
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 9,
    						noCare: 2
    					},
    					"2011": {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 8,
    						noCare: 2
    					},
    					change: {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 5,
    						noCare: 8
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 507992,
    						"20to49hoursWeek": 62076,
    						"40PlushoursWeek": 123862,
    						all: 7521619,
    						noCare: 6827689
    					},
    					"2011": {
    						"1to19hoursWeek": 541294,
    						"20to49hoursWeek": 91615,
    						"40PlushoursWeek": 164930,
    						all: 8129467,
    						noCare: 7331628
    					},
    					change: {
    						"1to19hoursWeek": 6.56,
    						"20to49hoursWeek": 47.59,
    						"40PlushoursWeek": 33.16,
    						all: 8.08,
    						noCare: 7.38
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 4,
    						"40PlushoursWeek": 2,
    						all: 1,
    						noCare: 1
    					},
    					"2011": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 3,
    						"40PlushoursWeek": 2,
    						all: 2,
    						noCare: 2
    					},
    					change: {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 2,
    						all: 4,
    						noCare: 4
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.28,
    						Christian: 72.79,
    						Hindu: 0.55,
    						Jewish: 0.23,
    						Muslim: 1.22,
    						Noreligion: 16.59,
    						Otherreligion: 0.36,
    						Religionnotstated: 7.5,
    						Sikh: 0.48
    					},
    					"2011": {
    						Buddhist: 0.51,
    						Christian: 59.71,
    						Hindu: 1.06,
    						Jewish: 0.2,
    						Muslim: 2.16,
    						Noreligion: 27.89,
    						Otherreligion: 0.47,
    						Religionnotstated: 7.38,
    						Sikh: 0.62
    					},
    					change: {
    						Buddhist: 0.23,
    						Christian: -13.08,
    						Hindu: 0.51,
    						Jewish: -0.03,
    						Muslim: 0.94,
    						Noreligion: 11.3,
    						Otherreligion: 0.11,
    						Religionnotstated: -0.12,
    						Sikh: 0.14
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 2,
    						Christian: 5,
    						Hindu: 5,
    						Jewish: 4,
    						Muslim: 7,
    						Noreligion: 3,
    						Otherreligion: 3,
    						Religionnotstated: 5,
    						Sikh: 4
    					},
    					"2011": {
    						Buddhist: 2,
    						Christian: 5,
    						Hindu: 4,
    						Jewish: 4,
    						Muslim: 7,
    						Noreligion: 2,
    						Otherreligion: 3,
    						Religionnotstated: 3,
    						Sikh: 4
    					},
    					change: {
    						Buddhist: 2,
    						Christian: 6,
    						Hindu: 2,
    						Jewish: 7,
    						Muslim: 7,
    						Noreligion: 5,
    						Otherreligion: 6,
    						Religionnotstated: 2,
    						Sikh: 3
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 20885,
    						Christian: 5475298,
    						Hindu: 41608,
    						Jewish: 17466,
    						Muslim: 91392,
    						Noreligion: 1247568,
    						Otherreligion: 27442,
    						Religionnotstated: 563882,
    						Sikh: 36078,
    						all: 7521619
    					},
    					"2011": {
    						Buddhist: 41739,
    						Christian: 4854324,
    						Hindu: 86255,
    						Jewish: 16250,
    						Muslim: 175870,
    						Noreligion: 2267096,
    						Otherreligion: 37869,
    						Religionnotstated: 599780,
    						Sikh: 50284,
    						all: 8129467
    					},
    					change: {
    						Buddhist: 99.85,
    						Christian: -11.34,
    						Hindu: 107.3,
    						Jewish: -6.96,
    						Muslim: 92.43,
    						Noreligion: 81.72,
    						Otherreligion: 38,
    						Religionnotstated: 6.37,
    						Sikh: 39.38,
    						all: 8.08
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 2,
    						Christian: 1,
    						Hindu: 4,
    						Jewish: 4,
    						Muslim: 5,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 3,
    						all: 1
    					},
    					"2011": {
    						Buddhist: 2,
    						Christian: 1,
    						Hindu: 2,
    						Jewish: 4,
    						Muslim: 5,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 3,
    						all: 2
    					},
    					change: {
    						Buddhist: 2,
    						Christian: 4,
    						Hindu: 1,
    						Jewish: 7,
    						Muslim: 3,
    						Noreligion: 7,
    						Otherreligion: 8,
    						Religionnotstated: 3,
    						Sikh: 1,
    						all: 4
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 2.61,
    						black: 0.67,
    						mixed: 1.06,
    						other: 0.37,
    						white: 95.29
    					},
    					"2011": {
    						asian: 5.03,
    						black: 1.54,
    						mixed: 1.91,
    						other: 0.6,
    						white: 90.92
    					},
    					change: {
    						asian: 2.42,
    						black: 0.87,
    						mixed: 0.85,
    						other: 0.23,
    						white: -4.37
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 7,
    						black: 6,
    						mixed: 4,
    						other: 2,
    						white: 3
    					},
    					"2011": {
    						asian: 6,
    						black: 5,
    						mixed: 4,
    						other: 5,
    						white: 3
    					},
    					change: {
    						asian: 4,
    						black: 4,
    						mixed: 5,
    						other: 8,
    						white: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 7521619,
    						asian: 195990,
    						black: 50745,
    						mixed: 79495,
    						other: 27735,
    						white: 7167654
    					},
    					"2011": {
    						all: 8129467,
    						asian: 408773,
    						black: 125523,
    						mixed: 155404,
    						other: 48617,
    						white: 7391150
    					},
    					change: {
    						all: 8.08,
    						asian: 108.57,
    						black: 147.36,
    						mixed: 95.49,
    						other: 75.29,
    						white: 3.12
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						asian: 5,
    						black: 3,
    						mixed: 2,
    						other: 2,
    						white: 1
    					},
    					"2011": {
    						all: 2,
    						asian: 4,
    						black: 3,
    						mixed: 2,
    						other: 3,
    						white: 1
    					},
    					change: {
    						all: 4,
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 9,
    						white: 4
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 7.2,
    						fair: 21.51,
    						good: 71.29
    					},
    					"2011": {
    						bad: 4.39,
    						fair: 12.1,
    						good: 83.51
    					},
    					change: {
    						bad: -2.81,
    						fair: -9.41,
    						good: 12.22
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 9,
    						fair: 8,
    						good: 1
    					},
    					"2011": {
    						bad: 9,
    						fair: 8,
    						good: 2
    					},
    					change: {
    						bad: 1,
    						fair: 8,
    						good: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 7521619,
    						bad: 541641,
    						fair: 1618158,
    						good: 5361820
    					},
    					"2011": {
    						all: 8129467,
    						bad: 357022,
    						fair: 983605,
    						good: 6788840
    					},
    					change: {
    						all: 8.08,
    						bad: -34.09,
    						fair: -39.21,
    						good: 26.61
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						bad: 3,
    						fair: 1,
    						good: 1
    					},
    					"2011": {
    						all: 2,
    						bad: 3,
    						fair: 1,
    						good: 2
    					},
    					change: {
    						all: 4,
    						bad: 5,
    						fair: 9,
    						good: 6
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 55.37,
    						inactive: 30.09,
    						"self-employed": 9.48,
    						student: 2.73,
    						unemployed: 2.34
    					},
    					"2011": {
    						employee: 54.22,
    						inactive: 28.04,
    						"self-employed": 10.9,
    						student: 3.37,
    						unemployed: 3.47
    					},
    					change: {
    						employee: -1.15,
    						inactive: -2.05,
    						"self-employed": 1.42,
    						student: 0.64,
    						unemployed: 1.13
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 1,
    						inactive: 9,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 9
    					},
    					"2011": {
    						employee: 2,
    						inactive: 9,
    						"self-employed": 3,
    						student: 4,
    						unemployed: 8
    					},
    					change: {
    						employee: 9,
    						inactive: 1,
    						"self-employed": 2,
    						student: 9,
    						unemployed: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 5419362,
    						employee: 3000620,
    						inactive: 1630869,
    						"self-employed": 513584,
    						student: 147708,
    						unemployed: 126581
    					},
    					"2011": {
    						all: 5910568,
    						employee: 3204448,
    						inactive: 1657265,
    						"self-employed": 644497,
    						student: 199014,
    						unemployed: 205344
    					},
    					change: {
    						all: 9.06,
    						employee: 6.79,
    						inactive: 1.62,
    						"self-employed": 25.49,
    						student: 34.73,
    						unemployed: 62.22
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						employee: 1,
    						inactive: 3,
    						"self-employed": 1,
    						student: 2,
    						unemployed: 5
    					},
    					"2011": {
    						all: 2,
    						employee: 1,
    						inactive: 3,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 4
    					},
    					change: {
    						all: 5,
    						employee: 8,
    						inactive: 2,
    						"self-employed": 4,
    						student: 9,
    						unemployed: 1
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 29.03,
    						NoKids: 62.21,
    						NonDepKids: 8.76
    					},
    					"2011": {
    						Kids: 29.24,
    						NoKids: 61.7,
    						NonDepKids: 9.05
    					},
    					change: {
    						Kids: 0.21,
    						NoKids: -0.51,
    						NonDepKids: 0.29
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 7,
    						NoKids: 3,
    						NonDepKids: 7
    					},
    					"2011": {
    						Kids: 4,
    						NoKids: 4,
    						NonDepKids: 8
    					},
    					change: {
    						Kids: 2,
    						NoKids: 7,
    						NonDepKids: 3
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 899805,
    						NoKids: 1928159,
    						NonDepKids: 271442,
    						all: 3099406
    					},
    					"2011": {
    						Kids: 981012,
    						NoKids: 2070021,
    						NonDepKids: 303703,
    						all: 3354736
    					},
    					change: {
    						Kids: 9.02,
    						NoKids: 7.36,
    						NonDepKids: 11.89,
    						all: 8.24
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 1,
    						NoKids: 1,
    						NonDepKids: 2,
    						all: 1
    					},
    					"2011": {
    						Kids: 2,
    						NoKids: 1,
    						NonDepKids: 2,
    						all: 1
    					},
    					change: {
    						Kids: 3,
    						NoKids: 7,
    						NonDepKids: 3,
    						all: 5
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 9.75,
    						Cohabiting: 8.67,
    						LoneParent: 7.96,
    						Married: 38.52,
    						OnePerson: 28.74,
    						Other: 6.36
    					},
    					"2011": {
    						"65andOver": 8.94,
    						Cohabiting: 9.89,
    						LoneParent: 9.24,
    						Married: 35.6,
    						OnePerson: 28.95,
    						Other: 7.38
    					},
    					change: {
    						"65andOver": -0.81,
    						Cohabiting: 1.22,
    						LoneParent: 1.28,
    						Married: -2.92,
    						OnePerson: 0.21,
    						Other: 1.02
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 4,
    						Cohabiting: 4,
    						LoneParent: 9,
    						Married: 3,
    						OnePerson: 7,
    						Other: 2
    					},
    					"2011": {
    						"65andOver": 4,
    						Cohabiting: 6,
    						LoneParent: 8,
    						Married: 2,
    						OnePerson: 8,
    						Other: 2
    					},
    					change: {
    						"65andOver": 5,
    						Cohabiting: 8,
    						LoneParent: 3,
    						Married: 2,
    						OnePerson: 7,
    						Other: 6
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 302284,
    						Cohabiting: 268628,
    						LoneParent: 246831,
    						Married: 1193785,
    						OnePerson: 890656,
    						Other: 197222,
    						all: 3099406
    					},
    					"2011": {
    						"65andOver": 299790,
    						Cohabiting: 331871,
    						LoneParent: 309952,
    						Married: 1194448,
    						OnePerson: 971089,
    						Other: 247586,
    						all: 3354736
    					},
    					change: {
    						"65andOver": -0.83,
    						Cohabiting: 23.54,
    						LoneParent: 25.57,
    						Married: 0.06,
    						OnePerson: 9.03,
    						Other: 25.54,
    						all: 8.24
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 1,
    						Cohabiting: 1,
    						LoneParent: 3,
    						Married: 1,
    						OnePerson: 2,
    						Other: 2,
    						all: 1
    					},
    					"2011": {
    						"65andOver": 1,
    						Cohabiting: 1,
    						LoneParent: 3,
    						Married: 1,
    						OnePerson: 2,
    						Other: 2,
    						all: 1
    					},
    					change: {
    						"65andOver": 5,
    						Cohabiting: 8,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 8,
    						Other: 6,
    						all: 5
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 52.76,
    						Seperated: 10.58,
    						Single: 28.51,
    						Widowed: 8.15
    					},
    					"2011": {
    						Married: 49.27,
    						Seperated: 11.73,
    						Single: 32.08,
    						Widowed: 6.92
    					},
    					change: {
    						Married: -3.49,
    						Seperated: 1.15,
    						Single: 3.57,
    						Widowed: -1.23
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 4,
    						Seperated: 5,
    						Single: 6,
    						Widowed: 7
    					},
    					"2011": {
    						Married: 2,
    						Seperated: 5,
    						Single: 7,
    						Widowed: 8
    					},
    					change: {
    						Married: 2,
    						Seperated: 4,
    						Single: 8,
    						Widowed: 3
    					}
    				},
    				value: {
    					"2001": {
    						Married: 3180103,
    						Seperated: 637885,
    						Single: 1718550,
    						Widowed: 490996,
    						all: 6027534
    					},
    					"2011": {
    						Married: 3246559,
    						Seperated: 772642,
    						Single: 2114065,
    						Widowed: 456166,
    						all: 6589432
    					},
    					change: {
    						Married: 2.09,
    						Seperated: 21.13,
    						Single: 23.01,
    						Widowed: -7.09,
    						all: 9.32
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 1,
    						Seperated: 1,
    						Single: 2,
    						Widowed: 1,
    						all: 1
    					},
    					"2011": {
    						Married: 1,
    						Seperated: 1,
    						Single: 2,
    						Widowed: 1,
    						all: 1
    					},
    					change: {
    						Married: 2,
    						Seperated: 3,
    						Single: 8,
    						Widowed: 3,
    						all: 5
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 3.28,
    						bus: 4.55,
    						car_van: 66.71,
    						foot: 10.48,
    						home: 10.27,
    						moto: 1.08,
    						other: 0.49,
    						taxi: 0.43,
    						train_metro: 2.73
    					},
    					"2011": {
    						bicycle: 3.1,
    						bus: 4.57,
    						car_van: 65.25,
    						foot: 11.02,
    						home: 6.45,
    						moto: 0.87,
    						other: 0.67,
    						taxi: 0.39,
    						train_metro: 7.69
    					},
    					change: {
    						bicycle: -0.18,
    						bus: 0.02,
    						car_van: -1.46,
    						foot: 0.54,
    						home: -3.82,
    						moto: -0.21,
    						other: 0.18,
    						taxi: -0.04,
    						train_metro: 4.96
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 3,
    						bus: 8,
    						car_van: 3,
    						foot: 4,
    						home: 2,
    						moto: 4,
    						other: 1,
    						taxi: 7,
    						train_metro: 3
    					},
    					"2011": {
    						bicycle: 4,
    						bus: 8,
    						car_van: 8,
    						foot: 4,
    						home: 2,
    						moto: 3,
    						other: 4,
    						taxi: 8,
    						train_metro: 3
    					},
    					change: {
    						bicycle: 5,
    						bus: 2,
    						car_van: 8,
    						foot: 5,
    						home: 2,
    						moto: 1,
    						other: 9,
    						taxi: 8,
    						train_metro: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 3486330,
    						bicycle: 114267,
    						bus: 158577,
    						car_van: 2325674,
    						foot: 365233,
    						home: 358175,
    						moto: 37534,
    						other: 16931,
    						taxi: 14859,
    						train_metro: 95080
    					},
    					"2011": {
    						all: 4005747,
    						bicycle: 124094,
    						bus: 182865,
    						car_van: 2613741,
    						foot: 441442,
    						home: 258419,
    						moto: 34905,
    						other: 26775,
    						taxi: 15533,
    						train_metro: 307973
    					},
    					change: {
    						all: 14.9,
    						bicycle: 8.6,
    						bus: 15.32,
    						car_van: 12.39,
    						foot: 20.87,
    						home: -27.85,
    						moto: -7,
    						other: 58.14,
    						taxi: 4.54,
    						train_metro: 223.91
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						bicycle: 1,
    						bus: 5,
    						car_van: 1,
    						foot: 1,
    						home: 1,
    						moto: 2,
    						other: 1,
    						taxi: 3,
    						train_metro: 2
    					},
    					"2011": {
    						all: 1,
    						bicycle: 2,
    						bus: 5,
    						car_van: 1,
    						foot: 1,
    						home: 1,
    						moto: 2,
    						other: 2,
    						taxi: 4,
    						train_metro: 2
    					},
    					change: {
    						all: 3,
    						bicycle: 4,
    						bus: 2,
    						car_van: 8,
    						foot: 4,
    						home: 1,
    						moto: 1,
    						other: 9,
    						taxi: 8,
    						train_metro: 2
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.91,
    						"Female16-30": 12.63,
    						"Female31-48": 22.43,
    						Female49plus: 3.34,
    						"Male1-15": 2.06,
    						"Male16-30": 3.13,
    						"Male31-48": 35.2,
    						Male49plus: 14.31
    					},
    					"2011": {
    						"Female1-15": 7.18,
    						"Female16-30": 13.89,
    						"Female31-48": 22.59,
    						Female49plus: 3.34,
    						"Male1-15": 3.08,
    						"Male16-30": 4.5,
    						"Male31-48": 34.25,
    						Male49plus: 11.17
    					},
    					change: {
    						"Female1-15": 0.27,
    						"Female16-30": 1.26,
    						"Female31-48": 0.16,
    						Female49plus: 0,
    						"Male1-15": 1.02,
    						"Male16-30": 1.37,
    						"Male31-48": -0.95,
    						Male49plus: -3.14
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 3,
    						"Female16-30": 8,
    						"Female31-48": 5,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 8,
    						"Male31-48": 8,
    						Male49plus: 2
    					},
    					"2011": {
    						"Female1-15": 3,
    						"Female16-30": 8,
    						"Female31-48": 5,
    						Female49plus: 2,
    						"Male1-15": 3,
    						"Male16-30": 9,
    						"Male31-48": 8,
    						Male49plus: 3
    					},
    					change: {
    						"Female1-15": 3,
    						"Female16-30": 7,
    						"Female31-48": 6,
    						Female49plus: 2,
    						"Male1-15": 9,
    						"Male16-30": 9,
    						"Male31-48": 1,
    						Male49plus: 5
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 252165,
    						"Female16-30": 460565,
    						"Female31-48": 818092,
    						Female49plus: 121752,
    						"Male1-15": 74985,
    						"Male16-30": 114164,
    						"Male31-48": 1283757,
    						Male49plus: 521832,
    						all: 3647312
    					},
    					"2011": {
    						"Female1-15": 287726,
    						"Female16-30": 556370,
    						"Female31-48": 904714,
    						Female49plus: 133762,
    						"Male1-15": 123468,
    						"Male16-30": 180377,
    						"Male31-48": 1371889,
    						Male49plus: 447441,
    						all: 4005747
    					},
    					change: {
    						"Female1-15": 14.1,
    						"Female16-30": 20.8,
    						"Female31-48": 10.59,
    						Female49plus: 9.86,
    						"Male1-15": 64.66,
    						"Male16-30": 58,
    						"Male31-48": 6.87,
    						Male49plus: -14.26,
    						all: 9.83
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 1,
    						"Female16-30": 1,
    						"Female31-48": 2,
    						Female49plus: 2,
    						"Male1-15": 1,
    						"Male16-30": 2,
    						"Male31-48": 1,
    						Male49plus: 1,
    						all: 1
    					},
    					"2011": {
    						"Female1-15": 1,
    						"Female16-30": 1,
    						"Female31-48": 2,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 2,
    						"Male31-48": 1,
    						Male49plus: 2,
    						all: 1
    					},
    					change: {
    						"Female1-15": 3,
    						"Female16-30": 6,
    						"Female31-48": 8,
    						Female49plus: 3,
    						"Male1-15": 9,
    						"Male16-30": 8,
    						"Male31-48": 6,
    						Male49plus: 4,
    						all: 8
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 73.22,
    						rent_free: 1.88,
    						rented_private: 10.23,
    						rented_social: 13.88,
    						shared_ownership: 0.78
    					},
    					"2011": {
    						owned: 67.36,
    						rent_free: 1.28,
    						rented_private: 16.48,
    						rented_social: 13.77,
    						shared_ownership: 1.11
    					},
    					change: {
    						owned: -5.86,
    						rent_free: -0.6,
    						rented_private: 6.25,
    						rented_social: -0.11,
    						shared_ownership: 0.33
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 1,
    						rent_free: 6,
    						rented_private: 3,
    						rented_social: 8,
    						shared_ownership: 2
    					},
    					"2011": {
    						owned: 2,
    						rent_free: 7,
    						rented_private: 3,
    						rented_social: 8,
    						shared_ownership: 2
    					},
    					change: {
    						owned: 8,
    						rent_free: 4,
    						rented_private: 7,
    						rented_social: 1,
    						shared_ownership: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 3123807,
    						owned: 2287291,
    						rent_free: 58829,
    						rented_private: 319714,
    						rented_social: 433569,
    						shared_ownership: 24404
    					},
    					"2011": {
    						all: 3354736,
    						owned: 2259665,
    						rent_free: 43018,
    						rented_private: 552717,
    						rented_social: 462002,
    						shared_ownership: 37334
    					},
    					change: {
    						all: 7.39,
    						owned: -1.21,
    						rent_free: -26.88,
    						rented_private: 72.88,
    						rented_social: 6.56,
    						shared_ownership: 52.98
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						owned: 1,
    						rent_free: 2,
    						rented_private: 2,
    						rented_social: 5,
    						shared_ownership: 2
    					},
    					"2011": {
    						all: 1,
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 3,
    						shared_ownership: 2
    					},
    					change: {
    						all: 4,
    						owned: 8,
    						rent_free: 4,
    						rented_private: 8,
    						rented_social: 1,
    						shared_ownership: 1
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 3.94
    					},
    					"2011": {
    						all: 4.26
    					},
    					change: {
    						all: 0.31999999999999984
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4
    					},
    					"2011": {
    						all: 4
    					},
    					change: {
    						all: 4
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.18,
    						"10-19": 12.49,
    						"20-29": 12.07,
    						"30-39": 15.4,
    						"40-49": 13.62,
    						"50-59": 12.94,
    						"60-69": 9.2,
    						"70-79": 4.01,
    						"80plus": 8.09
    					},
    					"2011": {
    						"0-9": 11.8,
    						"10-19": 12.19,
    						"20-29": 12.41,
    						"30-39": 12.95,
    						"40-49": 14.98,
    						"50-59": 12.27,
    						"60-69": 11.12,
    						"70-79": 3.93,
    						"80plus": 8.35
    					},
    					change: {
    						"0-9": -0.38,
    						"10-19": -0.3,
    						"20-29": 0.34,
    						"30-39": -2.45,
    						"40-49": 1.36,
    						"50-59": -0.67,
    						"60-69": 1.92,
    						"70-79": -0.08,
    						"80plus": 0.26
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 6,
    						"10-19": 6,
    						"20-29": 4,
    						"30-39": 3,
    						"40-49": 2,
    						"50-59": 4,
    						"60-69": 8,
    						"70-79": 8,
    						"80plus": 2
    					},
    					"2011": {
    						"0-9": 5,
    						"10-19": 5,
    						"20-29": 7,
    						"30-39": 3,
    						"40-49": 1,
    						"50-59": 7,
    						"60-69": 5,
    						"70-79": 8,
    						"80plus": 2
    					},
    					change: {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 9,
    						"30-39": 2,
    						"40-49": 2,
    						"50-59": 6,
    						"60-69": 3,
    						"70-79": 7,
    						"80plus": 7
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 916379,
    						"10-19": 939571,
    						"20-29": 907988,
    						"30-39": 1158303,
    						"40-49": 1024747,
    						"50-59": 973173,
    						"60-69": 692041,
    						"70-79": 301245,
    						"80plus": 608172,
    						all: 7521619
    					},
    					"2011": {
    						"0-9": 959522,
    						"10-19": 990839,
    						"20-29": 1008763,
    						"30-39": 1052650,
    						"40-49": 1218025,
    						"50-59": 997642,
    						"60-69": 903758,
    						"70-79": 319404,
    						"80plus": 678864,
    						all: 8129467
    					},
    					change: {
    						"0-9": 4.71,
    						"10-19": 5.46,
    						"20-29": 11.1,
    						"30-39": -9.12,
    						"40-49": 18.86,
    						"50-59": 2.51,
    						"60-69": 30.59,
    						"70-79": 6.03,
    						"80plus": 11.62,
    						all: 8.08
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 1,
    						"50-59": 1,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1,
    						all: 1
    					},
    					"2011": {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 2,
    						"30-39": 2,
    						"40-49": 1,
    						"50-59": 1,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1,
    						all: 2
    					},
    					change: {
    						"0-9": 2,
    						"10-19": 3,
    						"20-29": 9,
    						"30-39": 3,
    						"40-49": 4,
    						"50-59": 5,
    						"60-69": 3,
    						"70-79": 4,
    						"80plus": 5,
    						all: 4
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 40
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 3
    					},
    					change: {
    						all: 3
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000009",
    		name: "South West",
    		type: "rgn",
    		area: 2383736.25,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000022",
    				name: "Bath and North East Somerset",
    				type: "lad"
    			},
    			{
    				code: "E06000023",
    				name: "Bristol, City of",
    				type: "lad"
    			},
    			{
    				code: "E06000024",
    				name: "North Somerset",
    				type: "lad"
    			},
    			{
    				code: "E06000025",
    				name: "South Gloucestershire",
    				type: "lad"
    			},
    			{
    				code: "E06000026",
    				name: "Plymouth",
    				type: "lad"
    			},
    			{
    				code: "E06000027",
    				name: "Torbay",
    				type: "lad"
    			},
    			{
    				code: "E06000030",
    				name: "Swindon",
    				type: "lad"
    			},
    			{
    				code: "E06000052",
    				name: "Cornwall",
    				type: "lad"
    			},
    			{
    				code: "E06000053",
    				name: "Isles of Scilly",
    				type: "lad"
    			},
    			{
    				code: "E06000054",
    				name: "Wiltshire",
    				type: "lad"
    			},
    			{
    				code: "E06000058",
    				name: "Bournemouth, Christchurch and Poole",
    				type: "lad"
    			},
    			{
    				code: "E06000059",
    				name: "Dorset",
    				type: "lad"
    			},
    			{
    				code: "E10000008",
    				name: "Devon",
    				type: "cty"
    			},
    			{
    				code: "E10000013",
    				name: "Gloucestershire",
    				type: "cty"
    			},
    			{
    				code: "E10000027",
    				name: "Somerset",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-6.41894,
    				49.86464
    			],
    			[
    				-1.48573,
    				52.11258
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.27,
    						male: 48.73
    					},
    					"2011": {
    						female: 51,
    						male: 49
    					},
    					change: {
    						female: -0.27,
    						male: 0.27
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 5,
    						male: 5
    					},
    					"2011": {
    						female: 2,
    						male: 8
    					},
    					change: {
    						female: 3,
    						male: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 4098348,
    						female: 2101043,
    						male: 1997305
    					},
    					"2011": {
    						all: 4400032,
    						female: 2244057,
    						male: 2155975
    					},
    					change: {
    						all: 7.36,
    						female: 6.81,
    						male: 7.94
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						female: 7,
    						male: 7
    					},
    					"2011": {
    						all: 7,
    						female: 7,
    						male: 7
    					},
    					change: {
    						all: 5,
    						female: 5,
    						male: 5
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 7.01,
    						"20to49hoursWeek": 0.99,
    						"40PlushoursWeek": 1.98,
    						noCare: 90.01
    					},
    					"2011": {
    						"1to19hoursWeek": 7.06,
    						"20to49hoursWeek": 1.29,
    						"40PlushoursWeek": 2.36,
    						noCare: 89.29
    					},
    					change: {
    						"1to19hoursWeek": 0.05,
    						"20to49hoursWeek": 0.3,
    						"40PlushoursWeek": 0.38,
    						noCare: -0.72
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 7,
    						"40PlushoursWeek": 6,
    						noCare: 4
    					},
    					"2011": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 6,
    						noCare: 5
    					},
    					change: {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 5,
    						noCare: 9
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 287368,
    						"20to49hoursWeek": 40709,
    						"40PlushoursWeek": 81286,
    						all: 4098348,
    						noCare: 3688985
    					},
    					"2011": {
    						"1to19hoursWeek": 310570,
    						"20to49hoursWeek": 56747,
    						"40PlushoursWeek": 104058,
    						all: 4400032,
    						noCare: 3928657
    					},
    					change: {
    						"1to19hoursWeek": 8.07,
    						"20to49hoursWeek": 39.4,
    						"40PlushoursWeek": 28.01,
    						all: 7.36,
    						noCare: 6.5
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 7,
    						all: 7,
    						noCare: 7
    					},
    					"2011": {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 7,
    						"40PlushoursWeek": 7,
    						all: 7,
    						noCare: 7
    					},
    					change: {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 4,
    						"40PlushoursWeek": 3,
    						all: 5,
    						noCare: 5
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.23,
    						Christian: 73.66,
    						Hindu: 0.18,
    						Jewish: 0.1,
    						Muslim: 0.49,
    						Noreligion: 17.05,
    						Otherreligion: 0.37,
    						Religionnotstated: 7.81,
    						Sikh: 0.11
    					},
    					"2011": {
    						Buddhist: 0.37,
    						Christian: 59.98,
    						Hindu: 0.31,
    						Jewish: 0.09,
    						Muslim: 1.03,
    						Noreligion: 29.66,
    						Otherreligion: 0.55,
    						Religionnotstated: 7.88,
    						Sikh: 0.13
    					},
    					change: {
    						Buddhist: 0.14,
    						Christian: -13.68,
    						Hindu: 0.13,
    						Jewish: -0.01,
    						Muslim: 0.54,
    						Noreligion: 12.61,
    						Otherreligion: 0.18,
    						Religionnotstated: 0.07,
    						Sikh: 0.02
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 3,
    						Christian: 3,
    						Hindu: 8,
    						Jewish: 7,
    						Muslim: 9,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 8
    					},
    					"2011": {
    						Buddhist: 4,
    						Christian: 4,
    						Hindu: 8,
    						Jewish: 7,
    						Muslim: 9,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 2,
    						Sikh: 8
    					},
    					change: {
    						Buddhist: 4,
    						Christian: 9,
    						Hindu: 8,
    						Jewish: 4,
    						Muslim: 9,
    						Noreligion: 1,
    						Otherreligion: 2,
    						Religionnotstated: 1,
    						Sikh: 9
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 9330,
    						Christian: 3018953,
    						Hindu: 7363,
    						Jewish: 3988,
    						Muslim: 20198,
    						Noreligion: 698747,
    						Otherreligion: 15128,
    						Religionnotstated: 320272,
    						Sikh: 4368,
    						all: 4098347
    					},
    					"2011": {
    						Buddhist: 16227,
    						Christian: 2639135,
    						Hindu: 13787,
    						Jewish: 4012,
    						Muslim: 45169,
    						Noreligion: 1305025,
    						Otherreligion: 24364,
    						Religionnotstated: 346767,
    						Sikh: 5546,
    						all: 4400032
    					},
    					change: {
    						Buddhist: 73.92,
    						Christian: -12.58,
    						Hindu: 87.25,
    						Jewish: 0.6,
    						Muslim: 123.63,
    						Noreligion: 86.77,
    						Otherreligion: 61.05,
    						Religionnotstated: 8.27,
    						Sikh: 26.97,
    						all: 7.36
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 6,
    						Christian: 7,
    						Hindu: 8,
    						Jewish: 7,
    						Muslim: 9,
    						Noreligion: 6,
    						Otherreligion: 3,
    						Religionnotstated: 7,
    						Sikh: 9,
    						all: 7
    					},
    					"2011": {
    						Buddhist: 6,
    						Christian: 7,
    						Hindu: 8,
    						Jewish: 8,
    						Muslim: 9,
    						Noreligion: 6,
    						Otherreligion: 4,
    						Religionnotstated: 7,
    						Sikh: 9,
    						all: 7
    					},
    					change: {
    						Buddhist: 6,
    						Christian: 7,
    						Hindu: 2,
    						Jewish: 5,
    						Muslim: 1,
    						Noreligion: 6,
    						Otherreligion: 7,
    						Religionnotstated: 2,
    						Sikh: 6,
    						all: 5
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 0.98,
    						black: 0.47,
    						mixed: 0.78,
    						other: 0.18,
    						white: 97.6
    					},
    					"2011": {
    						asian: 2.04,
    						black: 1.04,
    						mixed: 1.39,
    						other: 0.29,
    						white: 95.24
    					},
    					change: {
    						asian: 1.06,
    						black: 0.57,
    						mixed: 0.61,
    						other: 0.11,
    						white: -2.36
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 9,
    						black: 8,
    						mixed: 8,
    						other: 7,
    						white: 2
    					},
    					"2011": {
    						asian: 9,
    						black: 8,
    						mixed: 8,
    						other: 9,
    						white: 2
    					},
    					change: {
    						asian: 9,
    						black: 8,
    						mixed: 8,
    						other: 9,
    						white: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 4098345,
    						asian: 39985,
    						black: 19167,
    						mixed: 31908,
    						other: 7336,
    						white: 3999949
    					},
    					"2011": {
    						all: 4400032,
    						asian: 89562,
    						black: 45962,
    						mixed: 61159,
    						other: 12901,
    						white: 4190448
    					},
    					change: {
    						all: 7.36,
    						asian: 123.99,
    						black: 139.8,
    						mixed: 91.67,
    						other: 75.86,
    						white: 4.76
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						asian: 8,
    						black: 8,
    						mixed: 8,
    						other: 7,
    						white: 7
    					},
    					"2011": {
    						all: 7,
    						asian: 8,
    						black: 8,
    						mixed: 8,
    						other: 8,
    						white: 7
    					},
    					change: {
    						all: 5,
    						asian: 1,
    						black: 4,
    						mixed: 4,
    						other: 8,
    						white: 1
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 8.46,
    						fair: 22.47,
    						good: 69.07
    					},
    					"2011": {
    						bad: 5.14,
    						fair: 13.3,
    						good: 81.56
    					},
    					change: {
    						bad: -3.32,
    						fair: -9.17,
    						good: 12.49
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 6,
    						fair: 5,
    						good: 4
    					},
    					"2011": {
    						bad: 6,
    						fair: 6,
    						good: 4
    					},
    					change: {
    						bad: 3,
    						fair: 5,
    						good: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 4098348,
    						bad: 346797,
    						fair: 920923,
    						good: 2830628
    					},
    					"2011": {
    						all: 4400032,
    						bad: 226119,
    						fair: 585375,
    						good: 3588538
    					},
    					change: {
    						all: 7.36,
    						bad: -34.8,
    						fair: -36.44,
    						good: 26.78
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						bad: 7,
    						fair: 7,
    						good: 7
    					},
    					"2011": {
    						all: 7,
    						bad: 7,
    						fair: 7,
    						good: 7
    					},
    					change: {
    						all: 5,
    						bad: 6,
    						fair: 6,
    						good: 5
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 52.72,
    						inactive: 32.13,
    						"self-employed": 9.98,
    						student: 2.56,
    						unemployed: 2.61
    					},
    					"2011": {
    						employee: 52.75,
    						inactive: 29.52,
    						"self-employed": 11.17,
    						student: 3.24,
    						unemployed: 3.32
    					},
    					change: {
    						employee: 0.03,
    						inactive: -2.61,
    						"self-employed": 1.19,
    						student: 0.68,
    						unemployed: 0.71
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 3,
    						inactive: 7,
    						"self-employed": 1,
    						student: 3,
    						unemployed: 7
    					},
    					"2011": {
    						employee: 3,
    						inactive: 6,
    						"self-employed": 2,
    						student: 8,
    						unemployed: 9
    					},
    					change: {
    						employee: 3,
    						inactive: 5,
    						"self-employed": 5,
    						student: 8,
    						unemployed: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 2945976,
    						employee: 1553059,
    						inactive: 946578,
    						"self-employed": 293988,
    						student: 75377,
    						unemployed: 76974
    					},
    					"2011": {
    						all: 3215470,
    						employee: 1696214,
    						inactive: 949313,
    						"self-employed": 359156,
    						student: 104151,
    						unemployed: 106636
    					},
    					change: {
    						all: 9.15,
    						employee: 9.22,
    						inactive: 0.29,
    						"self-employed": 22.17,
    						student: 38.17,
    						unemployed: 38.54
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						employee: 7,
    						inactive: 7,
    						"self-employed": 5,
    						student: 7,
    						unemployed: 9
    					},
    					"2011": {
    						all: 7,
    						employee: 7,
    						inactive: 7,
    						"self-employed": 5,
    						student: 7,
    						unemployed: 8
    					},
    					change: {
    						all: 4,
    						employee: 3,
    						inactive: 5,
    						"self-employed": 9,
    						student: 8,
    						unemployed: 6
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 27.76,
    						NoKids: 63.82,
    						NonDepKids: 8.41
    					},
    					"2011": {
    						Kids: 26.87,
    						NoKids: 64.53,
    						NonDepKids: 8.6
    					},
    					change: {
    						Kids: -0.89,
    						NoKids: 0.71,
    						NonDepKids: 0.19
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 9,
    						NoKids: 1,
    						NonDepKids: 9
    					},
    					"2011": {
    						Kids: 9,
    						NoKids: 1,
    						NonDepKids: 9
    					},
    					change: {
    						Kids: 5,
    						NoKids: 5,
    						NonDepKids: 5
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 479543,
    						NoKids: 1102368,
    						NonDepKids: 145309,
    						all: 1727220
    					},
    					"2011": {
    						Kids: 504157,
    						NoKids: 1210532,
    						NonDepKids: 161305,
    						all: 1875994
    					},
    					change: {
    						Kids: 5.13,
    						NoKids: 9.81,
    						NonDepKids: 11.01,
    						all: 8.61
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 7,
    						NoKids: 7,
    						NonDepKids: 7,
    						all: 7
    					},
    					"2011": {
    						Kids: 7,
    						NoKids: 7,
    						NonDepKids: 7,
    						all: 7
    					},
    					change: {
    						Kids: 5,
    						NoKids: 2,
    						NonDepKids: 4,
    						all: 2
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 10.64,
    						Cohabiting: 8.35,
    						LoneParent: 8.11,
    						Married: 37.6,
    						OnePerson: 29.42,
    						Other: 5.88
    					},
    					"2011": {
    						"65andOver": 9.82,
    						Cohabiting: 10.11,
    						LoneParent: 9.01,
    						Married: 34.27,
    						OnePerson: 30.06,
    						Other: 6.73
    					},
    					change: {
    						"65andOver": -0.82,
    						Cohabiting: 1.76,
    						LoneParent: 0.9,
    						Married: -3.33,
    						OnePerson: 0.64,
    						Other: 0.85
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 1,
    						Cohabiting: 5,
    						LoneParent: 7,
    						Married: 5,
    						OnePerson: 5,
    						Other: 4
    					},
    					"2011": {
    						"65andOver": 1,
    						Cohabiting: 4,
    						LoneParent: 9,
    						Married: 4,
    						OnePerson: 5,
    						Other: 5
    					},
    					change: {
    						"65andOver": 6,
    						Cohabiting: 4,
    						LoneParent: 7,
    						Married: 3,
    						OnePerson: 6,
    						Other: 8
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 183760,
    						Cohabiting: 144138,
    						LoneParent: 140149,
    						Married: 649384,
    						OnePerson: 508164,
    						Other: 101625,
    						all: 1727220
    					},
    					"2011": {
    						"65andOver": 184182,
    						Cohabiting: 189651,
    						LoneParent: 168967,
    						Married: 642977,
    						OnePerson: 563947,
    						Other: 126270,
    						all: 1875994
    					},
    					change: {
    						"65andOver": 0.23,
    						Cohabiting: 31.58,
    						LoneParent: 20.56,
    						Married: -0.99,
    						OnePerson: 10.98,
    						Other: 24.25,
    						all: 8.61
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 6,
    						Cohabiting: 7,
    						LoneParent: 7,
    						Married: 7,
    						OnePerson: 7,
    						Other: 7,
    						all: 7
    					},
    					"2011": {
    						"65andOver": 6,
    						Cohabiting: 7,
    						LoneParent: 7,
    						Married: 7,
    						OnePerson: 7,
    						Other: 7,
    						all: 7
    					},
    					change: {
    						"65andOver": 3,
    						Cohabiting: 4,
    						LoneParent: 5,
    						Married: 4,
    						OnePerson: 4,
    						Other: 7,
    						all: 2
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 53.23,
    						Seperated: 10.98,
    						Single: 27.1,
    						Widowed: 8.69
    					},
    					"2011": {
    						Married: 49.1,
    						Seperated: 12.1,
    						Single: 31.44,
    						Widowed: 7.36
    					},
    					change: {
    						Married: -4.13,
    						Seperated: 1.12,
    						Single: 4.34,
    						Widowed: -1.33
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 3,
    						Seperated: 2,
    						Single: 9,
    						Widowed: 4
    					},
    					"2011": {
    						Married: 3,
    						Seperated: 1,
    						Single: 8,
    						Widowed: 3
    					},
    					change: {
    						Married: 3,
    						Seperated: 5,
    						Single: 6,
    						Widowed: 4
    					}
    				},
    				value: {
    					"2001": {
    						Married: 1760862,
    						Seperated: 363348,
    						Single: 896299,
    						Widowed: 287395,
    						all: 3307904
    					},
    					"2011": {
    						Married: 1775681,
    						Seperated: 437499,
    						Single: 1137202,
    						Widowed: 266116,
    						all: 3616498
    					},
    					change: {
    						Married: 0.84,
    						Seperated: 20.41,
    						Single: 26.88,
    						Widowed: -7.4,
    						all: 9.33
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 7,
    						Seperated: 7,
    						Single: 7,
    						Widowed: 7,
    						all: 7
    					},
    					"2011": {
    						Married: 7,
    						Seperated: 7,
    						Single: 7,
    						Widowed: 7,
    						all: 7
    					},
    					change: {
    						Married: 4,
    						Seperated: 5,
    						Single: 3,
    						Widowed: 4,
    						all: 4
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 3.24,
    						bus: 5.28,
    						car_van: 64.96,
    						foot: 12.43,
    						home: 11.05,
    						moto: 1.5,
    						other: 0.44,
    						taxi: 0.3,
    						train_metro: 0.79
    					},
    					"2011": {
    						bicycle: 3.42,
    						bus: 4.75,
    						car_van: 67.45,
    						foot: 13.72,
    						home: 6.93,
    						moto: 1.1,
    						other: 0.68,
    						taxi: 0.3,
    						train_metro: 1.66
    					},
    					change: {
    						bicycle: 0.18,
    						bus: -0.53,
    						car_van: 2.49,
    						foot: 1.29,
    						home: -4.12,
    						moto: -0.4,
    						other: 0.24,
    						taxi: 0,
    						train_metro: 0.87
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 4,
    						bus: 7,
    						car_van: 6,
    						foot: 1,
    						home: 1,
    						moto: 1,
    						other: 2,
    						taxi: 9,
    						train_metro: 8
    					},
    					"2011": {
    						bicycle: 3,
    						bus: 7,
    						car_van: 6,
    						foot: 1,
    						home: 1,
    						moto: 2,
    						other: 3,
    						taxi: 9,
    						train_metro: 8
    					},
    					change: {
    						bicycle: 2,
    						bus: 4,
    						car_van: 6,
    						foot: 2,
    						home: 5,
    						moto: 9,
    						other: 6,
    						taxi: 6,
    						train_metro: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 1896549,
    						bicycle: 61472,
    						bus: 100128,
    						car_van: 1231993,
    						foot: 235674,
    						home: 209529,
    						moto: 28542,
    						other: 8439,
    						taxi: 5738,
    						train_metro: 15034
    					},
    					"2011": {
    						all: 2138987,
    						bicycle: 73180,
    						bus: 101622,
    						car_van: 1442834,
    						foot: 293391,
    						home: 148139,
    						moto: 23529,
    						other: 14529,
    						taxi: 6358,
    						train_metro: 35405
    					},
    					change: {
    						all: 12.78,
    						bicycle: 19.05,
    						bus: 1.49,
    						car_van: 17.11,
    						foot: 24.49,
    						home: -29.3,
    						moto: -17.56,
    						other: 72.16,
    						taxi: 10.81,
    						train_metro: 135.5
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						bicycle: 6,
    						bus: 8,
    						car_van: 7,
    						foot: 5,
    						home: 5,
    						moto: 3,
    						other: 4,
    						taxi: 9,
    						train_metro: 8
    					},
    					"2011": {
    						all: 7,
    						bicycle: 4,
    						bus: 8,
    						car_van: 6,
    						foot: 4,
    						home: 4,
    						moto: 3,
    						other: 6,
    						taxi: 9,
    						train_metro: 8
    					},
    					change: {
    						all: 5,
    						bicycle: 3,
    						bus: 5,
    						car_van: 5,
    						foot: 2,
    						home: 3,
    						moto: 4,
    						other: 8,
    						taxi: 7,
    						train_metro: 4
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 7.42,
    						"Female16-30": 14.08,
    						"Female31-48": 20.99,
    						Female49plus: 3.16,
    						"Male1-15": 2.08,
    						"Male16-30": 3.53,
    						"Male31-48": 35.41,
    						Male49plus: 13.32
    					},
    					"2011": {
    						"Female1-15": 7.44,
    						"Female16-30": 15.62,
    						"Female31-48": 21.25,
    						Female49plus: 2.98,
    						"Male1-15": 3.15,
    						"Male16-30": 4.96,
    						"Male31-48": 34.33,
    						Male49plus: 10.27
    					},
    					change: {
    						"Female1-15": 0.02,
    						"Female16-30": 1.54,
    						"Female31-48": 0.26,
    						Female49plus: -0.18,
    						"Male1-15": 1.07,
    						"Male16-30": 1.43,
    						"Male31-48": -1.08,
    						Male49plus: -3.05
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 1,
    						"Female16-30": 4,
    						"Female31-48": 9,
    						Female49plus: 3,
    						"Male1-15": 1,
    						"Male16-30": 2,
    						"Male31-48": 7,
    						Male49plus: 4
    					},
    					"2011": {
    						"Female1-15": 1,
    						"Female16-30": 3,
    						"Female31-48": 9,
    						Female49plus: 4,
    						"Male1-15": 2,
    						"Male16-30": 7,
    						"Male31-48": 7,
    						Male49plus: 4
    					},
    					change: {
    						"Female1-15": 6,
    						"Female16-30": 2,
    						"Female31-48": 4,
    						Female49plus: 8,
    						"Male1-15": 7,
    						"Male16-30": 8,
    						"Male31-48": 3,
    						Male49plus: 4
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 142088,
    						"Female16-30": 269666,
    						"Female31-48": 401960,
    						Female49plus: 60515,
    						"Male1-15": 39824,
    						"Male16-30": 67541,
    						"Male31-48": 678011,
    						Male49plus: 255005,
    						all: 1914610
    					},
    					"2011": {
    						"Female1-15": 159195,
    						"Female16-30": 334079,
    						"Female31-48": 454600,
    						Female49plus: 63784,
    						"Male1-15": 67337,
    						"Male16-30": 106081,
    						"Male31-48": 734300,
    						Male49plus: 219611,
    						all: 2138987
    					},
    					change: {
    						"Female1-15": 12.04,
    						"Female16-30": 23.89,
    						"Female31-48": 13.1,
    						Female49plus: 5.4,
    						"Male1-15": 69.09,
    						"Male16-30": 57.06,
    						"Male31-48": 8.3,
    						Male49plus: -13.88,
    						all: 11.72
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 7,
    						"Female16-30": 7,
    						"Female31-48": 7,
    						Female49plus: 6,
    						"Male1-15": 6,
    						"Male16-30": 7,
    						"Male31-48": 7,
    						Male49plus: 7,
    						all: 7
    					},
    					"2011": {
    						"Female1-15": 6,
    						"Female16-30": 7,
    						"Female31-48": 7,
    						Female49plus: 6,
    						"Male1-15": 7,
    						"Male16-30": 7,
    						"Male31-48": 7,
    						Male49plus: 7,
    						all: 7
    					},
    					change: {
    						"Female1-15": 5,
    						"Female16-30": 2,
    						"Female31-48": 3,
    						Female49plus: 8,
    						"Male1-15": 8,
    						"Male16-30": 9,
    						"Male31-48": 3,
    						Male49plus: 3,
    						all: 3
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 72.32,
    						rent_free: 2.24,
    						rented_private: 11.12,
    						rented_social: 13.72,
    						shared_ownership: 0.61
    					},
    					"2011": {
    						owned: 67.35,
    						rent_free: 1.41,
    						rented_private: 16.97,
    						rented_social: 13.49,
    						shared_ownership: 0.77
    					},
    					change: {
    						owned: -4.97,
    						rent_free: -0.83,
    						rented_private: 5.85,
    						rented_social: -0.23,
    						shared_ownership: 0.16
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 3,
    						rent_free: 3,
    						rented_private: 2,
    						rented_social: 9,
    						shared_ownership: 4
    					},
    					"2011": {
    						owned: 3,
    						rent_free: 3,
    						rented_private: 2,
    						rented_social: 9,
    						shared_ownership: 3
    					},
    					change: {
    						owned: 7,
    						rent_free: 7,
    						rented_private: 9,
    						rented_social: 2,
    						shared_ownership: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 1737768,
    						owned: 1256701,
    						rent_free: 38914,
    						rented_private: 193210,
    						rented_social: 238397,
    						shared_ownership: 10546
    					},
    					"2011": {
    						all: 1875994,
    						owned: 1263548,
    						rent_free: 26492,
    						rented_private: 318380,
    						rented_social: 253113,
    						shared_ownership: 14461
    					},
    					change: {
    						all: 7.95,
    						owned: 0.54,
    						rent_free: -31.92,
    						rented_private: 64.78,
    						rented_social: 6.17,
    						shared_ownership: 37.12
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 7,
    						owned: 7,
    						rent_free: 7,
    						rented_private: 4,
    						rented_social: 9,
    						shared_ownership: 6
    					},
    					"2011": {
    						all: 7,
    						owned: 7,
    						rent_free: 7,
    						rented_private: 7,
    						rented_social: 9,
    						shared_ownership: 6
    					},
    					change: {
    						all: 2,
    						owned: 5,
    						rent_free: 7,
    						rented_private: 9,
    						rented_social: 2,
    						shared_ownership: 4
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 1.72
    					},
    					"2011": {
    						all: 1.85
    					},
    					change: {
    						all: 0.13000000000000012
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9
    					},
    					"2011": {
    						all: 9
    					},
    					change: {
    						all: 5
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 11.63,
    						"10-19": 12.41,
    						"20-29": 11.26,
    						"30-39": 14.65,
    						"40-49": 13.35,
    						"50-59": 13.5,
    						"60-69": 9.96,
    						"70-79": 4.41,
    						"80plus": 8.83
    					},
    					"2011": {
    						"0-9": 10.92,
    						"10-19": 11.92,
    						"20-29": 12.26,
    						"30-39": 11.81,
    						"40-49": 14.57,
    						"50-59": 12.75,
    						"60-69": 12.31,
    						"70-79": 4.36,
    						"80plus": 9.11
    					},
    					change: {
    						"0-9": -0.71,
    						"10-19": -0.49,
    						"20-29": 1,
    						"30-39": -2.84,
    						"40-49": 1.22,
    						"50-59": -0.75,
    						"60-69": 2.35,
    						"70-79": -0.05,
    						"80plus": 0.28
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 9,
    						"10-19": 8,
    						"20-29": 9,
    						"30-39": 9,
    						"40-49": 6,
    						"50-59": 1,
    						"60-69": 2,
    						"70-79": 1,
    						"80plus": 1
    					},
    					"2011": {
    						"0-9": 9,
    						"10-19": 8,
    						"20-29": 9,
    						"30-39": 9,
    						"40-49": 6,
    						"50-59": 2,
    						"60-69": 1,
    						"70-79": 1,
    						"80plus": 1
    					},
    					change: {
    						"0-9": 7,
    						"10-19": 3,
    						"20-29": 6,
    						"30-39": 7,
    						"40-49": 7,
    						"50-59": 7,
    						"60-69": 1,
    						"70-79": 5,
    						"80plus": 6
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 476607,
    						"10-19": 508710,
    						"20-29": 461418,
    						"30-39": 600475,
    						"40-49": 547098,
    						"50-59": 553165,
    						"60-69": 408376,
    						"70-79": 180571,
    						"80plus": 361928,
    						all: 4098348
    					},
    					"2011": {
    						"0-9": 480504,
    						"10-19": 524441,
    						"20-29": 539261,
    						"30-39": 519652,
    						"40-49": 640872,
    						"50-59": 560896,
    						"60-69": 541482,
    						"70-79": 191896,
    						"80plus": 401028,
    						all: 4400032
    					},
    					change: {
    						"0-9": 0.82,
    						"10-19": 3.09,
    						"20-29": 16.87,
    						"30-39": -13.46,
    						"40-49": 17.14,
    						"50-59": 1.4,
    						"60-69": 32.59,
    						"70-79": 6.27,
    						"80plus": 10.8,
    						all: 7.36
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 7,
    						"10-19": 7,
    						"20-29": 7,
    						"30-39": 7,
    						"40-49": 7,
    						"50-59": 7,
    						"60-69": 7,
    						"70-79": 7,
    						"80plus": 7,
    						all: 7
    					},
    					"2011": {
    						"0-9": 7,
    						"10-19": 7,
    						"20-29": 7,
    						"30-39": 7,
    						"40-49": 7,
    						"50-59": 7,
    						"60-69": 7,
    						"70-79": 7,
    						"80plus": 7,
    						all: 7
    					},
    					change: {
    						"0-9": 7,
    						"10-19": 5,
    						"20-29": 6,
    						"30-39": 8,
    						"40-49": 5,
    						"50-59": 8,
    						"60-69": 1,
    						"70-79": 3,
    						"80plus": 6,
    						all: 5
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 40
    					},
    					"2011": {
    						all: 42
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1
    					},
    					"2011": {
    						all: 1
    					},
    					change: {
    						all: 6
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000003",
    		name: "Yorkshire and The Humber",
    		type: "rgn",
    		area: 1540763.62,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000010",
    				name: "Kingston upon Hull, City of",
    				type: "lad"
    			},
    			{
    				code: "E06000011",
    				name: "East Riding of Yorkshire",
    				type: "lad"
    			},
    			{
    				code: "E06000012",
    				name: "North East Lincolnshire",
    				type: "lad"
    			},
    			{
    				code: "E06000013",
    				name: "North Lincolnshire",
    				type: "lad"
    			},
    			{
    				code: "E06000014",
    				name: "York",
    				type: "lad"
    			},
    			{
    				code: "E08000016",
    				name: "Barnsley",
    				type: "lad"
    			},
    			{
    				code: "E08000017",
    				name: "Doncaster",
    				type: "lad"
    			},
    			{
    				code: "E08000018",
    				name: "Rotherham",
    				type: "lad"
    			},
    			{
    				code: "E08000019",
    				name: "Sheffield",
    				type: "lad"
    			},
    			{
    				code: "E08000032",
    				name: "Bradford",
    				type: "lad"
    			},
    			{
    				code: "E08000033",
    				name: "Calderdale",
    				type: "lad"
    			},
    			{
    				code: "E08000034",
    				name: "Kirklees",
    				type: "lad"
    			},
    			{
    				code: "E08000035",
    				name: "Leeds",
    				type: "lad"
    			},
    			{
    				code: "E08000036",
    				name: "Wakefield",
    				type: "lad"
    			},
    			{
    				code: "E10000023",
    				name: "North Yorkshire",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-2.56474,
    				53.30155
    			],
    			[
    				0.14881,
    				54.56216
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.42,
    						male: 48.58
    					},
    					"2011": {
    						female: 50.83,
    						male: 49.17
    					},
    					change: {
    						female: -0.59,
    						male: 0.59
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 4,
    						male: 6
    					},
    					"2011": {
    						female: 5,
    						male: 4
    					},
    					change: {
    						female: 7,
    						male: 3
    					}
    				},
    				value: {
    					"2001": {
    						all: 4964833,
    						female: 2552889,
    						male: 2411944
    					},
    					"2011": {
    						all: 5283733,
    						female: 2685655,
    						male: 2598078
    					},
    					change: {
    						all: 6.42,
    						female: 5.2,
    						male: 7.72
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						female: 6,
    						male: 6
    					},
    					"2011": {
    						all: 6,
    						female: 6,
    						male: 6
    					},
    					change: {
    						all: 6,
    						female: 7,
    						male: 6
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 6.96,
    						"20to49hoursWeek": 1.19,
    						"40PlushoursWeek": 2.29,
    						noCare: 89.56
    					},
    					"2011": {
    						"1to19hoursWeek": 6.47,
    						"20to49hoursWeek": 1.41,
    						"40PlushoursWeek": 2.56,
    						noCare: 89.57
    					},
    					change: {
    						"1to19hoursWeek": -0.49,
    						"20to49hoursWeek": 0.22,
    						"40PlushoursWeek": 0.27,
    						noCare: 0.01
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 4,
    						"40PlushoursWeek": 3,
    						noCare: 5
    					},
    					"2011": {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 5,
    						noCare: 4
    					},
    					change: {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 8,
    						noCare: 2
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 345491,
    						"20to49hoursWeek": 58856,
    						"40PlushoursWeek": 113864,
    						all: 4964833,
    						noCare: 4446622
    					},
    					"2011": {
    						"1to19hoursWeek": 341658,
    						"20to49hoursWeek": 74574,
    						"40PlushoursWeek": 135109,
    						all: 5283733,
    						noCare: 4732392
    					},
    					change: {
    						"1to19hoursWeek": -1.11,
    						"20to49hoursWeek": 26.71,
    						"40PlushoursWeek": 18.66,
    						all: 6.42,
    						noCare: 6.43
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 6,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 5,
    						all: 6,
    						noCare: 6
    					},
    					"2011": {
    						"1to19hoursWeek": 6,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 5,
    						all: 6,
    						noCare: 6
    					},
    					change: {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 8,
    						all: 6,
    						noCare: 6
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.14,
    						Christian: 73.07,
    						Hindu: 0.32,
    						Jewish: 0.23,
    						Muslim: 3.81,
    						Noreligion: 14.09,
    						Otherreligion: 0.19,
    						Religionnotstated: 7.77,
    						Sikh: 0.38
    					},
    					"2011": {
    						Buddhist: 0.27,
    						Christian: 59.5,
    						Hindu: 0.46,
    						Jewish: 0.19,
    						Muslim: 6.17,
    						Noreligion: 25.86,
    						Otherreligion: 0.31,
    						Religionnotstated: 6.83,
    						Sikh: 0.42
    					},
    					change: {
    						Buddhist: 0.13,
    						Christian: -13.57,
    						Hindu: 0.14,
    						Jewish: -0.04,
    						Muslim: 2.36,
    						Noreligion: 11.77,
    						Otherreligion: 0.12,
    						Religionnotstated: -0.94,
    						Sikh: 0.04
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 8,
    						Christian: 4,
    						Hindu: 7,
    						Jewish: 4,
    						Muslim: 3,
    						Noreligion: 6,
    						Otherreligion: 7,
    						Religionnotstated: 3,
    						Sikh: 5
    					},
    					"2011": {
    						Buddhist: 7,
    						Christian: 6,
    						Hindu: 7,
    						Jewish: 5,
    						Muslim: 3,
    						Noreligion: 5,
    						Otherreligion: 7,
    						Religionnotstated: 6,
    						Sikh: 5
    					},
    					change: {
    						Buddhist: 5,
    						Christian: 8,
    						Hindu: 6,
    						Jewish: 8,
    						Muslim: 3,
    						Noreligion: 3,
    						Otherreligion: 5,
    						Religionnotstated: 7,
    						Sikh: 6
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 7188,
    						Christian: 3627774,
    						Hindu: 15797,
    						Jewish: 11554,
    						Muslim: 189089,
    						Noreligion: 699327,
    						Otherreligion: 9624,
    						Religionnotstated: 385769,
    						Sikh: 18711,
    						all: 4964833
    					},
    					"2011": {
    						Buddhist: 14319,
    						Christian: 3143819,
    						Hindu: 24074,
    						Jewish: 9929,
    						Muslim: 326050,
    						Noreligion: 1366219,
    						Otherreligion: 16517,
    						Religionnotstated: 360627,
    						Sikh: 22179,
    						all: 5283733
    					},
    					change: {
    						Buddhist: 99.21,
    						Christian: -13.34,
    						Hindu: 52.4,
    						Jewish: -14.06,
    						Muslim: 72.43,
    						Noreligion: 95.36,
    						Otherreligion: 71.62,
    						Religionnotstated: -6.52,
    						Sikh: 18.53,
    						all: 6.42
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 7,
    						Christian: 5,
    						Hindu: 7,
    						Jewish: 5,
    						Muslim: 4,
    						Noreligion: 5,
    						Otherreligion: 7,
    						Religionnotstated: 6,
    						Sikh: 5,
    						all: 6
    					},
    					"2011": {
    						Buddhist: 7,
    						Christian: 6,
    						Hindu: 7,
    						Jewish: 5,
    						Muslim: 4,
    						Noreligion: 5,
    						Otherreligion: 7,
    						Religionnotstated: 6,
    						Sikh: 5,
    						all: 6
    					},
    					change: {
    						Buddhist: 3,
    						Christian: 9,
    						Hindu: 5,
    						Jewish: 9,
    						Muslim: 8,
    						Noreligion: 3,
    						Otherreligion: 4,
    						Religionnotstated: 7,
    						Sikh: 9,
    						all: 6
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 4.73,
    						black: 0.69,
    						mixed: 0.91,
    						other: 0.19,
    						white: 93.48
    					},
    					"2011": {
    						asian: 7.3,
    						black: 1.52,
    						mixed: 1.6,
    						other: 0.77,
    						white: 88.8
    					},
    					change: {
    						asian: 2.57,
    						black: 0.83,
    						mixed: 0.69,
    						other: 0.58,
    						white: -4.68
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 3,
    						black: 5,
    						mixed: 7,
    						other: 6,
    						white: 6
    					},
    					"2011": {
    						asian: 3,
    						black: 6,
    						mixed: 6,
    						other: 3,
    						white: 7
    					},
    					change: {
    						asian: 3,
    						black: 5,
    						mixed: 6,
    						other: 3,
    						white: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 4964830,
    						asian: 234824,
    						black: 34261,
    						mixed: 44995,
    						other: 9487,
    						white: 4641263
    					},
    					"2011": {
    						all: 5283733,
    						asian: 385964,
    						black: 80345,
    						mixed: 84558,
    						other: 40910,
    						white: 4691956
    					},
    					change: {
    						all: 6.42,
    						asian: 64.36,
    						black: 134.51,
    						mixed: 87.93,
    						other: 331.22,
    						white: 1.09
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						asian: 4,
    						black: 6,
    						mixed: 6,
    						other: 6,
    						white: 6
    					},
    					"2011": {
    						all: 6,
    						asian: 5,
    						black: 6,
    						mixed: 6,
    						other: 5,
    						white: 5
    					},
    					change: {
    						all: 6,
    						asian: 6,
    						black: 6,
    						mixed: 5,
    						other: 1,
    						white: 5
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 10.29,
    						fair: 22.74,
    						good: 66.96
    					},
    					"2011": {
    						bad: 6.03,
    						fair: 14,
    						good: 79.97
    					},
    					change: {
    						bad: -4.26,
    						fair: -8.74,
    						good: 13.01
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 3,
    						fair: 4,
    						good: 7
    					},
    					"2011": {
    						bad: 4,
    						fair: 4,
    						good: 6
    					},
    					change: {
    						bad: 8,
    						fair: 3,
    						good: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 4964833,
    						bad: 511074,
    						fair: 1129206,
    						good: 3324553
    					},
    					"2011": {
    						all: 5283733,
    						bad: 318636,
    						fair: 739959,
    						good: 4225138
    					},
    					change: {
    						all: 6.42,
    						bad: -37.65,
    						fair: -34.47,
    						good: 27.09
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						bad: 5,
    						fair: 5,
    						good: 6
    					},
    					"2011": {
    						all: 6,
    						bad: 5,
    						fair: 5,
    						good: 6
    					},
    					change: {
    						all: 6,
    						bad: 9,
    						fair: 4,
    						good: 4
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 51.66,
    						inactive: 34.85,
    						"self-employed": 7.24,
    						student: 2.54,
    						unemployed: 3.71
    					},
    					"2011": {
    						employee: 51.61,
    						inactive: 31.62,
    						"self-employed": 8.4,
    						student: 3.53,
    						unemployed: 4.85
    					},
    					change: {
    						employee: -0.05,
    						inactive: -3.23,
    						"self-employed": 1.16,
    						student: 0.99,
    						unemployed: 1.14
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 6,
    						inactive: 3,
    						"self-employed": 7,
    						student: 4,
    						unemployed: 4
    					},
    					"2011": {
    						employee: 5,
    						inactive: 4,
    						"self-employed": 7,
    						student: 3,
    						unemployed: 4
    					},
    					change: {
    						employee: 4,
    						inactive: 6,
    						"self-employed": 6,
    						student: 4,
    						unemployed: 3
    					}
    				},
    				value: {
    					"2001": {
    						all: 3574331,
    						employee: 1846421,
    						inactive: 1245790,
    						"self-employed": 258816,
    						student: 90796,
    						unemployed: 132508
    					},
    					"2011": {
    						all: 3875219,
    						employee: 1999954,
    						inactive: 1225244,
    						"self-employed": 325432,
    						student: 136834,
    						unemployed: 187755
    					},
    					change: {
    						all: 8.42,
    						employee: 8.32,
    						inactive: -1.65,
    						"self-employed": 25.74,
    						student: 50.7,
    						unemployed: 41.69
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						employee: 6,
    						inactive: 5,
    						"self-employed": 7,
    						student: 5,
    						unemployed: 4
    					},
    					"2011": {
    						all: 6,
    						employee: 6,
    						inactive: 5,
    						"self-employed": 7,
    						student: 4,
    						unemployed: 5
    					},
    					change: {
    						all: 6,
    						employee: 6,
    						inactive: 7,
    						"self-employed": 3,
    						student: 3,
    						unemployed: 4
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 29.92,
    						NoKids: 60.78,
    						NonDepKids: 9.31
    					},
    					"2011": {
    						Kids: 28.75,
    						NoKids: 61.95,
    						NonDepKids: 9.3
    					},
    					change: {
    						Kids: -1.17,
    						NoKids: 1.17,
    						NonDepKids: -0.01
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 3,
    						NoKids: 6,
    						NonDepKids: 4
    					},
    					"2011": {
    						Kids: 6,
    						NoKids: 3,
    						NonDepKids: 6
    					},
    					change: {
    						Kids: 7,
    						NoKids: 3,
    						NonDepKids: 8
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 617701,
    						NoKids: 1254919,
    						NonDepKids: 192130,
    						all: 2064750
    					},
    					"2011": {
    						Kids: 639415,
    						NoKids: 1377864,
    						NonDepKids: 206780,
    						all: 2224059
    					},
    					change: {
    						Kids: 3.52,
    						NoKids: 9.8,
    						NonDepKids: 7.63,
    						all: 7.72
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 5,
    						NoKids: 6,
    						NonDepKids: 6,
    						all: 6
    					},
    					"2011": {
    						Kids: 6,
    						NoKids: 4,
    						NonDepKids: 6,
    						all: 6
    					},
    					change: {
    						Kids: 7,
    						NoKids: 3,
    						NonDepKids: 8,
    						all: 6
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 9.22,
    						Cohabiting: 8.71,
    						LoneParent: 9.45,
    						Married: 37.4,
    						OnePerson: 29.5,
    						Other: 5.72
    					},
    					"2011": {
    						"65andOver": 8.39,
    						Cohabiting: 10.71,
    						LoneParent: 10.35,
    						Married: 33.26,
    						OnePerson: 30.55,
    						Other: 6.75
    					},
    					change: {
    						"65andOver": -0.83,
    						Cohabiting: 2,
    						LoneParent: 0.9,
    						Married: -4.14,
    						OnePerson: 1.05,
    						Other: 1.03
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 5,
    						Cohabiting: 2,
    						LoneParent: 5,
    						Married: 6,
    						OnePerson: 4,
    						Other: 5
    					},
    					"2011": {
    						"65andOver": 6,
    						Cohabiting: 1,
    						LoneParent: 5,
    						Married: 6,
    						OnePerson: 4,
    						Other: 4
    					},
    					change: {
    						"65andOver": 7,
    						Cohabiting: 2,
    						LoneParent: 7,
    						Married: 6,
    						OnePerson: 3,
    						Other: 5
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 190325,
    						Cohabiting: 179893,
    						LoneParent: 195072,
    						Married: 772161,
    						OnePerson: 609134,
    						Other: 118165,
    						all: 2064750
    					},
    					"2011": {
    						"65andOver": 186553,
    						Cohabiting: 238109,
    						LoneParent: 230288,
    						Married: 739614,
    						OnePerson: 679399,
    						Other: 150096,
    						all: 2224059
    					},
    					change: {
    						"65andOver": -1.98,
    						Cohabiting: 32.36,
    						LoneParent: 18.05,
    						Married: -4.22,
    						OnePerson: 11.54,
    						Other: 27.02,
    						all: 7.72
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 5,
    						Cohabiting: 5,
    						LoneParent: 5,
    						Married: 6,
    						OnePerson: 5,
    						Other: 5,
    						all: 6
    					},
    					"2011": {
    						"65andOver": 5,
    						Cohabiting: 4,
    						LoneParent: 5,
    						Married: 6,
    						OnePerson: 4,
    						Other: 5,
    						all: 6
    					},
    					change: {
    						"65andOver": 7,
    						Cohabiting: 3,
    						LoneParent: 7,
    						Married: 6,
    						OnePerson: 2,
    						Other: 5,
    						all: 6
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 51.89,
    						Seperated: 10.81,
    						Single: 28.59,
    						Widowed: 8.72
    					},
    					"2011": {
    						Married: 46.99,
    						Seperated: 11.89,
    						Single: 33.9,
    						Widowed: 7.21
    					},
    					change: {
    						Married: -4.9,
    						Seperated: 1.08,
    						Single: 5.31,
    						Widowed: -1.51
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 6,
    						Seperated: 4,
    						Single: 5,
    						Widowed: 3
    					},
    					"2011": {
    						Married: 6,
    						Seperated: 4,
    						Single: 4,
    						Widowed: 6
    					},
    					change: {
    						Married: 8,
    						Seperated: 7,
    						Single: 3,
    						Widowed: 7
    					}
    				},
    				value: {
    					"2001": {
    						Married: 2049191,
    						Seperated: 426969,
    						Single: 1128907,
    						Widowed: 344218,
    						all: 3949285
    					},
    					"2011": {
    						Married: 2013937,
    						Seperated: 509775,
    						Single: 1453124,
    						Widowed: 309105,
    						all: 4285941
    					},
    					change: {
    						Married: -1.72,
    						Seperated: 19.39,
    						Single: 28.72,
    						Widowed: -10.2,
    						all: 8.52
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 6,
    						Seperated: 4,
    						Single: 5,
    						Widowed: 5,
    						all: 6
    					},
    					"2011": {
    						Married: 6,
    						Seperated: 6,
    						Single: 5,
    						Widowed: 5,
    						all: 6
    					},
    					change: {
    						Married: 6,
    						Seperated: 6,
    						Single: 2,
    						Widowed: 6,
    						all: 6
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 2.9,
    						bus: 10.53,
    						car_van: 63.66,
    						foot: 10.88,
    						home: 8.48,
    						moto: 0.96,
    						other: 0.32,
    						taxi: 0.53,
    						train_metro: 1.74
    					},
    					"2011": {
    						bicycle: 2.56,
    						bus: 8.53,
    						car_van: 67.79,
    						foot: 11.76,
    						home: 4.57,
    						moto: 0.67,
    						other: 0.61,
    						taxi: 0.68,
    						train_metro: 2.84
    					},
    					change: {
    						bicycle: -0.34,
    						bus: -2,
    						car_van: 4.13,
    						foot: 0.88,
    						home: -3.91,
    						moto: -0.29,
    						other: 0.29,
    						taxi: 0.15,
    						train_metro: 1.1
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 5,
    						bus: 2,
    						car_van: 8,
    						foot: 3,
    						home: 6,
    						moto: 6,
    						other: 6,
    						taxi: 4,
    						train_metro: 6
    					},
    					"2011": {
    						bicycle: 6,
    						bus: 3,
    						car_van: 5,
    						foot: 2,
    						home: 7,
    						moto: 6,
    						other: 6,
    						taxi: 3,
    						train_metro: 6
    					},
    					change: {
    						bicycle: 7,
    						bus: 9,
    						car_van: 2,
    						foot: 3,
    						home: 4,
    						moto: 5,
    						other: 4,
    						taxi: 1,
    						train_metro: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 2171694,
    						bicycle: 62984,
    						bus: 228663,
    						car_van: 1382461,
    						foot: 236298,
    						home: 184181,
    						moto: 20874,
    						other: 6907,
    						taxi: 11455,
    						train_metro: 37871
    					},
    					"2011": {
    						all: 2428074,
    						bicycle: 62119,
    						bus: 207114,
    						car_van: 1645876,
    						foot: 285542,
    						home: 110962,
    						moto: 16173,
    						other: 14833,
    						taxi: 16432,
    						train_metro: 69023
    					},
    					change: {
    						all: 11.81,
    						bicycle: -1.37,
    						bus: -9.42,
    						car_van: 19.05,
    						foot: 20.84,
    						home: -39.75,
    						moto: -22.52,
    						other: 114.75,
    						taxi: 43.45,
    						train_metro: 82.26
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						bicycle: 5,
    						bus: 3,
    						car_van: 6,
    						foot: 4,
    						home: 7,
    						moto: 6,
    						other: 6,
    						taxi: 4,
    						train_metro: 6
    					},
    					"2011": {
    						all: 6,
    						bicycle: 6,
    						bus: 3,
    						car_van: 5,
    						foot: 5,
    						home: 7,
    						moto: 7,
    						other: 5,
    						taxi: 3,
    						train_metro: 6
    					},
    					change: {
    						all: 6,
    						bicycle: 7,
    						bus: 9,
    						car_van: 3,
    						foot: 5,
    						home: 6,
    						moto: 7,
    						other: 4,
    						taxi: 1,
    						train_metro: 6
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.64,
    						"Female16-30": 14.78,
    						"Female31-48": 21.98,
    						Female49plus: 2.67,
    						"Male1-15": 1.79,
    						"Male16-30": 3.43,
    						"Male31-48": 36.16,
    						Male49plus: 12.56
    					},
    					"2011": {
    						"Female1-15": 6.44,
    						"Female16-30": 15.74,
    						"Female31-48": 22.4,
    						Female49plus: 2.57,
    						"Male1-15": 3.02,
    						"Male16-30": 5.49,
    						"Male31-48": 34.99,
    						Male49plus: 9.35
    					},
    					change: {
    						"Female1-15": -0.2,
    						"Female16-30": 0.96,
    						"Female31-48": 0.42,
    						Female49plus: -0.1,
    						"Male1-15": 1.23,
    						"Male16-30": 2.06,
    						"Male31-48": -1.17,
    						Male49plus: -3.21
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 5,
    						"Female16-30": 1,
    						"Female31-48": 8,
    						Female49plus: 8,
    						"Male1-15": 5,
    						"Male16-30": 4,
    						"Male31-48": 4,
    						Male49plus: 6
    					},
    					"2011": {
    						"Female1-15": 6,
    						"Female16-30": 2,
    						"Female31-48": 7,
    						Female49plus: 7,
    						"Male1-15": 4,
    						"Male16-30": 3,
    						"Male31-48": 4,
    						Male49plus: 7
    					},
    					change: {
    						"Female1-15": 8,
    						"Female16-30": 9,
    						"Female31-48": 1,
    						Female49plus: 6,
    						"Male1-15": 4,
    						"Male16-30": 4,
    						"Male31-48": 5,
    						Male49plus: 7
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 144867,
    						"Female16-30": 322515,
    						"Female31-48": 479757,
    						Female49plus: 58298,
    						"Male1-15": 39081,
    						"Male16-30": 74949,
    						"Male31-48": 789287,
    						Male49plus: 274085,
    						all: 2182839
    					},
    					"2011": {
    						"Female1-15": 156259,
    						"Female16-30": 382171,
    						"Female31-48": 543989,
    						Female49plus: 62291,
    						"Male1-15": 73395,
    						"Male16-30": 133269,
    						"Male31-48": 849692,
    						Male49plus: 227008,
    						all: 2428074
    					},
    					change: {
    						"Female1-15": 7.86,
    						"Female16-30": 18.5,
    						"Female31-48": 13.39,
    						Female49plus: 6.85,
    						"Male1-15": 87.8,
    						"Male16-30": 77.81,
    						"Male31-48": 7.65,
    						Male49plus: -17.18,
    						all: 11.23
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 6,
    						"Female16-30": 3,
    						"Female31-48": 6,
    						Female49plus: 7,
    						"Male1-15": 7,
    						"Male16-30": 4,
    						"Male31-48": 6,
    						Male49plus: 6,
    						all: 6
    					},
    					"2011": {
    						"Female1-15": 7,
    						"Female16-30": 4,
    						"Female31-48": 6,
    						Female49plus: 7,
    						"Male1-15": 6,
    						"Male16-30": 5,
    						"Male31-48": 6,
    						Male49plus: 6,
    						all: 6
    					},
    					change: {
    						"Female1-15": 8,
    						"Female16-30": 9,
    						"Female31-48": 2,
    						Female49plus: 6,
    						"Male1-15": 6,
    						"Male16-30": 3,
    						"Male31-48": 4,
    						Male49plus: 8,
    						all: 6
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 67.3,
    						rent_free: 2.26,
    						rented_private: 9.05,
    						rented_social: 20.93,
    						shared_ownership: 0.46
    					},
    					"2011": {
    						owned: 64.1,
    						rent_free: 1.47,
    						rented_private: 15.89,
    						rented_social: 18.1,
    						shared_ownership: 0.43
    					},
    					change: {
    						owned: -3.2,
    						rent_free: -0.79,
    						rented_private: 6.84,
    						rented_social: -2.83,
    						shared_ownership: -0.03
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 7,
    						rent_free: 2,
    						rented_private: 4,
    						rented_social: 3,
    						shared_ownership: 8
    					},
    					"2011": {
    						owned: 7,
    						rent_free: 1,
    						rented_private: 4,
    						rented_social: 5,
    						shared_ownership: 8
    					},
    					change: {
    						owned: 2,
    						rent_free: 6,
    						rented_private: 3,
    						rented_social: 8,
    						shared_ownership: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 2074257,
    						owned: 1395895,
    						rent_free: 46867,
    						rented_private: 187810,
    						rented_social: 434176,
    						shared_ownership: 9509
    					},
    					"2011": {
    						all: 2224059,
    						owned: 1425563,
    						rent_free: 32758,
    						rented_private: 353448,
    						rented_social: 402653,
    						shared_ownership: 9637
    					},
    					change: {
    						all: 7.22,
    						owned: 2.13,
    						rent_free: -30.1,
    						rented_private: 88.19,
    						rented_social: -7.26,
    						shared_ownership: 1.35
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6,
    						owned: 6,
    						rent_free: 5,
    						rented_private: 5,
    						rented_social: 4,
    						shared_ownership: 7
    					},
    					"2011": {
    						all: 6,
    						owned: 6,
    						rent_free: 5,
    						rented_private: 4,
    						rented_social: 5,
    						shared_ownership: 8
    					},
    					change: {
    						all: 6,
    						owned: 2,
    						rent_free: 6,
    						rented_private: 5,
    						rented_social: 8,
    						shared_ownership: 7
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 3.22
    					},
    					"2011": {
    						all: 3.43
    					},
    					change: {
    						all: 0.20999999999999996
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 5
    					},
    					"2011": {
    						all: 5
    					},
    					change: {
    						all: 6
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.37,
    						"10-19": 13.22,
    						"20-29": 12.35,
    						"30-39": 15.05,
    						"40-49": 13.32,
    						"50-59": 12.61,
    						"60-69": 9.5,
    						"70-79": 4.03,
    						"80plus": 7.55
    					},
    					"2011": {
    						"0-9": 11.85,
    						"10-19": 12.39,
    						"20-29": 13.82,
    						"30-39": 12.48,
    						"40-49": 14.48,
    						"50-59": 12.28,
    						"60-69": 10.94,
    						"70-79": 4,
    						"80plus": 7.77
    					},
    					change: {
    						"0-9": -0.52,
    						"10-19": -0.83,
    						"20-29": 1.47,
    						"30-39": -2.57,
    						"40-49": 1.16,
    						"50-59": -0.33,
    						"60-69": 1.44,
    						"70-79": -0.03,
    						"80plus": 0.22
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 5,
    						"10-19": 3,
    						"20-29": 2,
    						"30-39": 6,
    						"40-49": 7,
    						"50-59": 8,
    						"60-69": 6,
    						"70-79": 7,
    						"80plus": 5
    					},
    					"2011": {
    						"0-9": 4,
    						"10-19": 2,
    						"20-29": 2,
    						"30-39": 5,
    						"40-49": 7,
    						"50-59": 6,
    						"60-69": 8,
    						"70-79": 6,
    						"80plus": 7
    					},
    					change: {
    						"0-9": 4,
    						"10-19": 7,
    						"20-29": 3,
    						"30-39": 5,
    						"40-49": 8,
    						"50-59": 4,
    						"60-69": 6,
    						"70-79": 2,
    						"80plus": 8
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 613984,
    						"10-19": 656474,
    						"20-29": 612961,
    						"30-39": 747118,
    						"40-49": 661464,
    						"50-59": 626281,
    						"60-69": 471577,
    						"70-79": 200020,
    						"80plus": 374954,
    						all: 4964833
    					},
    					"2011": {
    						"0-9": 625922,
    						"10-19": 654741,
    						"20-29": 729983,
    						"30-39": 659219,
    						"40-49": 764886,
    						"50-59": 649082,
    						"60-69": 577937,
    						"70-79": 211241,
    						"80plus": 410722,
    						all: 5283733
    					},
    					change: {
    						"0-9": 1.94,
    						"10-19": -0.26,
    						"20-29": 19.09,
    						"30-39": -11.77,
    						"40-49": 15.64,
    						"50-59": 3.64,
    						"60-69": 22.55,
    						"70-79": 5.61,
    						"80plus": 9.54,
    						all: 6.42
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 6,
    						"10-19": 5,
    						"20-29": 5,
    						"30-39": 6,
    						"40-49": 6,
    						"50-59": 6,
    						"60-69": 5,
    						"70-79": 6,
    						"80plus": 6,
    						all: 6
    					},
    					"2011": {
    						"0-9": 6,
    						"10-19": 6,
    						"20-29": 5,
    						"30-39": 6,
    						"40-49": 6,
    						"50-59": 6,
    						"60-69": 6,
    						"70-79": 6,
    						"80plus": 6,
    						all: 6
    					},
    					change: {
    						"0-9": 5,
    						"10-19": 7,
    						"20-29": 2,
    						"30-39": 5,
    						"40-49": 7,
    						"50-59": 4,
    						"60-69": 5,
    						"70-79": 6,
    						"80plus": 7,
    						all: 6
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 39
    					},
    					change: {
    						all: 1
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 6
    					},
    					change: {
    						all: 7
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000001",
    		name: "North East",
    		type: "rgn",
    		area: 857316.93,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000001",
    				name: "Hartlepool",
    				type: "lad"
    			},
    			{
    				code: "E06000002",
    				name: "Middlesbrough",
    				type: "lad"
    			},
    			{
    				code: "E06000003",
    				name: "Redcar and Cleveland",
    				type: "lad"
    			},
    			{
    				code: "E06000004",
    				name: "Stockton-on-Tees",
    				type: "lad"
    			},
    			{
    				code: "E06000005",
    				name: "Darlington",
    				type: "lad"
    			},
    			{
    				code: "E06000047",
    				name: "County Durham",
    				type: "lad"
    			},
    			{
    				code: "E06000057",
    				name: "Northumberland",
    				type: "lad"
    			},
    			{
    				code: "E08000021",
    				name: "Newcastle upon Tyne",
    				type: "lad"
    			},
    			{
    				code: "E08000022",
    				name: "North Tyneside",
    				type: "lad"
    			},
    			{
    				code: "E08000023",
    				name: "South Tyneside",
    				type: "lad"
    			},
    			{
    				code: "E08000024",
    				name: "Sunderland",
    				type: "lad"
    			},
    			{
    				code: "E08000037",
    				name: "Gateshead",
    				type: "lad"
    			}
    		],
    		bounds: [
    			[
    				-2.68978,
    				54.45113
    			],
    			[
    				-0.78829,
    				55.81167
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.56,
    						male: 48.44
    					},
    					"2011": {
    						female: 51.11,
    						male: 48.89
    					},
    					change: {
    						female: -0.45,
    						male: 0.45
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 3,
    						male: 7
    					},
    					"2011": {
    						female: 1,
    						male: 9
    					},
    					change: {
    						female: 6,
    						male: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 2515442,
    						female: 1296863,
    						male: 1218579
    					},
    					"2011": {
    						all: 2596886,
    						female: 1327183,
    						male: 1269703
    					},
    					change: {
    						all: 3.24,
    						female: 2.34,
    						male: 4.2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						female: 9,
    						male: 9
    					},
    					"2011": {
    						all: 9,
    						female: 9,
    						male: 9
    					},
    					change: {
    						all: 9,
    						female: 9,
    						male: 9
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 6.83,
    						"20to49hoursWeek": 1.42,
    						"40PlushoursWeek": 2.75,
    						noCare: 89
    					},
    					"2011": {
    						"1to19hoursWeek": 6.39,
    						"20to49hoursWeek": 1.61,
    						"40PlushoursWeek": 3.03,
    						noCare: 88.97
    					},
    					change: {
    						"1to19hoursWeek": -0.44,
    						"20to49hoursWeek": 0.19,
    						"40PlushoursWeek": 0.28,
    						noCare: -0.03
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						noCare: 9
    					},
    					"2011": {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						noCare: 8
    					},
    					change: {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 7,
    						noCare: 3
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 171753,
    						"20to49hoursWeek": 35736,
    						"40PlushoursWeek": 69104,
    						all: 2515442,
    						noCare: 2238849
    					},
    					"2011": {
    						"1to19hoursWeek": 165828,
    						"20to49hoursWeek": 41778,
    						"40PlushoursWeek": 78745,
    						all: 2596886,
    						noCare: 2310535
    					},
    					change: {
    						"1to19hoursWeek": -3.45,
    						"20to49hoursWeek": 16.91,
    						"40PlushoursWeek": 13.95,
    						all: 3.24,
    						noCare: 3.2
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 9,
    						all: 9,
    						noCare: 9
    					},
    					"2011": {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 9,
    						all: 9,
    						noCare: 9
    					},
    					change: {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 9,
    						"40PlushoursWeek": 9,
    						all: 9,
    						noCare: 9
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.12,
    						Christian: 80.09,
    						Hindu: 0.17,
    						Jewish: 0.13,
    						Muslim: 1.07,
    						Noreligion: 10.98,
    						Otherreligion: 0.15,
    						Religionnotstated: 7.09,
    						Sikh: 0.19
    					},
    					"2011": {
    						Buddhist: 0.24,
    						Christian: 67.52,
    						Hindu: 0.3,
    						Jewish: 0.17,
    						Muslim: 1.8,
    						Noreligion: 23.4,
    						Otherreligion: 0.26,
    						Religionnotstated: 6.08,
    						Sikh: 0.23
    					},
    					change: {
    						Buddhist: 0.12,
    						Christian: -12.57,
    						Hindu: 0.13,
    						Jewish: 0.04,
    						Muslim: 0.73,
    						Noreligion: 12.42,
    						Otherreligion: 0.11,
    						Religionnotstated: -1.01,
    						Sikh: 0.04
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 9,
    						Christian: 1,
    						Hindu: 9,
    						Jewish: 6,
    						Muslim: 8,
    						Noreligion: 8,
    						Otherreligion: 9,
    						Religionnotstated: 9,
    						Sikh: 7
    					},
    					"2011": {
    						Buddhist: 9,
    						Christian: 1,
    						Hindu: 9,
    						Jewish: 6,
    						Muslim: 8,
    						Noreligion: 6,
    						Otherreligion: 9,
    						Religionnotstated: 9,
    						Sikh: 7
    					},
    					change: {
    						Buddhist: 6,
    						Christian: 5,
    						Hindu: 8,
    						Jewish: 1,
    						Muslim: 8,
    						Noreligion: 2,
    						Otherreligion: 6,
    						Religionnotstated: 8,
    						Sikh: 6
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 3097,
    						Christian: 2014608,
    						Hindu: 4370,
    						Jewish: 3151,
    						Muslim: 26925,
    						Noreligion: 276196,
    						Otherreligion: 3886,
    						Religionnotstated: 178429,
    						Sikh: 4780,
    						all: 2515442
    					},
    					"2011": {
    						Buddhist: 6316,
    						Christian: 1753334,
    						Hindu: 7772,
    						Jewish: 4503,
    						Muslim: 46764,
    						Noreligion: 607700,
    						Otherreligion: 6668,
    						Religionnotstated: 157865,
    						Sikh: 5964,
    						all: 2596886
    					},
    					change: {
    						Buddhist: 103.94,
    						Christian: -12.97,
    						Hindu: 77.85,
    						Jewish: 42.91,
    						Muslim: 73.68,
    						Noreligion: 120.02,
    						Otherreligion: 71.59,
    						Religionnotstated: -11.53,
    						Sikh: 24.77,
    						all: 3.24
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 9,
    						Christian: 9,
    						Hindu: 9,
    						Jewish: 9,
    						Muslim: 8,
    						Noreligion: 9,
    						Otherreligion: 9,
    						Religionnotstated: 9,
    						Sikh: 8,
    						all: 9
    					},
    					"2011": {
    						Buddhist: 9,
    						Christian: 9,
    						Hindu: 9,
    						Jewish: 7,
    						Muslim: 8,
    						Noreligion: 9,
    						Otherreligion: 9,
    						Religionnotstated: 9,
    						Sikh: 8,
    						all: 9
    					},
    					change: {
    						Buddhist: 1,
    						Christian: 8,
    						Hindu: 3,
    						Jewish: 1,
    						Muslim: 7,
    						Noreligion: 1,
    						Otherreligion: 5,
    						Religionnotstated: 9,
    						Sikh: 7,
    						all: 9
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 1.58,
    						black: 0.16,
    						mixed: 0.49,
    						other: 0.17,
    						white: 97.61
    					},
    					"2011": {
    						asian: 2.87,
    						black: 0.51,
    						mixed: 0.86,
    						other: 0.43,
    						white: 95.33
    					},
    					change: {
    						asian: 1.29,
    						black: 0.35,
    						mixed: 0.37,
    						other: 0.26,
    						white: -2.28
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 8,
    						black: 9,
    						mixed: 9,
    						other: 8,
    						white: 1
    					},
    					"2011": {
    						asian: 8,
    						black: 9,
    						mixed: 9,
    						other: 8,
    						white: 1
    					},
    					change: {
    						asian: 8,
    						black: 9,
    						mixed: 9,
    						other: 6,
    						white: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 2515442,
    						asian: 39630,
    						black: 3953,
    						mixed: 12228,
    						other: 4215,
    						white: 2455416
    					},
    					"2011": {
    						all: 2596886,
    						asian: 74599,
    						black: 13220,
    						mixed: 22449,
    						other: 11051,
    						white: 2475567
    					},
    					change: {
    						all: 3.24,
    						asian: 88.24,
    						black: 234.43,
    						mixed: 83.59,
    						other: 162.18,
    						white: 0.82
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						asian: 9,
    						black: 9,
    						mixed: 9,
    						other: 9,
    						white: 9
    					},
    					"2011": {
    						all: 9,
    						asian: 9,
    						black: 9,
    						mixed: 9,
    						other: 9,
    						white: 9
    					},
    					change: {
    						all: 9,
    						asian: 4,
    						black: 1,
    						mixed: 6,
    						other: 5,
    						white: 6
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 11.98,
    						fair: 23.7,
    						good: 64.32
    					},
    					"2011": {
    						bad: 7.45,
    						fair: 15.22,
    						good: 77.33
    					},
    					change: {
    						bad: -4.53,
    						fair: -8.48,
    						good: 13.01
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 1,
    						fair: 1,
    						good: 9
    					},
    					"2011": {
    						bad: 1,
    						fair: 1,
    						good: 9
    					},
    					change: {
    						bad: 9,
    						fair: 2,
    						good: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 2515442,
    						bad: 301378,
    						fair: 596163,
    						good: 1617901
    					},
    					"2011": {
    						all: 2596886,
    						bad: 193438,
    						fair: 395243,
    						good: 2008205
    					},
    					change: {
    						all: 3.24,
    						bad: -35.82,
    						fair: -33.7,
    						good: 24.12
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						bad: 9,
    						fair: 9,
    						good: 9
    					},
    					"2011": {
    						all: 9,
    						bad: 9,
    						fair: 9,
    						good: 9
    					},
    					change: {
    						all: 9,
    						bad: 8,
    						fair: 1,
    						good: 9
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 49.25,
    						inactive: 38.68,
    						"self-employed": 5.27,
    						student: 2.27,
    						unemployed: 4.53
    					},
    					"2011": {
    						employee: 50.94,
    						inactive: 33.89,
    						"self-employed": 6.53,
    						student: 3.27,
    						unemployed: 5.37
    					},
    					change: {
    						employee: 1.69,
    						inactive: -4.79,
    						"self-employed": 1.26,
    						student: 1,
    						unemployed: 0.84
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 9,
    						inactive: 1,
    						"self-employed": 9,
    						student: 9,
    						unemployed: 1
    					},
    					"2011": {
    						employee: 8,
    						inactive: 1,
    						"self-employed": 9,
    						student: 7,
    						unemployed: 1
    					},
    					change: {
    						employee: 1,
    						inactive: 9,
    						"self-employed": 4,
    						student: 2,
    						unemployed: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 1831354,
    						employee: 901869,
    						inactive: 708432,
    						"self-employed": 96482,
    						student: 41584,
    						unemployed: 82987
    					},
    					"2011": {
    						all: 1924206,
    						employee: 980163,
    						inactive: 652124,
    						"self-employed": 125746,
    						student: 62860,
    						unemployed: 103313
    					},
    					change: {
    						all: 5.07,
    						employee: 8.68,
    						inactive: -7.95,
    						"self-employed": 30.33,
    						student: 51.16,
    						unemployed: 24.49
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						employee: 9,
    						inactive: 9,
    						"self-employed": 9,
    						student: 9,
    						unemployed: 8
    					},
    					"2011": {
    						all: 9,
    						employee: 9,
    						inactive: 9,
    						"self-employed": 9,
    						student: 9,
    						unemployed: 9
    					},
    					change: {
    						all: 9,
    						employee: 5,
    						inactive: 9,
    						"self-employed": 2,
    						student: 2,
    						unemployed: 9
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 29.8,
    						NoKids: 59.57,
    						NonDepKids: 10.62
    					},
    					"2011": {
    						Kids: 27.87,
    						NoKids: 61.56,
    						NonDepKids: 10.57
    					},
    					change: {
    						Kids: -1.93,
    						NoKids: 1.99,
    						NonDepKids: -0.05
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 4,
    						NoKids: 7,
    						NonDepKids: 1
    					},
    					"2011": {
    						Kids: 8,
    						NoKids: 5,
    						NonDepKids: 1
    					},
    					change: {
    						Kids: 9,
    						NoKids: 1,
    						NonDepKids: 9
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 317805,
    						NoKids: 635239,
    						NonDepKids: 113248,
    						all: 1066292
    					},
    					"2011": {
    						Kids: 314860,
    						NoKids: 695631,
    						NonDepKids: 119444,
    						all: 1129935
    					},
    					change: {
    						Kids: -0.93,
    						NoKids: 9.51,
    						NonDepKids: 5.47,
    						all: 5.97
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 9,
    						NoKids: 9,
    						NonDepKids: 9,
    						all: 9
    					},
    					"2011": {
    						Kids: 9,
    						NoKids: 9,
    						NonDepKids: 9,
    						all: 9
    					},
    					change: {
    						Kids: 9,
    						NoKids: 5,
    						NonDepKids: 9,
    						all: 9
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 8.86,
    						Cohabiting: 7.8,
    						LoneParent: 10.76,
    						Married: 36.81,
    						OnePerson: 30.74,
    						Other: 5.03
    					},
    					"2011": {
    						"65andOver": 8.18,
    						Cohabiting: 9.96,
    						LoneParent: 11.85,
    						Married: 32.4,
    						OnePerson: 31.9,
    						Other: 5.7
    					},
    					change: {
    						"65andOver": -0.68,
    						Cohabiting: 2.16,
    						LoneParent: 1.09,
    						Married: -4.41,
    						OnePerson: 1.16,
    						Other: 0.67
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 7,
    						Cohabiting: 9,
    						LoneParent: 3,
    						Married: 7,
    						OnePerson: 3,
    						Other: 9
    					},
    					"2011": {
    						"65andOver": 7,
    						Cohabiting: 5,
    						LoneParent: 3,
    						Married: 7,
    						OnePerson: 2,
    						Other: 9
    					},
    					change: {
    						"65andOver": 2,
    						Cohabiting: 1,
    						LoneParent: 5,
    						Married: 9,
    						OnePerson: 2,
    						Other: 9
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 94448,
    						Cohabiting: 83167,
    						LoneParent: 114718,
    						Married: 392552,
    						OnePerson: 327734,
    						Other: 53673,
    						all: 1066292
    					},
    					"2011": {
    						"65andOver": 92482,
    						Cohabiting: 112577,
    						LoneParent: 133942,
    						Married: 366060,
    						OnePerson: 360500,
    						Other: 64374,
    						all: 1129935
    					},
    					change: {
    						"65andOver": -2.08,
    						Cohabiting: 35.36,
    						LoneParent: 16.76,
    						Married: -6.75,
    						OnePerson: 10,
    						Other: 19.94,
    						all: 5.97
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 9,
    						Cohabiting: 9,
    						LoneParent: 9,
    						Married: 9,
    						OnePerson: 9,
    						Other: 9,
    						all: 9
    					},
    					"2011": {
    						"65andOver": 9,
    						Cohabiting: 9,
    						LoneParent: 9,
    						Married: 9,
    						OnePerson: 9,
    						Other: 9,
    						all: 9
    					},
    					change: {
    						"65andOver": 8,
    						Cohabiting: 1,
    						LoneParent: 8,
    						Married: 9,
    						OnePerson: 5,
    						Other: 9,
    						all: 9
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 50.8,
    						Seperated: 10.92,
    						Single: 28.97,
    						Widowed: 9.31
    					},
    					"2011": {
    						Married: 45.75,
    						Seperated: 12.01,
    						Single: 34.43,
    						Widowed: 7.81
    					},
    					change: {
    						Married: -5.05,
    						Seperated: 1.09,
    						Single: 5.46,
    						Widowed: -1.5
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 7,
    						Seperated: 3,
    						Single: 3,
    						Widowed: 1
    					},
    					"2011": {
    						Married: 7,
    						Seperated: 2,
    						Single: 3,
    						Widowed: 1
    					},
    					change: {
    						Married: 9,
    						Seperated: 6,
    						Single: 2,
    						Widowed: 6
    					}
    				},
    				value: {
    					"2001": {
    						Married: 1025137,
    						Seperated: 220408,
    						Single: 584684,
    						Widowed: 187892,
    						all: 2018121
    					},
    					"2011": {
    						Married: 976468,
    						Seperated: 256282,
    						Single: 734910,
    						Widowed: 166789,
    						all: 2134449
    					},
    					change: {
    						Married: -4.75,
    						Seperated: 16.28,
    						Single: 25.69,
    						Widowed: -11.23,
    						all: 5.76
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 9,
    						Seperated: 9,
    						Single: 9,
    						Widowed: 9,
    						all: 9
    					},
    					"2011": {
    						Married: 9,
    						Seperated: 9,
    						Single: 9,
    						Widowed: 9,
    						all: 9
    					},
    					change: {
    						Married: 9,
    						Seperated: 8,
    						Single: 7,
    						Widowed: 8,
    						all: 9
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 1.64,
    						bus: 11.06,
    						car_van: 64.7,
    						foot: 10.18,
    						home: 7.85,
    						moto: 0.68,
    						other: 0.36,
    						taxi: 0.69,
    						train_metro: 2.84
    					},
    					"2011": {
    						bicycle: 1.77,
    						bus: 9.35,
    						car_van: 68.69,
    						foot: 10.63,
    						home: 3.69,
    						moto: 0.44,
    						other: 0.93,
    						taxi: 0.76,
    						train_metro: 3.75
    					},
    					change: {
    						bicycle: 0.13,
    						bus: -1.71,
    						car_van: 3.99,
    						foot: 0.45,
    						home: -4.16,
    						moto: -0.24,
    						other: 0.57,
    						taxi: 0.07,
    						train_metro: 0.91
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 9,
    						bus: 1,
    						car_van: 7,
    						foot: 5,
    						home: 8,
    						moto: 9,
    						other: 5,
    						taxi: 2,
    						train_metro: 2
    					},
    					"2011": {
    						bicycle: 9,
    						bus: 2,
    						car_van: 4,
    						foot: 6,
    						home: 9,
    						moto: 9,
    						other: 1,
    						taxi: 2,
    						train_metro: 4
    					},
    					change: {
    						bicycle: 3,
    						bus: 8,
    						car_van: 3,
    						foot: 6,
    						home: 6,
    						moto: 2,
    						other: 1,
    						taxi: 3,
    						train_metro: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 1010677,
    						bicycle: 16590,
    						bus: 111733,
    						car_van: 653952,
    						foot: 102886,
    						home: 79308,
    						moto: 6889,
    						other: 3664,
    						taxi: 6968,
    						train_metro: 28687
    					},
    					"2011": {
    						all: 1152970,
    						bicycle: 20361,
    						bus: 107777,
    						car_van: 791985,
    						foot: 122533,
    						home: 42528,
    						moto: 5083,
    						other: 10687,
    						taxi: 8805,
    						train_metro: 43211
    					},
    					change: {
    						all: 14.08,
    						bicycle: 22.73,
    						bus: -3.54,
    						car_van: 21.11,
    						foot: 19.1,
    						home: -46.38,
    						moto: -26.22,
    						other: 191.68,
    						taxi: 26.36,
    						train_metro: 50.63
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						bicycle: 9,
    						bus: 7,
    						car_van: 9,
    						foot: 9,
    						home: 9,
    						moto: 9,
    						other: 9,
    						taxi: 7,
    						train_metro: 7
    					},
    					"2011": {
    						all: 9,
    						bicycle: 9,
    						bus: 7,
    						car_van: 9,
    						foot: 9,
    						home: 9,
    						moto: 9,
    						other: 8,
    						taxi: 7,
    						train_metro: 7
    					},
    					change: {
    						all: 4,
    						bicycle: 2,
    						bus: 7,
    						car_van: 2,
    						foot: 8,
    						home: 9,
    						moto: 9,
    						other: 1,
    						taxi: 3,
    						train_metro: 8
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.42,
    						"Female16-30": 14.53,
    						"Female31-48": 23.69,
    						Female49plus: 2.33,
    						"Male1-15": 1.6,
    						"Male16-30": 3.29,
    						"Male31-48": 37.52,
    						Male49plus: 10.61
    					},
    					"2011": {
    						"Female1-15": 5.91,
    						"Female16-30": 16.12,
    						"Female31-48": 23.97,
    						Female49plus: 2.32,
    						"Male1-15": 2.8,
    						"Male16-30": 5.22,
    						"Male31-48": 35.31,
    						Male49plus: 8.36
    					},
    					change: {
    						"Female1-15": -0.51,
    						"Female16-30": 1.59,
    						"Female31-48": 0.28,
    						Female49plus: -0.01,
    						"Male1-15": 1.2,
    						"Male16-30": 1.93,
    						"Male31-48": -2.21,
    						Male49plus: -2.25
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 7,
    						"Female16-30": 2,
    						"Female31-48": 3,
    						Female49plus: 9,
    						"Male1-15": 9,
    						"Male16-30": 5,
    						"Male31-48": 1,
    						Male49plus: 9
    					},
    					"2011": {
    						"Female1-15": 8,
    						"Female16-30": 1,
    						"Female31-48": 3,
    						Female49plus: 9,
    						"Male1-15": 9,
    						"Male16-30": 5,
    						"Male31-48": 2,
    						Male49plus: 8
    					},
    					change: {
    						"Female1-15": 9,
    						"Female16-30": 1,
    						"Female31-48": 3,
    						Female49plus: 3,
    						"Male1-15": 6,
    						"Male16-30": 5,
    						"Male31-48": 9,
    						Male49plus: 2
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 66347,
    						"Female16-30": 150081,
    						"Female31-48": 244688,
    						Female49plus: 24034,
    						"Male1-15": 16550,
    						"Male16-30": 34004,
    						"Male31-48": 387620,
    						Male49plus: 109644,
    						all: 1032968
    					},
    					"2011": {
    						"Female1-15": 68110,
    						"Female16-30": 185867,
    						"Female31-48": 276326,
    						Female49plus: 26739,
    						"Male1-15": 32237,
    						"Male16-30": 60204,
    						"Male31-48": 407121,
    						Male49plus: 96366,
    						all: 1152970
    					},
    					change: {
    						"Female1-15": 2.66,
    						"Female16-30": 23.84,
    						"Female31-48": 12.93,
    						Female49plus: 11.25,
    						"Male1-15": 94.79,
    						"Male16-30": 77.05,
    						"Male31-48": 5.03,
    						Male49plus: -12.11,
    						all: 11.62
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 9,
    						"Female16-30": 9,
    						"Female31-48": 9,
    						Female49plus: 9,
    						"Male1-15": 9,
    						"Male16-30": 9,
    						"Male31-48": 9,
    						Male49plus: 9,
    						all: 9
    					},
    					"2011": {
    						"Female1-15": 9,
    						"Female16-30": 9,
    						"Female31-48": 9,
    						Female49plus: 9,
    						"Male1-15": 9,
    						"Male16-30": 9,
    						"Male31-48": 9,
    						Male49plus: 9,
    						all: 9
    					},
    					change: {
    						"Female1-15": 9,
    						"Female16-30": 3,
    						"Female31-48": 4,
    						Female49plus: 2,
    						"Male1-15": 2,
    						"Male16-30": 5,
    						"Male31-48": 8,
    						Male49plus: 2,
    						all: 4
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 63.35,
    						rent_free: 1.51,
    						rented_private: 7.19,
    						rented_social: 27.52,
    						shared_ownership: 0.43
    					},
    					"2011": {
    						owned: 61.83,
    						rent_free: 1.18,
    						rented_private: 13.67,
    						rented_social: 22.97,
    						shared_ownership: 0.36
    					},
    					change: {
    						owned: -1.52,
    						rent_free: -0.33,
    						rented_private: 6.48,
    						rented_social: -4.55,
    						shared_ownership: -0.07
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 8,
    						rent_free: 9,
    						rented_private: 9,
    						rented_social: 1,
    						shared_ownership: 9
    					},
    					"2011": {
    						owned: 8,
    						rent_free: 9,
    						rented_private: 9,
    						rented_social: 2,
    						shared_ownership: 9
    					},
    					change: {
    						owned: 1,
    						rent_free: 1,
    						rented_private: 5,
    						rented_social: 9,
    						shared_ownership: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 1070869,
    						owned: 678407,
    						rent_free: 16175,
    						rented_private: 76987,
    						rented_social: 294723,
    						shared_ownership: 4577
    					},
    					"2011": {
    						all: 1129935,
    						owned: 698595,
    						rent_free: 13310,
    						rented_private: 154426,
    						rented_social: 259506,
    						shared_ownership: 4098
    					},
    					change: {
    						all: 5.52,
    						owned: 2.98,
    						rent_free: -17.71,
    						rented_private: 100.59,
    						rented_social: -11.95,
    						shared_ownership: -10.47
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9,
    						owned: 9,
    						rent_free: 9,
    						rented_private: 9,
    						rented_social: 7,
    						shared_ownership: 9
    					},
    					"2011": {
    						all: 9,
    						owned: 9,
    						rent_free: 9,
    						rented_private: 9,
    						rented_social: 7,
    						shared_ownership: 9
    					},
    					change: {
    						all: 9,
    						owned: 1,
    						rent_free: 1,
    						rented_private: 2,
    						rented_social: 9,
    						shared_ownership: 9
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 2.93
    					},
    					"2011": {
    						all: 3.03
    					},
    					change: {
    						all: 0.09999999999999964
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 6
    					},
    					"2011": {
    						all: 6
    					},
    					change: {
    						all: 9
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 11.76,
    						"10-19": 13.18,
    						"20-29": 11.85,
    						"30-39": 14.84,
    						"40-49": 13.93,
    						"50-59": 12.67,
    						"60-69": 10.04,
    						"70-79": 4.31,
    						"80plus": 7.42
    					},
    					"2011": {
    						"0-9": 11.02,
    						"10-19": 12.11,
    						"20-29": 13.41,
    						"30-39": 11.87,
    						"40-49": 14.6,
    						"50-59": 13.18,
    						"60-69": 11.44,
    						"70-79": 4.26,
    						"80plus": 8.1
    					},
    					change: {
    						"0-9": -0.74,
    						"10-19": -1.07,
    						"20-29": 1.56,
    						"30-39": -2.97,
    						"40-49": 0.67,
    						"50-59": 0.51,
    						"60-69": 1.4,
    						"70-79": -0.05,
    						"80plus": 0.68
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 8,
    						"10-19": 4,
    						"20-29": 8,
    						"30-39": 8,
    						"40-49": 1,
    						"50-59": 7,
    						"60-69": 1,
    						"70-79": 2,
    						"80plus": 6
    					},
    					"2011": {
    						"0-9": 8,
    						"10-19": 6,
    						"20-29": 4,
    						"30-39": 8,
    						"40-49": 5,
    						"50-59": 1,
    						"60-69": 3,
    						"70-79": 2,
    						"80plus": 4
    					},
    					change: {
    						"0-9": 8,
    						"10-19": 8,
    						"20-29": 2,
    						"30-39": 8,
    						"40-49": 9,
    						"50-59": 1,
    						"60-69": 8,
    						"70-79": 5,
    						"80plus": 1
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 295888,
    						"10-19": 331468,
    						"20-29": 298021,
    						"30-39": 373363,
    						"40-49": 350328,
    						"50-59": 318730,
    						"60-69": 252538,
    						"70-79": 108339,
    						"80plus": 186766,
    						all: 2515441
    					},
    					"2011": {
    						"0-9": 286142,
    						"10-19": 314485,
    						"20-29": 348321,
    						"30-39": 308301,
    						"40-49": 379252,
    						"50-59": 342324,
    						"60-69": 297087,
    						"70-79": 110731,
    						"80plus": 210243,
    						all: 2596886
    					},
    					change: {
    						"0-9": -3.29,
    						"10-19": -5.12,
    						"20-29": 16.88,
    						"30-39": -17.43,
    						"40-49": 8.26,
    						"50-59": 7.4,
    						"60-69": 17.64,
    						"70-79": 2.21,
    						"80plus": 12.57,
    						all: 3.24
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 9,
    						"10-19": 9,
    						"20-29": 9,
    						"30-39": 9,
    						"40-49": 9,
    						"50-59": 9,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9,
    						all: 9
    					},
    					"2011": {
    						"0-9": 9,
    						"10-19": 9,
    						"20-29": 9,
    						"30-39": 9,
    						"40-49": 9,
    						"50-59": 9,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9,
    						all: 9
    					},
    					change: {
    						"0-9": 9,
    						"10-19": 9,
    						"20-29": 5,
    						"30-39": 9,
    						"40-49": 9,
    						"50-59": 2,
    						"60-69": 8,
    						"70-79": 8,
    						"80plus": 4,
    						all: 9
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 41
    					},
    					change: {
    						all: 3
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 2
    					},
    					change: {
    						all: 1
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000004",
    		name: "East Midlands",
    		type: "rgn",
    		area: 1560641.67,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000015",
    				name: "Derby",
    				type: "lad"
    			},
    			{
    				code: "E06000016",
    				name: "Leicester",
    				type: "lad"
    			},
    			{
    				code: "E06000017",
    				name: "Rutland",
    				type: "lad"
    			},
    			{
    				code: "E06000018",
    				name: "Nottingham",
    				type: "lad"
    			},
    			{
    				code: "E06000061",
    				name: "North Northamptonshire",
    				type: "lad"
    			},
    			{
    				code: "E06000062",
    				name: "West Northamptonshire",
    				type: "lad"
    			},
    			{
    				code: "E10000007",
    				name: "Derbyshire",
    				type: "cty"
    			},
    			{
    				code: "E10000018",
    				name: "Leicestershire",
    				type: "cty"
    			},
    			{
    				code: "E10000019",
    				name: "Lincolnshire",
    				type: "cty"
    			},
    			{
    				code: "E10000024",
    				name: "Nottinghamshire",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-2.0341,
    				51.97727
    			],
    			[
    				0.35797,
    				53.61637
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 50.94,
    						male: 49.06
    					},
    					"2011": {
    						female: 50.72,
    						male: 49.28
    					},
    					change: {
    						female: -0.22,
    						male: 0.22
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 9,
    						male: 1
    					},
    					"2011": {
    						female: 7,
    						male: 3
    					},
    					change: {
    						female: 2,
    						male: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 3542498,
    						female: 1804384,
    						male: 1738114
    					},
    					"2011": {
    						all: 3841270,
    						female: 1948119,
    						male: 1893151
    					},
    					change: {
    						all: 8.43,
    						female: 7.97,
    						male: 8.92
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						female: 8,
    						male: 8
    					},
    					"2011": {
    						all: 8,
    						female: 8,
    						male: 8
    					},
    					change: {
    						all: 3,
    						female: 3,
    						male: 3
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 7.27,
    						"20to49hoursWeek": 1.16,
    						"40PlushoursWeek": 2.21,
    						noCare: 89.37
    					},
    					"2011": {
    						"1to19hoursWeek": 6.91,
    						"20to49hoursWeek": 1.44,
    						"40PlushoursWeek": 2.6,
    						noCare: 89.05
    					},
    					change: {
    						"1to19hoursWeek": -0.36,
    						"20to49hoursWeek": 0.28,
    						"40PlushoursWeek": 0.39,
    						noCare: -0.32
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 1,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 5,
    						noCare: 7
    					},
    					"2011": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 4,
    						"40PlushoursWeek": 4,
    						noCare: 6
    					},
    					change: {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 3,
    						noCare: 4
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 257369,
    						"20to49hoursWeek": 41196,
    						"40PlushoursWeek": 78141,
    						all: 3542498,
    						noCare: 3165792
    					},
    					"2011": {
    						"1to19hoursWeek": 265493,
    						"20to49hoursWeek": 55344,
    						"40PlushoursWeek": 99914,
    						all: 3841270,
    						noCare: 3420519
    					},
    					change: {
    						"1to19hoursWeek": 3.16,
    						"20to49hoursWeek": 34.34,
    						"40PlushoursWeek": 27.86,
    						all: 8.43,
    						noCare: 8.05
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 7,
    						"40PlushoursWeek": 8,
    						all: 8,
    						noCare: 8
    					},
    					"2011": {
    						"1to19hoursWeek": 8,
    						"20to49hoursWeek": 8,
    						"40PlushoursWeek": 8,
    						all: 8,
    						noCare: 8
    					},
    					change: {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 4,
    						all: 3,
    						noCare: 2
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.17,
    						Christian: 72.07,
    						Hindu: 1.72,
    						Jewish: 0.1,
    						Muslim: 1.82,
    						Noreligion: 15.57,
    						Otherreligion: 0.23,
    						Religionnotstated: 7.42,
    						Sikh: 0.9
    					},
    					"2011": {
    						Buddhist: 0.27,
    						Christian: 58.62,
    						Hindu: 2.13,
    						Jewish: 0.09,
    						Muslim: 3.35,
    						Noreligion: 27.22,
    						Otherreligion: 0.39,
    						Religionnotstated: 6.84,
    						Sikh: 1.08
    					},
    					change: {
    						Buddhist: 0.1,
    						Christian: -13.45,
    						Hindu: 0.41,
    						Jewish: -0.01,
    						Muslim: 1.53,
    						Noreligion: 11.65,
    						Otherreligion: 0.16,
    						Religionnotstated: -0.58,
    						Sikh: 0.18
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 7,
    						Christian: 7,
    						Hindu: 2,
    						Jewish: 7,
    						Muslim: 5,
    						Noreligion: 5,
    						Otherreligion: 5,
    						Religionnotstated: 7,
    						Sikh: 3
    					},
    					"2011": {
    						Buddhist: 7,
    						Christian: 8,
    						Hindu: 2,
    						Jewish: 7,
    						Muslim: 5,
    						Noreligion: 4,
    						Otherreligion: 6,
    						Religionnotstated: 5,
    						Sikh: 3
    					},
    					change: {
    						Buddhist: 9,
    						Christian: 7,
    						Hindu: 3,
    						Jewish: 4,
    						Muslim: 5,
    						Noreligion: 4,
    						Otherreligion: 3,
    						Religionnotstated: 5,
    						Sikh: 2
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 6054,
    						Christian: 2553201,
    						Hindu: 61062,
    						Jewish: 3377,
    						Muslim: 64562,
    						Noreligion: 551586,
    						Otherreligion: 8179,
    						Religionnotstated: 262729,
    						Sikh: 31748,
    						all: 3542498
    					},
    					"2011": {
    						Buddhist: 10478,
    						Christian: 2251907,
    						Hindu: 81709,
    						Jewish: 3575,
    						Muslim: 128545,
    						Noreligion: 1045677,
    						Otherreligion: 15036,
    						Religionnotstated: 262773,
    						Sikh: 41570,
    						all: 3841270
    					},
    					change: {
    						Buddhist: 73.08,
    						Christian: -11.8,
    						Hindu: 33.81,
    						Jewish: 5.86,
    						Muslim: 99.1,
    						Noreligion: 89.58,
    						Otherreligion: 83.84,
    						Religionnotstated: 0.02,
    						Sikh: 30.94,
    						all: 8.43
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 8,
    						Christian: 8,
    						Hindu: 2,
    						Jewish: 8,
    						Muslim: 7,
    						Noreligion: 8,
    						Otherreligion: 8,
    						Religionnotstated: 8,
    						Sikh: 4,
    						all: 8
    					},
    					"2011": {
    						Buddhist: 8,
    						Christian: 8,
    						Hindu: 3,
    						Jewish: 9,
    						Muslim: 7,
    						Noreligion: 8,
    						Otherreligion: 8,
    						Religionnotstated: 8,
    						Sikh: 4,
    						all: 8
    					},
    					change: {
    						Buddhist: 7,
    						Christian: 6,
    						Hindu: 8,
    						Jewish: 4,
    						Muslim: 2,
    						Noreligion: 5,
    						Otherreligion: 2,
    						Religionnotstated: 5,
    						Sikh: 4,
    						all: 3
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 4.72,
    						black: 0.9,
    						mixed: 1.01,
    						other: 0.17,
    						white: 93.19
    					},
    					"2011": {
    						asian: 6.98,
    						black: 1.68,
    						mixed: 1.88,
    						other: 0.6,
    						white: 88.86
    					},
    					change: {
    						asian: 2.26,
    						black: 0.78,
    						mixed: 0.87,
    						other: 0.43,
    						white: -4.33
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 4,
    						black: 4,
    						mixed: 5,
    						other: 8,
    						white: 7
    					},
    					"2011": {
    						asian: 4,
    						black: 4,
    						mixed: 5,
    						other: 5,
    						white: 6
    					},
    					change: {
    						asian: 6,
    						black: 6,
    						mixed: 3,
    						other: 4,
    						white: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 3542496,
    						asian: 167189,
    						black: 31908,
    						mixed: 35923,
    						other: 6098,
    						white: 3301378
    					},
    					"2011": {
    						all: 3841270,
    						asian: 267996,
    						black: 64561,
    						mixed: 72042,
    						other: 23137,
    						white: 3413534
    					},
    					change: {
    						all: 8.43,
    						asian: 60.3,
    						black: 102.33,
    						mixed: 100.55,
    						other: 279.42,
    						white: 3.4
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						asian: 6,
    						black: 7,
    						mixed: 7,
    						other: 8,
    						white: 8
    					},
    					"2011": {
    						all: 8,
    						asian: 7,
    						black: 7,
    						mixed: 7,
    						other: 7,
    						white: 8
    					},
    					change: {
    						all: 3,
    						asian: 7,
    						black: 7,
    						mixed: 1,
    						other: 2,
    						white: 3
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 9.44,
    						fair: 23.52,
    						good: 67.04
    					},
    					"2011": {
    						bad: 5.74,
    						fair: 14.25,
    						good: 80.01
    					},
    					change: {
    						bad: -3.7,
    						fair: -9.27,
    						good: 12.97
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 5,
    						fair: 2,
    						good: 6
    					},
    					"2011": {
    						bad: 5,
    						fair: 2,
    						good: 5
    					},
    					change: {
    						bad: 6,
    						fair: 7,
    						good: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 3542498,
    						bad: 334445,
    						fair: 833048,
    						good: 2375005
    					},
    					"2011": {
    						all: 3841270,
    						bad: 220645,
    						fair: 547192,
    						good: 3073433
    					},
    					change: {
    						all: 8.43,
    						bad: -34.03,
    						fair: -34.31,
    						good: 29.41
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						bad: 8,
    						fair: 8,
    						good: 8
    					},
    					"2011": {
    						all: 8,
    						bad: 8,
    						fair: 8,
    						good: 8
    					},
    					change: {
    						all: 3,
    						bad: 4,
    						fair: 3,
    						good: 2
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 52.66,
    						inactive: 33.86,
    						"self-employed": 7.64,
    						student: 2.48,
    						unemployed: 3.35
    					},
    					"2011": {
    						employee: 52.44,
    						inactive: 31.48,
    						"self-employed": 8.52,
    						student: 3.35,
    						unemployed: 4.21
    					},
    					change: {
    						employee: -0.22,
    						inactive: -2.38,
    						"self-employed": 0.88,
    						student: 0.87,
    						unemployed: 0.86
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 4,
    						inactive: 5,
    						"self-employed": 5,
    						student: 6,
    						unemployed: 6
    					},
    					"2011": {
    						employee: 4,
    						inactive: 5,
    						"self-employed": 5,
    						student: 5,
    						unemployed: 6
    					},
    					change: {
    						employee: 5,
    						inactive: 3,
    						"self-employed": 9,
    						student: 5,
    						unemployed: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 2566618,
    						employee: 1351678,
    						inactive: 869154,
    						"self-employed": 196109,
    						student: 63735,
    						unemployed: 85942
    					},
    					"2011": {
    						all: 2830358,
    						employee: 1484195,
    						inactive: 891048,
    						"self-employed": 241135,
    						student: 94763,
    						unemployed: 119217
    					},
    					change: {
    						all: 10.28,
    						employee: 9.8,
    						inactive: 2.52,
    						"self-employed": 22.96,
    						student: 48.68,
    						unemployed: 38.72
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						employee: 8,
    						inactive: 8,
    						"self-employed": 8,
    						student: 8,
    						unemployed: 7
    					},
    					"2011": {
    						all: 8,
    						employee: 8,
    						inactive: 8,
    						"self-employed": 8,
    						student: 8,
    						unemployed: 7
    					},
    					change: {
    						all: 2,
    						employee: 2,
    						inactive: 1,
    						"self-employed": 8,
    						student: 5,
    						unemployed: 5
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 29.36,
    						NoKids: 61.33,
    						NonDepKids: 9.31
    					},
    					"2011": {
    						Kids: 28.39,
    						NoKids: 62.14,
    						NonDepKids: 9.46
    					},
    					change: {
    						Kids: -0.97,
    						NoKids: 0.81,
    						NonDepKids: 0.15
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 6,
    						NoKids: 4,
    						NonDepKids: 4
    					},
    					"2011": {
    						Kids: 7,
    						NoKids: 2,
    						NonDepKids: 5
    					},
    					change: {
    						Kids: 6,
    						NoKids: 4,
    						NonDepKids: 6
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 432622,
    						NoKids: 903687,
    						NonDepKids: 137104,
    						all: 1473413
    					},
    					"2011": {
    						Kids: 456540,
    						NoKids: 999190,
    						NonDepKids: 152144,
    						all: 1607874
    					},
    					change: {
    						Kids: 5.53,
    						NoKids: 10.57,
    						NonDepKids: 10.97,
    						all: 9.13
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 8,
    						NoKids: 8,
    						NonDepKids: 8,
    						all: 8
    					},
    					"2011": {
    						Kids: 8,
    						NoKids: 8,
    						NonDepKids: 8,
    						all: 8
    					},
    					change: {
    						Kids: 4,
    						NoKids: 1,
    						NonDepKids: 5,
    						all: 1
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 9.85,
    						Cohabiting: 8.71,
    						LoneParent: 8.81,
    						Married: 38.83,
    						OnePerson: 28.4,
    						Other: 5.4
    					},
    					"2011": {
    						"65andOver": 9.15,
    						Cohabiting: 10.47,
    						LoneParent: 9.83,
    						Married: 34.7,
    						OnePerson: 29.16,
    						Other: 6.69
    					},
    					change: {
    						"65andOver": -0.7,
    						Cohabiting: 1.76,
    						LoneParent: 1.02,
    						Married: -4.13,
    						OnePerson: 0.76,
    						Other: 1.29
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 3,
    						Cohabiting: 2,
    						LoneParent: 6,
    						Married: 2,
    						OnePerson: 8,
    						Other: 7
    					},
    					"2011": {
    						"65andOver": 3,
    						Cohabiting: 2,
    						LoneParent: 6,
    						Married: 3,
    						OnePerson: 7,
    						Other: 6
    					},
    					change: {
    						"65andOver": 3,
    						Cohabiting: 4,
    						LoneParent: 6,
    						Married: 5,
    						OnePerson: 4,
    						Other: 2
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 145069,
    						Cohabiting: 128401,
    						LoneParent: 129856,
    						Married: 572086,
    						OnePerson: 418452,
    						Other: 79549,
    						all: 1473413
    					},
    					"2011": {
    						"65andOver": 147085,
    						Cohabiting: 168352,
    						LoneParent: 157996,
    						Married: 557996,
    						OnePerson: 468889,
    						Other: 107556,
    						all: 1607874
    					},
    					change: {
    						"65andOver": 1.39,
    						Cohabiting: 31.11,
    						LoneParent: 21.67,
    						Married: -2.46,
    						OnePerson: 12.05,
    						Other: 35.21,
    						all: 9.13
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 8,
    						Cohabiting: 8,
    						LoneParent: 8,
    						Married: 8,
    						OnePerson: 8,
    						Other: 8,
    						all: 8
    					},
    					"2011": {
    						"65andOver": 7,
    						Cohabiting: 8,
    						LoneParent: 8,
    						Married: 8,
    						OnePerson: 8,
    						Other: 8,
    						all: 8
    					},
    					change: {
    						"65andOver": 1,
    						Cohabiting: 5,
    						LoneParent: 4,
    						Married: 5,
    						OnePerson: 1,
    						Other: 1,
    						all: 1
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 53.39,
    						Seperated: 10.32,
    						Single: 27.79,
    						Widowed: 8.51
    					},
    					"2011": {
    						Married: 48.52,
    						Seperated: 11.71,
    						Single: 32.47,
    						Widowed: 7.3
    					},
    					change: {
    						Married: -4.87,
    						Seperated: 1.39,
    						Single: 4.68,
    						Widowed: -1.21
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 2,
    						Seperated: 8,
    						Single: 7,
    						Widowed: 6
    					},
    					"2011": {
    						Married: 4,
    						Seperated: 7,
    						Single: 6,
    						Widowed: 5
    					},
    					change: {
    						Married: 6,
    						Seperated: 1,
    						Single: 5,
    						Widowed: 2
    					}
    				},
    				value: {
    					"2001": {
    						Married: 1515597,
    						Seperated: 292908,
    						Single: 788817,
    						Widowed: 241659,
    						all: 2838981
    					},
    					"2011": {
    						Married: 1523817,
    						Seperated: 367877,
    						Single: 1019678,
    						Widowed: 229314,
    						all: 3140686
    					},
    					change: {
    						Married: 0.54,
    						Seperated: 25.59,
    						Single: 29.27,
    						Widowed: -5.11,
    						all: 10.63
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 8,
    						Seperated: 8,
    						Single: 8,
    						Widowed: 8,
    						all: 8
    					},
    					"2011": {
    						Married: 8,
    						Seperated: 8,
    						Single: 8,
    						Widowed: 8,
    						all: 8
    					},
    					change: {
    						Married: 5,
    						Seperated: 1,
    						Single: 1,
    						Widowed: 2,
    						all: 2
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 3.6,
    						bus: 7.64,
    						car_van: 65.78,
    						foot: 11.05,
    						home: 9.47,
    						moto: 1.1,
    						other: 0.31,
    						taxi: 0.39,
    						train_metro: 0.65
    					},
    					"2011": {
    						bicycle: 2.91,
    						bus: 6.6,
    						car_van: 70.87,
    						foot: 11.28,
    						home: 5.03,
    						moto: 0.75,
    						other: 0.55,
    						taxi: 0.4,
    						train_metro: 1.6
    					},
    					change: {
    						bicycle: -0.69,
    						bus: -1.04,
    						car_van: 5.09,
    						foot: 0.23,
    						home: -4.44,
    						moto: -0.35,
    						other: 0.24,
    						taxi: 0.01,
    						train_metro: 0.95
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 2,
    						bus: 6,
    						car_van: 5,
    						foot: 2,
    						home: 4,
    						moto: 3,
    						other: 7,
    						taxi: 8,
    						train_metro: 9
    					},
    					"2011": {
    						bicycle: 5,
    						bus: 6,
    						car_van: 2,
    						foot: 3,
    						home: 5,
    						moto: 5,
    						other: 8,
    						taxi: 7,
    						train_metro: 9
    					},
    					change: {
    						bicycle: 9,
    						bus: 6,
    						car_van: 1,
    						foot: 9,
    						home: 8,
    						moto: 8,
    						other: 6,
    						taxi: 4,
    						train_metro: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 1531401,
    						bicycle: 55099,
    						bus: 117008,
    						car_van: 1007352,
    						foot: 169195,
    						home: 145042,
    						moto: 16916,
    						other: 4745,
    						taxi: 6019,
    						train_metro: 10025
    					},
    					"2011": {
    						all: 1797087,
    						bicycle: 52360,
    						bus: 118678,
    						car_van: 1273649,
    						foot: 202764,
    						home: 90329,
    						moto: 13568,
    						other: 9854,
    						taxi: 7177,
    						train_metro: 28708
    					},
    					change: {
    						all: 17.35,
    						bicycle: -4.97,
    						bus: 1.43,
    						car_van: 26.44,
    						foot: 19.84,
    						home: -37.72,
    						moto: -19.79,
    						other: 107.67,
    						taxi: 19.24,
    						train_metro: 186.36
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						bicycle: 7,
    						bus: 6,
    						car_van: 8,
    						foot: 8,
    						home: 8,
    						moto: 8,
    						other: 8,
    						taxi: 8,
    						train_metro: 9
    					},
    					"2011": {
    						all: 8,
    						bicycle: 7,
    						bus: 6,
    						car_van: 7,
    						foot: 8,
    						home: 8,
    						moto: 8,
    						other: 9,
    						taxi: 8,
    						train_metro: 9
    					},
    					change: {
    						all: 2,
    						bicycle: 9,
    						bus: 6,
    						car_van: 1,
    						foot: 6,
    						home: 5,
    						moto: 5,
    						other: 5,
    						taxi: 4,
    						train_metro: 3
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.77,
    						"Female16-30": 13.87,
    						"Female31-48": 22.11,
    						Female49plus: 2.8,
    						"Male1-15": 1.79,
    						"Male16-30": 3.23,
    						"Male31-48": 35.92,
    						Male49plus: 13.51
    					},
    					"2011": {
    						"Female1-15": 6.84,
    						"Female16-30": 15.22,
    						"Female31-48": 22.41,
    						Female49plus: 2.63,
    						"Male1-15": 3.01,
    						"Male16-30": 5.07,
    						"Male31-48": 34.78,
    						Male49plus: 10.04
    					},
    					change: {
    						"Female1-15": 0.07,
    						"Female16-30": 1.35,
    						"Female31-48": 0.3,
    						Female49plus: -0.17,
    						"Male1-15": 1.22,
    						"Male16-30": 1.84,
    						"Male31-48": -1.14,
    						Male49plus: -3.47
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 4,
    						"Female16-30": 5,
    						"Female31-48": 7,
    						Female49plus: 5,
    						"Male1-15": 5,
    						"Male16-30": 6,
    						"Male31-48": 5,
    						Male49plus: 3
    					},
    					"2011": {
    						"Female1-15": 4,
    						"Female16-30": 4,
    						"Female31-48": 6,
    						Female49plus: 6,
    						"Male1-15": 6,
    						"Male16-30": 6,
    						"Male31-48": 5,
    						Male49plus: 5
    					},
    					change: {
    						"Female1-15": 4,
    						"Female16-30": 3,
    						"Female31-48": 2,
    						Female49plus: 7,
    						"Male1-15": 5,
    						"Male16-30": 6,
    						"Male31-48": 4,
    						Male49plus: 9
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 108471,
    						"Female16-30": 222394,
    						"Female31-48": 354454,
    						Female49plus: 44833,
    						"Male1-15": 28711,
    						"Male16-30": 51830,
    						"Male31-48": 575698,
    						Male49plus: 216509,
    						all: 1602900
    					},
    					"2011": {
    						"Female1-15": 122973,
    						"Female16-30": 273556,
    						"Female31-48": 402681,
    						Female49plus: 47294,
    						"Male1-15": 54044,
    						"Male16-30": 91143,
    						"Male31-48": 625013,
    						Male49plus: 180383,
    						all: 1797087
    					},
    					change: {
    						"Female1-15": 13.37,
    						"Female16-30": 23.01,
    						"Female31-48": 13.61,
    						Female49plus: 5.49,
    						"Male1-15": 88.23,
    						"Male16-30": 75.85,
    						"Male31-48": 8.57,
    						Male49plus: -16.69,
    						all: 12.11
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 8,
    						"Female16-30": 8,
    						"Female31-48": 8,
    						Female49plus: 8,
    						"Male1-15": 8,
    						"Male16-30": 8,
    						"Male31-48": 8,
    						Male49plus: 8,
    						all: 8
    					},
    					"2011": {
    						"Female1-15": 8,
    						"Female16-30": 8,
    						"Female31-48": 8,
    						Female49plus: 8,
    						"Male1-15": 8,
    						"Male16-30": 8,
    						"Male31-48": 8,
    						Male49plus: 8,
    						all: 8
    					},
    					change: {
    						"Female1-15": 4,
    						"Female16-30": 4,
    						"Female31-48": 1,
    						Female49plus: 7,
    						"Male1-15": 4,
    						"Male16-30": 6,
    						"Male31-48": 2,
    						Male49plus: 7,
    						all: 2
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 71.52,
    						rent_free: 1.92,
    						rented_private: 8.53,
    						rented_social: 17.48,
    						shared_ownership: 0.55
    					},
    					"2011": {
    						owned: 67.14,
    						rent_free: 1.34,
    						rented_private: 14.94,
    						rented_social: 15.95,
    						shared_ownership: 0.63
    					},
    					change: {
    						owned: -4.38,
    						rent_free: -0.58,
    						rented_private: 6.41,
    						rented_social: -1.53,
    						shared_ownership: 0.08
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 4,
    						rent_free: 5,
    						rented_private: 6,
    						rented_social: 6,
    						shared_ownership: 6
    					},
    					"2011": {
    						owned: 4,
    						rent_free: 4,
    						rented_private: 6,
    						rented_social: 6,
    						shared_ownership: 6
    					},
    					change: {
    						owned: 5,
    						rent_free: 3,
    						rented_private: 6,
    						rented_social: 5,
    						shared_ownership: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 1481586,
    						owned: 1059590,
    						rent_free: 28484,
    						rented_private: 126359,
    						rented_social: 258983,
    						shared_ownership: 8170
    					},
    					"2011": {
    						all: 1607874,
    						owned: 1079516,
    						rent_free: 21551,
    						rented_private: 240236,
    						rented_social: 256515,
    						shared_ownership: 10056
    					},
    					change: {
    						all: 8.52,
    						owned: 1.88,
    						rent_free: -24.34,
    						rented_private: 90.12,
    						rented_social: -0.95,
    						shared_ownership: 23.08
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8,
    						owned: 8,
    						rent_free: 8,
    						rented_private: 8,
    						rented_social: 8,
    						shared_ownership: 8
    					},
    					"2011": {
    						all: 8,
    						owned: 8,
    						rent_free: 8,
    						rented_private: 8,
    						rented_social: 8,
    						shared_ownership: 7
    					},
    					change: {
    						all: 1,
    						owned: 3,
    						rent_free: 3,
    						rented_private: 4,
    						rented_social: 5,
    						shared_ownership: 5
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 2.27
    					},
    					"2011": {
    						all: 2.46
    					},
    					change: {
    						all: 0.18999999999999995
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8
    					},
    					"2011": {
    						all: 8
    					},
    					change: {
    						all: 3
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 11.95,
    						"10-19": 12.88,
    						"20-29": 12,
    						"30-39": 15.17,
    						"40-49": 13.42,
    						"50-59": 13.14,
    						"60-69": 9.6,
    						"70-79": 4.15,
    						"80plus": 7.69
    					},
    					"2011": {
    						"0-9": 11.21,
    						"10-19": 12.39,
    						"20-29": 13.09,
    						"30-39": 12.15,
    						"40-49": 14.81,
    						"50-59": 12.56,
    						"60-69": 11.61,
    						"70-79": 4.11,
    						"80plus": 8.08
    					},
    					change: {
    						"0-9": -0.74,
    						"10-19": -0.49,
    						"20-29": 1.09,
    						"30-39": -3.02,
    						"40-49": 1.39,
    						"50-59": -0.58,
    						"60-69": 2.01,
    						"70-79": -0.04,
    						"80plus": 0.39
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 7,
    						"10-19": 5,
    						"20-29": 5,
    						"30-39": 4,
    						"40-49": 4,
    						"50-59": 2,
    						"60-69": 4,
    						"70-79": 3,
    						"80plus": 4
    					},
    					"2011": {
    						"0-9": 7,
    						"10-19": 2,
    						"20-29": 6,
    						"30-39": 7,
    						"40-49": 3,
    						"50-59": 3,
    						"60-69": 2,
    						"70-79": 3,
    						"80plus": 5
    					},
    					change: {
    						"0-9": 8,
    						"10-19": 3,
    						"20-29": 5,
    						"30-39": 9,
    						"40-49": 1,
    						"50-59": 5,
    						"60-69": 2,
    						"70-79": 4,
    						"80plus": 4
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 423464,
    						"10-19": 456118,
    						"20-29": 425028,
    						"30-39": 537265,
    						"40-49": 475441,
    						"50-59": 465431,
    						"60-69": 340217,
    						"70-79": 147171,
    						"80plus": 272363,
    						all: 3542498
    					},
    					"2011": {
    						"0-9": 430532,
    						"10-19": 475922,
    						"20-29": 502944,
    						"30-39": 466833,
    						"40-49": 568712,
    						"50-59": 482418,
    						"60-69": 445824,
    						"70-79": 157757,
    						"80plus": 310328,
    						all: 3841270
    					},
    					change: {
    						"0-9": 1.67,
    						"10-19": 4.34,
    						"20-29": 18.33,
    						"30-39": -13.11,
    						"40-49": 19.62,
    						"50-59": 3.65,
    						"60-69": 31.04,
    						"70-79": 7.19,
    						"80plus": 13.94,
    						all: 8.43
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 8,
    						"10-19": 8,
    						"20-29": 8,
    						"30-39": 8,
    						"40-49": 8,
    						"50-59": 8,
    						"60-69": 8,
    						"70-79": 8,
    						"80plus": 8,
    						all: 8
    					},
    					"2011": {
    						"0-9": 8,
    						"10-19": 8,
    						"20-29": 8,
    						"30-39": 8,
    						"40-49": 8,
    						"50-59": 8,
    						"60-69": 8,
    						"70-79": 8,
    						"80plus": 8,
    						all: 8
    					},
    					change: {
    						"0-9": 6,
    						"10-19": 4,
    						"20-29": 4,
    						"30-39": 6,
    						"40-49": 2,
    						"50-59": 3,
    						"60-69": 2,
    						"70-79": 1,
    						"80plus": 2,
    						all: 3
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 40
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 3
    					},
    					change: {
    						all: 3
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000005",
    		name: "West Midlands",
    		type: "rgn",
    		area: 1299831.58,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000019",
    				name: "Herefordshire, County of",
    				type: "lad"
    			},
    			{
    				code: "E06000020",
    				name: "Telford and Wrekin",
    				type: "lad"
    			},
    			{
    				code: "E06000021",
    				name: "Stoke-on-Trent",
    				type: "lad"
    			},
    			{
    				code: "E06000051",
    				name: "Shropshire",
    				type: "lad"
    			},
    			{
    				code: "E08000025",
    				name: "Birmingham",
    				type: "lad"
    			},
    			{
    				code: "E08000026",
    				name: "Coventry",
    				type: "lad"
    			},
    			{
    				code: "E08000027",
    				name: "Dudley",
    				type: "lad"
    			},
    			{
    				code: "E08000028",
    				name: "Sandwell",
    				type: "lad"
    			},
    			{
    				code: "E08000029",
    				name: "Solihull",
    				type: "lad"
    			},
    			{
    				code: "E08000030",
    				name: "Walsall",
    				type: "lad"
    			},
    			{
    				code: "E08000031",
    				name: "Wolverhampton",
    				type: "lad"
    			},
    			{
    				code: "E10000028",
    				name: "Staffordshire",
    				type: "cty"
    			},
    			{
    				code: "E10000031",
    				name: "Warwickshire",
    				type: "cty"
    			},
    			{
    				code: "E10000034",
    				name: "Worcestershire",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-3.23554,
    				51.82594
    			],
    			[
    				-1.17214,
    				53.22622
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.11,
    						male: 48.89
    					},
    					"2011": {
    						female: 50.67,
    						male: 49.33
    					},
    					change: {
    						female: -0.44,
    						male: 0.44
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 7,
    						male: 3
    					},
    					"2011": {
    						female: 8,
    						male: 2
    					},
    					change: {
    						female: 5,
    						male: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 5267308,
    						female: 2692197,
    						male: 2575111
    					},
    					"2011": {
    						all: 5601847,
    						female: 2838660,
    						male: 2763187
    					},
    					change: {
    						all: 6.35,
    						female: 5.44,
    						male: 7.3
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						female: 4,
    						male: 4
    					},
    					"2011": {
    						all: 4,
    						female: 4,
    						male: 4
    					},
    					change: {
    						all: 7,
    						female: 6,
    						male: 7
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 7.1,
    						"20to49hoursWeek": 1.24,
    						"40PlushoursWeek": 2.26,
    						noCare: 89.4
    					},
    					"2011": {
    						"1to19hoursWeek": 6.76,
    						"20to49hoursWeek": 1.53,
    						"40PlushoursWeek": 2.68,
    						noCare: 89.02
    					},
    					change: {
    						"1to19hoursWeek": -0.34,
    						"20to49hoursWeek": 0.29,
    						"40PlushoursWeek": 0.42,
    						noCare: -0.38
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 3,
    						"40PlushoursWeek": 4,
    						noCare: 6
    					},
    					"2011": {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 3,
    						"40PlushoursWeek": 3,
    						noCare: 7
    					},
    					change: {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 5,
    						"40PlushoursWeek": 1,
    						noCare: 6
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 374079,
    						"20to49hoursWeek": 65065,
    						"40PlushoursWeek": 119277,
    						all: 5267308,
    						noCare: 4708887
    					},
    					"2011": {
    						"1to19hoursWeek": 378678,
    						"20to49hoursWeek": 85924,
    						"40PlushoursWeek": 150286,
    						all: 5601847,
    						noCare: 4986959
    					},
    					change: {
    						"1to19hoursWeek": 1.23,
    						"20to49hoursWeek": 32.06,
    						"40PlushoursWeek": 26,
    						all: 6.35,
    						noCare: 5.91
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 3,
    						"40PlushoursWeek": 3,
    						all: 4,
    						noCare: 4
    					},
    					"2011": {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 4,
    						"40PlushoursWeek": 3,
    						all: 4,
    						noCare: 4
    					},
    					change: {
    						"1to19hoursWeek": 6,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 5,
    						all: 7,
    						noCare: 7
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.19,
    						Christian: 72.58,
    						Hindu: 1.08,
    						Jewish: 0.09,
    						Muslim: 4.1,
    						Noreligion: 12.3,
    						Otherreligion: 0.21,
    						Religionnotstated: 7.48,
    						Sikh: 1.97
    					},
    					"2011": {
    						Buddhist: 0.3,
    						Christian: 60.22,
    						Hindu: 1.29,
    						Jewish: 0.08,
    						Muslim: 6.71,
    						Noreligion: 21.97,
    						Otherreligion: 0.46,
    						Religionnotstated: 6.58,
    						Sikh: 2.39
    					},
    					change: {
    						Buddhist: 0.11,
    						Christian: -12.36,
    						Hindu: 0.21,
    						Jewish: -0.01,
    						Muslim: 2.61,
    						Noreligion: 9.67,
    						Otherreligion: 0.25,
    						Religionnotstated: -0.9,
    						Sikh: 0.42
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 5,
    						Christian: 6,
    						Hindu: 3,
    						Jewish: 9,
    						Muslim: 2,
    						Noreligion: 7,
    						Otherreligion: 6,
    						Religionnotstated: 6,
    						Sikh: 1
    					},
    					"2011": {
    						Buddhist: 5,
    						Christian: 3,
    						Hindu: 3,
    						Jewish: 9,
    						Muslim: 2,
    						Noreligion: 7,
    						Otherreligion: 4,
    						Religionnotstated: 7,
    						Sikh: 1
    					},
    					change: {
    						Buddhist: 7,
    						Christian: 3,
    						Hindu: 5,
    						Jewish: 4,
    						Muslim: 2,
    						Noreligion: 7,
    						Otherreligion: 1,
    						Religionnotstated: 6,
    						Sikh: 1
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 9760,
    						Christian: 3823235,
    						Hindu: 56668,
    						Jewish: 4977,
    						Muslim: 216184,
    						Noreligion: 647718,
    						Otherreligion: 10895,
    						Religionnotstated: 394001,
    						Sikh: 103870,
    						all: 5267308
    					},
    					"2011": {
    						Buddhist: 16649,
    						Christian: 3373450,
    						Hindu: 72247,
    						Jewish: 4621,
    						Muslim: 376152,
    						Noreligion: 1230910,
    						Otherreligion: 25654,
    						Religionnotstated: 368483,
    						Sikh: 133681,
    						all: 5601847
    					},
    					change: {
    						Buddhist: 70.58,
    						Christian: -11.76,
    						Hindu: 27.49,
    						Jewish: -7.15,
    						Muslim: 74,
    						Noreligion: 90.04,
    						Otherreligion: 135.47,
    						Religionnotstated: -6.48,
    						Sikh: 28.7,
    						all: 6.35
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 5,
    						Christian: 4,
    						Hindu: 3,
    						Jewish: 6,
    						Muslim: 2,
    						Noreligion: 7,
    						Otherreligion: 5,
    						Religionnotstated: 4,
    						Sikh: 2,
    						all: 4
    					},
    					"2011": {
    						Buddhist: 5,
    						Christian: 4,
    						Hindu: 4,
    						Jewish: 6,
    						Muslim: 2,
    						Noreligion: 7,
    						Otherreligion: 3,
    						Religionnotstated: 5,
    						Sikh: 1,
    						all: 4
    					},
    					change: {
    						Buddhist: 8,
    						Christian: 5,
    						Hindu: 9,
    						Jewish: 8,
    						Muslim: 6,
    						Noreligion: 4,
    						Otherreligion: 1,
    						Religionnotstated: 6,
    						Sikh: 5,
    						all: 7
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 7.63,
    						black: 1.98,
    						mixed: 1.39,
    						other: 0.27,
    						white: 88.74
    					},
    					"2011": {
    						asian: 10.79,
    						black: 3.25,
    						mixed: 2.35,
    						other: 0.89,
    						white: 82.72
    					},
    					change: {
    						asian: 3.16,
    						black: 1.27,
    						mixed: 0.96,
    						other: 0.62,
    						white: -6.02
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 3,
    						white: 8
    					},
    					"2011": {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 8
    					},
    					change: {
    						asian: 2,
    						black: 2,
    						mixed: 2,
    						other: 2,
    						white: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 5267307,
    						asian: 401671,
    						black: 104032,
    						mixed: 73225,
    						other: 14083,
    						white: 4674296
    					},
    					"2011": {
    						all: 5601847,
    						asian: 604435,
    						black: 182125,
    						mixed: 131714,
    						other: 49904,
    						white: 4633669
    					},
    					change: {
    						all: 6.35,
    						asian: 50.48,
    						black: 75.07,
    						mixed: 79.88,
    						other: 254.36,
    						white: -0.87
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						asian: 2,
    						black: 2,
    						mixed: 3,
    						other: 3,
    						white: 5
    					},
    					"2011": {
    						all: 4,
    						asian: 2,
    						black: 2,
    						mixed: 3,
    						other: 2,
    						white: 6
    					},
    					change: {
    						all: 7,
    						asian: 9,
    						black: 8,
    						mixed: 7,
    						other: 3,
    						white: 8
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 9.73,
    						fair: 23.06,
    						good: 67.21
    					},
    					"2011": {
    						bad: 6.11,
    						fair: 14.04,
    						good: 79.85
    					},
    					change: {
    						bad: -3.62,
    						fair: -9.02,
    						good: 12.64
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 4,
    						fair: 3,
    						good: 5
    					},
    					"2011": {
    						bad: 3,
    						fair: 3,
    						good: 7
    					},
    					change: {
    						bad: 5,
    						fair: 4,
    						good: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 5267308,
    						bad: 512526,
    						fair: 1214417,
    						good: 3540365
    					},
    					"2011": {
    						all: 5601847,
    						bad: 342466,
    						fair: 786583,
    						good: 4472798
    					},
    					change: {
    						all: 6.35,
    						bad: -33.18,
    						fair: -35.23,
    						good: 26.34
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						bad: 4,
    						fair: 4,
    						good: 4
    					},
    					"2011": {
    						all: 4,
    						bad: 4,
    						fair: 4,
    						good: 5
    					},
    					change: {
    						all: 7,
    						bad: 2,
    						fair: 5,
    						good: 7
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 52.25,
    						inactive: 34.09,
    						"self-employed": 7.4,
    						student: 2.48,
    						unemployed: 3.78
    					},
    					"2011": {
    						employee: 51.43,
    						inactive: 31.68,
    						"self-employed": 8.51,
    						student: 3.29,
    						unemployed: 5.1
    					},
    					change: {
    						employee: -0.82,
    						inactive: -2.41,
    						"self-employed": 1.11,
    						student: 0.81,
    						unemployed: 1.32
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 5,
    						inactive: 4,
    						"self-employed": 6,
    						student: 6,
    						unemployed: 3
    					},
    					"2011": {
    						employee: 6,
    						inactive: 3,
    						"self-employed": 6,
    						student: 6,
    						unemployed: 3
    					},
    					change: {
    						employee: 7,
    						inactive: 4,
    						"self-employed": 7,
    						student: 6,
    						unemployed: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 3780784,
    						employee: 1975635,
    						inactive: 1288971,
    						"self-employed": 279631,
    						student: 93765,
    						unemployed: 142782
    					},
    					"2011": {
    						all: 4067119,
    						employee: 2091598,
    						inactive: 1288260,
    						"self-employed": 345928,
    						student: 133918,
    						unemployed: 207415
    					},
    					change: {
    						all: 7.57,
    						employee: 5.87,
    						inactive: -0.06,
    						"self-employed": 23.71,
    						student: 42.82,
    						unemployed: 45.27
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						employee: 5,
    						inactive: 4,
    						"self-employed": 6,
    						student: 4,
    						unemployed: 3
    					},
    					"2011": {
    						all: 4,
    						employee: 5,
    						inactive: 4,
    						"self-employed": 6,
    						student: 5,
    						unemployed: 3
    					},
    					change: {
    						all: 7,
    						employee: 9,
    						inactive: 6,
    						"self-employed": 6,
    						student: 6,
    						unemployed: 3
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 30.73,
    						NoKids: 58.99,
    						NonDepKids: 10.29
    					},
    					"2011": {
    						Kids: 30.16,
    						NoKids: 59.34,
    						NonDepKids: 10.5
    					},
    					change: {
    						Kids: -0.57,
    						NoKids: 0.35,
    						NonDepKids: 0.21
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 1,
    						NoKids: 9,
    						NonDepKids: 3
    					},
    					"2011": {
    						Kids: 2,
    						NoKids: 9,
    						NonDepKids: 2
    					},
    					change: {
    						Kids: 4,
    						NoKids: 6,
    						NonDepKids: 4
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 661735,
    						NoKids: 1270428,
    						NonDepKids: 221507,
    						all: 2153670
    					},
    					"2011": {
    						Kids: 692095,
    						NoKids: 1361911,
    						NonDepKids: 240903,
    						all: 2294909
    					},
    					change: {
    						Kids: 4.59,
    						NoKids: 7.2,
    						NonDepKids: 8.76,
    						all: 6.56
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 4,
    						NoKids: 4,
    						NonDepKids: 4,
    						all: 4
    					},
    					"2011": {
    						Kids: 4,
    						NoKids: 6,
    						NonDepKids: 4,
    						all: 4
    					},
    					change: {
    						Kids: 6,
    						NoKids: 8,
    						NonDepKids: 6,
    						all: 8
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 9.07,
    						Cohabiting: 7.94,
    						LoneParent: 10.05,
    						Married: 38.08,
    						OnePerson: 28.82,
    						Other: 6.03
    					},
    					"2011": {
    						"65andOver": 8.58,
    						Cohabiting: 9.59,
    						LoneParent: 11.27,
    						Married: 33.71,
    						OnePerson: 29.55,
    						Other: 7.29
    					},
    					change: {
    						"65andOver": -0.49,
    						Cohabiting: 1.65,
    						LoneParent: 1.22,
    						Married: -4.37,
    						OnePerson: 0.73,
    						Other: 1.26
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 6,
    						Cohabiting: 7,
    						LoneParent: 4,
    						Married: 4,
    						OnePerson: 6,
    						Other: 3
    					},
    					"2011": {
    						"65andOver": 5,
    						Cohabiting: 8,
    						LoneParent: 4,
    						Married: 5,
    						OnePerson: 6,
    						Other: 3
    					},
    					change: {
    						"65andOver": 1,
    						Cohabiting: 6,
    						LoneParent: 4,
    						Married: 8,
    						OnePerson: 5,
    						Other: 4
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 195281,
    						Cohabiting: 171024,
    						LoneParent: 216545,
    						Married: 820177,
    						OnePerson: 620770,
    						Other: 129873,
    						all: 2153670
    					},
    					"2011": {
    						"65andOver": 196969,
    						Cohabiting: 220109,
    						LoneParent: 258746,
    						Married: 773535,
    						OnePerson: 678248,
    						Other: 167302,
    						all: 2294909
    					},
    					change: {
    						"65andOver": 0.86,
    						Cohabiting: 28.7,
    						LoneParent: 19.49,
    						Married: -5.69,
    						OnePerson: 9.26,
    						Other: 28.82,
    						all: 6.56
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 4,
    						Cohabiting: 6,
    						LoneParent: 4,
    						Married: 4,
    						OnePerson: 4,
    						Other: 4,
    						all: 4
    					},
    					"2011": {
    						"65andOver": 4,
    						Cohabiting: 6,
    						LoneParent: 4,
    						Married: 5,
    						OnePerson: 5,
    						Other: 4,
    						all: 4
    					},
    					change: {
    						"65andOver": 2,
    						Cohabiting: 6,
    						LoneParent: 6,
    						Married: 8,
    						OnePerson: 7,
    						Other: 4,
    						all: 8
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 52.44,
    						Seperated: 10.12,
    						Single: 28.78,
    						Widowed: 8.66
    					},
    					"2011": {
    						Married: 47.68,
    						Seperated: 11.33,
    						Single: 33.67,
    						Widowed: 7.33
    					},
    					change: {
    						Married: -4.76,
    						Seperated: 1.21,
    						Single: 4.89,
    						Widowed: -1.33
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 5,
    						Seperated: 9,
    						Single: 4,
    						Widowed: 5
    					},
    					"2011": {
    						Married: 5,
    						Seperated: 8,
    						Single: 5,
    						Widowed: 4
    					},
    					change: {
    						Married: 5,
    						Seperated: 3,
    						Single: 4,
    						Widowed: 4
    					}
    				},
    				value: {
    					"2001": {
    						Married: 2187370,
    						Seperated: 422341,
    						Single: 1200500,
    						Widowed: 361203,
    						all: 4171414
    					},
    					"2011": {
    						Married: 2148940,
    						Seperated: 510559,
    						Single: 1517613,
    						Widowed: 330293,
    						all: 4507405
    					},
    					change: {
    						Married: -1.76,
    						Seperated: 20.89,
    						Single: 26.42,
    						Widowed: -8.56,
    						all: 8.05
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 4,
    						Seperated: 5,
    						Single: 4,
    						Widowed: 4,
    						all: 4
    					},
    					"2011": {
    						Married: 5,
    						Seperated: 5,
    						Single: 4,
    						Widowed: 3,
    						all: 4
    					},
    					change: {
    						Married: 7,
    						Seperated: 4,
    						Single: 5,
    						Widowed: 5,
    						all: 7
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 2.25,
    						bus: 8.74,
    						car_van: 67.27,
    						foot: 9.51,
    						home: 8.99,
    						moto: 0.89,
    						other: 0.27,
    						taxi: 0.44,
    						train_metro: 1.65
    					},
    					"2011": {
    						bicycle: 1.99,
    						bus: 7.68,
    						car_van: 71.13,
    						foot: 9.91,
    						home: 4.78,
    						moto: 0.65,
    						other: 0.53,
    						taxi: 0.53,
    						train_metro: 2.81
    					},
    					change: {
    						bicycle: -0.26,
    						bus: -1.06,
    						car_van: 3.86,
    						foot: 0.4,
    						home: -4.21,
    						moto: -0.24,
    						other: 0.26,
    						taxi: 0.09,
    						train_metro: 1.16
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 7,
    						bus: 4,
    						car_van: 2,
    						foot: 8,
    						home: 5,
    						moto: 8,
    						other: 9,
    						taxi: 6,
    						train_metro: 7
    					},
    					"2011": {
    						bicycle: 8,
    						bus: 5,
    						car_van: 1,
    						foot: 8,
    						home: 6,
    						moto: 7,
    						other: 9,
    						taxi: 4,
    						train_metro: 7
    					},
    					change: {
    						bicycle: 6,
    						bus: 7,
    						car_van: 4,
    						foot: 7,
    						home: 7,
    						moto: 2,
    						other: 5,
    						taxi: 2,
    						train_metro: 4
    					}
    				},
    				value: {
    					"2001": {
    						all: 2323503,
    						bicycle: 52311,
    						bus: 203010,
    						car_van: 1562988,
    						foot: 220963,
    						home: 208823,
    						moto: 20602,
    						other: 6293,
    						taxi: 10133,
    						train_metro: 38380
    					},
    					"2011": {
    						all: 2536876,
    						bicycle: 50388,
    						bus: 194723,
    						car_van: 1804586,
    						foot: 251452,
    						home: 121260,
    						moto: 16370,
    						other: 13552,
    						taxi: 13319,
    						train_metro: 71226
    					},
    					change: {
    						all: 9.18,
    						bicycle: -3.68,
    						bus: -4.08,
    						car_van: 15.46,
    						foot: 13.8,
    						home: -41.93,
    						moto: -20.54,
    						other: 115.35,
    						taxi: 31.44,
    						train_metro: 85.58
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						bicycle: 8,
    						bus: 4,
    						car_van: 3,
    						foot: 6,
    						home: 6,
    						moto: 7,
    						other: 7,
    						taxi: 6,
    						train_metro: 5
    					},
    					"2011": {
    						all: 5,
    						bicycle: 8,
    						bus: 4,
    						car_van: 3,
    						foot: 7,
    						home: 6,
    						moto: 6,
    						other: 7,
    						taxi: 5,
    						train_metro: 5
    					},
    					change: {
    						all: 8,
    						bicycle: 8,
    						bus: 8,
    						car_van: 7,
    						foot: 9,
    						home: 8,
    						moto: 6,
    						other: 3,
    						taxi: 2,
    						train_metro: 5
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6.45,
    						"Female16-30": 13.42,
    						"Female31-48": 22.85,
    						Female49plus: 2.71,
    						"Male1-15": 1.72,
    						"Male16-30": 3.14,
    						"Male31-48": 37.18,
    						Male49plus: 12.53
    					},
    					"2011": {
    						"Female1-15": 6.5,
    						"Female16-30": 14.75,
    						"Female31-48": 22.91,
    						Female49plus: 2.68,
    						"Male1-15": 2.98,
    						"Male16-30": 5.46,
    						"Male31-48": 35.33,
    						Male49plus: 9.39
    					},
    					change: {
    						"Female1-15": 0.05,
    						"Female16-30": 1.33,
    						"Female31-48": 0.06,
    						Female49plus: -0.03,
    						"Male1-15": 1.26,
    						"Male16-30": 2.32,
    						"Male31-48": -1.85,
    						Male49plus: -3.14
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 6,
    						"Female16-30": 6,
    						"Female31-48": 4,
    						Female49plus: 6,
    						"Male1-15": 8,
    						"Male16-30": 7,
    						"Male31-48": 2,
    						Male49plus: 7
    					},
    					"2011": {
    						"Female1-15": 5,
    						"Female16-30": 6,
    						"Female31-48": 4,
    						Female49plus: 5,
    						"Male1-15": 7,
    						"Male16-30": 4,
    						"Male31-48": 1,
    						Male49plus: 6
    					},
    					change: {
    						"Female1-15": 5,
    						"Female16-30": 5,
    						"Female31-48": 8,
    						Female49plus: 5,
    						"Male1-15": 3,
    						"Male16-30": 2,
    						"Male31-48": 8,
    						Male49plus: 5
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 150610,
    						"Female16-30": 313291,
    						"Female31-48": 533410,
    						Female49plus: 63251,
    						"Male1-15": 40159,
    						"Male16-30": 73335,
    						"Male31-48": 868041,
    						Male49plus: 292470,
    						all: 2334567
    					},
    					"2011": {
    						"Female1-15": 164980,
    						"Female16-30": 374145,
    						"Female31-48": 581216,
    						Female49plus: 67993,
    						"Male1-15": 75522,
    						"Male16-30": 138545,
    						"Male31-48": 896202,
    						Male49plus: 238273,
    						all: 2536876
    					},
    					change: {
    						"Female1-15": 9.54,
    						"Female16-30": 19.42,
    						"Female31-48": 8.96,
    						Female49plus: 7.5,
    						"Male1-15": 88.06,
    						"Male16-30": 88.92,
    						"Male31-48": 3.24,
    						Male49plus: -18.53,
    						all: 8.67
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 5,
    						"Female16-30": 5,
    						"Female31-48": 4,
    						Female49plus: 5,
    						"Male1-15": 5,
    						"Male16-30": 5,
    						"Male31-48": 4,
    						Male49plus: 5,
    						all: 5
    					},
    					"2011": {
    						"Female1-15": 5,
    						"Female16-30": 5,
    						"Female31-48": 5,
    						Female49plus: 5,
    						"Male1-15": 5,
    						"Male16-30": 4,
    						"Male31-48": 5,
    						Male49plus: 5,
    						all: 5
    					},
    					change: {
    						"Female1-15": 7,
    						"Female16-30": 8,
    						"Female31-48": 9,
    						Female49plus: 5,
    						"Male1-15": 5,
    						"Male16-30": 2,
    						"Male31-48": 9,
    						Male49plus: 9,
    						all: 9
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 69.09,
    						rent_free: 2.52,
    						rented_private: 7.25,
    						rented_social: 20.46,
    						shared_ownership: 0.67
    					},
    					"2011": {
    						owned: 64.89,
    						rent_free: 1.47,
    						rented_private: 14.02,
    						rented_social: 18.96,
    						shared_ownership: 0.66
    					},
    					change: {
    						owned: -4.2,
    						rent_free: -1.05,
    						rented_private: 6.77,
    						rented_social: -1.5,
    						shared_ownership: -0.01
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 5,
    						rent_free: 1,
    						rented_private: 8,
    						rented_social: 4,
    						shared_ownership: 3
    					},
    					"2011": {
    						owned: 5,
    						rent_free: 1,
    						rented_private: 8,
    						rented_social: 3,
    						shared_ownership: 5
    					},
    					change: {
    						owned: 3,
    						rent_free: 9,
    						rented_private: 4,
    						rented_social: 4,
    						shared_ownership: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 2168158,
    						owned: 1498066,
    						rent_free: 54696,
    						rented_private: 157266,
    						rented_social: 443644,
    						shared_ownership: 14486
    					},
    					"2011": {
    						all: 2294909,
    						owned: 1489094,
    						rent_free: 33745,
    						rented_private: 321670,
    						rented_social: 435170,
    						shared_ownership: 15230
    					},
    					change: {
    						all: 5.85,
    						owned: -0.6,
    						rent_free: -38.3,
    						rented_private: 104.54,
    						rented_social: -1.91,
    						shared_ownership: 5.14
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 4,
    						owned: 5,
    						rent_free: 3,
    						rented_private: 7,
    						rented_social: 3,
    						shared_ownership: 4
    					},
    					"2011": {
    						all: 4,
    						owned: 5,
    						rent_free: 4,
    						rented_private: 6,
    						rented_social: 4,
    						shared_ownership: 5
    					},
    					change: {
    						all: 8,
    						owned: 7,
    						rent_free: 9,
    						rented_private: 1,
    						rented_social: 6,
    						shared_ownership: 6
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 4.05
    					},
    					"2011": {
    						all: 4.31
    					},
    					change: {
    						all: 0.2599999999999998
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3
    					},
    					"2011": {
    						all: 3
    					},
    					change: {
    						all: 7
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.58,
    						"10-19": 13.35,
    						"20-29": 12.09,
    						"30-39": 15.03,
    						"40-49": 13.14,
    						"50-59": 12.78,
    						"60-69": 9.55,
    						"70-79": 4.06,
    						"80plus": 7.42
    					},
    					"2011": {
    						"0-9": 12.17,
    						"10-19": 12.68,
    						"20-29": 13.28,
    						"30-39": 12.56,
    						"40-49": 14.46,
    						"50-59": 11.97,
    						"60-69": 10.98,
    						"70-79": 4.03,
    						"80plus": 7.86
    					},
    					change: {
    						"0-9": -0.41,
    						"10-19": -0.67,
    						"20-29": 1.19,
    						"30-39": -2.47,
    						"40-49": 1.32,
    						"50-59": -0.81,
    						"60-69": 1.43,
    						"70-79": -0.03,
    						"80plus": 0.44
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 2,
    						"10-19": 2,
    						"20-29": 3,
    						"30-39": 7,
    						"40-49": 8,
    						"50-59": 5,
    						"60-69": 5,
    						"70-79": 5,
    						"80plus": 6
    					},
    					"2011": {
    						"0-9": 2,
    						"10-19": 1,
    						"20-29": 5,
    						"30-39": 4,
    						"40-49": 8,
    						"50-59": 8,
    						"60-69": 7,
    						"70-79": 5,
    						"80plus": 6
    					},
    					change: {
    						"0-9": 3,
    						"10-19": 6,
    						"20-29": 4,
    						"30-39": 4,
    						"40-49": 5,
    						"50-59": 9,
    						"60-69": 7,
    						"70-79": 2,
    						"80plus": 3
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 662730,
    						"10-19": 702949,
    						"20-29": 637033,
    						"30-39": 791932,
    						"40-49": 692216,
    						"50-59": 673167,
    						"60-69": 502810,
    						"70-79": 213841,
    						"80plus": 390631,
    						all: 5267309
    					},
    					"2011": {
    						"0-9": 681861,
    						"10-19": 710070,
    						"20-29": 744195,
    						"30-39": 703398,
    						"40-49": 810277,
    						"50-59": 670806,
    						"60-69": 615069,
    						"70-79": 225885,
    						"80plus": 440286,
    						all: 5601847
    					},
    					change: {
    						"0-9": 2.89,
    						"10-19": 1.01,
    						"20-29": 16.82,
    						"30-39": -11.18,
    						"40-49": 17.06,
    						"50-59": -0.35,
    						"60-69": 22.33,
    						"70-79": 5.63,
    						"80plus": 12.71,
    						all: 6.35
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 4,
    						"10-19": 4,
    						"20-29": 4,
    						"30-39": 4,
    						"40-49": 4,
    						"50-59": 4,
    						"60-69": 4,
    						"70-79": 4,
    						"80plus": 4,
    						all: 4
    					},
    					"2011": {
    						"0-9": 4,
    						"10-19": 4,
    						"20-29": 4,
    						"30-39": 5,
    						"40-49": 4,
    						"50-59": 4,
    						"60-69": 3,
    						"70-79": 3,
    						"80plus": 4,
    						all: 4
    					},
    					change: {
    						"0-9": 4,
    						"10-19": 6,
    						"20-29": 7,
    						"30-39": 4,
    						"40-49": 6,
    						"50-59": 9,
    						"60-69": 6,
    						"70-79": 5,
    						"80plus": 3,
    						all: 7
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 37
    					},
    					"2011": {
    						all: 39
    					},
    					change: {
    						all: 2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 8
    					},
    					"2011": {
    						all: 6
    					},
    					change: {
    						all: 2
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000002",
    		name: "North West",
    		type: "rgn",
    		area: 1410534.6,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E06000006",
    				name: "Halton",
    				type: "lad"
    			},
    			{
    				code: "E06000007",
    				name: "Warrington",
    				type: "lad"
    			},
    			{
    				code: "E06000008",
    				name: "Blackburn with Darwen",
    				type: "lad"
    			},
    			{
    				code: "E06000009",
    				name: "Blackpool",
    				type: "lad"
    			},
    			{
    				code: "E06000049",
    				name: "Cheshire East",
    				type: "lad"
    			},
    			{
    				code: "E06000050",
    				name: "Cheshire West and Chester",
    				type: "lad"
    			},
    			{
    				code: "E08000001",
    				name: "Bolton",
    				type: "lad"
    			},
    			{
    				code: "E08000002",
    				name: "Bury",
    				type: "lad"
    			},
    			{
    				code: "E08000003",
    				name: "Manchester",
    				type: "lad"
    			},
    			{
    				code: "E08000004",
    				name: "Oldham",
    				type: "lad"
    			},
    			{
    				code: "E08000005",
    				name: "Rochdale",
    				type: "lad"
    			},
    			{
    				code: "E08000006",
    				name: "Salford",
    				type: "lad"
    			},
    			{
    				code: "E08000007",
    				name: "Stockport",
    				type: "lad"
    			},
    			{
    				code: "E08000008",
    				name: "Tameside",
    				type: "lad"
    			},
    			{
    				code: "E08000009",
    				name: "Trafford",
    				type: "lad"
    			},
    			{
    				code: "E08000010",
    				name: "Wigan",
    				type: "lad"
    			},
    			{
    				code: "E08000011",
    				name: "Knowsley",
    				type: "lad"
    			},
    			{
    				code: "E08000012",
    				name: "Liverpool",
    				type: "lad"
    			},
    			{
    				code: "E08000013",
    				name: "St. Helens",
    				type: "lad"
    			},
    			{
    				code: "E08000014",
    				name: "Sefton",
    				type: "lad"
    			},
    			{
    				code: "E08000015",
    				name: "Wirral",
    				type: "lad"
    			},
    			{
    				code: "E10000006",
    				name: "Cumbria",
    				type: "cty"
    			},
    			{
    				code: "E10000017",
    				name: "Lancashire",
    				type: "cty"
    			}
    		],
    		bounds: [
    			[
    				-3.6406,
    				52.94715
    			],
    			[
    				-1.90962,
    				55.18898
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.57,
    						male: 48.43
    					},
    					"2011": {
    						female: 50.87,
    						male: 49.13
    					},
    					change: {
    						female: -0.7,
    						male: 0.7
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 2,
    						male: 8
    					},
    					"2011": {
    						female: 4,
    						male: 6
    					},
    					change: {
    						female: 8,
    						male: 2
    					}
    				},
    				value: {
    					"2001": {
    						all: 6729764,
    						female: 3470810,
    						male: 3258954
    					},
    					"2011": {
    						all: 7052177,
    						female: 3587492,
    						male: 3464685
    					},
    					change: {
    						all: 4.79,
    						female: 3.36,
    						male: 6.31
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						female: 3,
    						male: 3
    					},
    					"2011": {
    						all: 3,
    						female: 3,
    						male: 3
    					},
    					change: {
    						all: 8,
    						female: 8,
    						male: 8
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 7.03,
    						"20to49hoursWeek": 1.3,
    						"40PlushoursWeek": 2.44,
    						noCare: 89.23
    					},
    					"2011": {
    						"1to19hoursWeek": 6.66,
    						"20to49hoursWeek": 1.6,
    						"40PlushoursWeek": 2.83,
    						noCare: 88.91
    					},
    					change: {
    						"1to19hoursWeek": -0.37,
    						"20to49hoursWeek": 0.3,
    						"40PlushoursWeek": 0.39,
    						noCare: -0.32
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 2,
    						noCare: 8
    					},
    					"2011": {
    						"1to19hoursWeek": 5,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 2,
    						noCare: 9
    					},
    					change: {
    						"1to19hoursWeek": 6,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 3,
    						noCare: 4
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 473083,
    						"20to49hoursWeek": 87407,
    						"40PlushoursWeek": 164312,
    						all: 6729764,
    						noCare: 6004962
    					},
    					"2011": {
    						"1to19hoursWeek": 469493,
    						"20to49hoursWeek": 113003,
    						"40PlushoursWeek": 199476,
    						all: 7052177,
    						noCare: 6270205
    					},
    					change: {
    						"1to19hoursWeek": -0.76,
    						"20to49hoursWeek": 29.28,
    						"40PlushoursWeek": 21.4,
    						all: 4.79,
    						noCare: 4.42
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						all: 3,
    						noCare: 3
    					},
    					"2011": {
    						"1to19hoursWeek": 2,
    						"20to49hoursWeek": 1,
    						"40PlushoursWeek": 1,
    						all: 3,
    						noCare: 3
    					},
    					change: {
    						"1to19hoursWeek": 7,
    						"20to49hoursWeek": 7,
    						"40PlushoursWeek": 7,
    						all: 8,
    						noCare: 8
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.18,
    						Christian: 78.01,
    						Hindu: 0.4,
    						Jewish: 0.42,
    						Muslim: 3.04,
    						Noreligion: 10.48,
    						Otherreligion: 0.16,
    						Religionnotstated: 7.23,
    						Sikh: 0.1
    					},
    					"2011": {
    						Buddhist: 0.29,
    						Christian: 67.25,
    						Hindu: 0.54,
    						Jewish: 0.43,
    						Muslim: 5.05,
    						Noreligion: 19.82,
    						Otherreligion: 0.27,
    						Religionnotstated: 6.2,
    						Sikh: 0.13
    					},
    					change: {
    						Buddhist: 0.11,
    						Christian: -10.76,
    						Hindu: 0.14,
    						Jewish: 0.01,
    						Muslim: 2.01,
    						Noreligion: 9.34,
    						Otherreligion: 0.11,
    						Religionnotstated: -1.03,
    						Sikh: 0.03
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 6,
    						Christian: 2,
    						Hindu: 6,
    						Jewish: 3,
    						Muslim: 4,
    						Noreligion: 9,
    						Otherreligion: 8,
    						Religionnotstated: 8,
    						Sikh: 9
    					},
    					"2011": {
    						Buddhist: 6,
    						Christian: 2,
    						Hindu: 6,
    						Jewish: 3,
    						Muslim: 4,
    						Noreligion: 9,
    						Otherreligion: 8,
    						Religionnotstated: 8,
    						Sikh: 8
    					},
    					change: {
    						Buddhist: 7,
    						Christian: 2,
    						Hindu: 6,
    						Jewish: 3,
    						Muslim: 4,
    						Noreligion: 8,
    						Otherreligion: 6,
    						Religionnotstated: 9,
    						Sikh: 8
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 11794,
    						Christian: 5249686,
    						Hindu: 27211,
    						Jewish: 27974,
    						Muslim: 204261,
    						Noreligion: 705045,
    						Otherreligion: 10625,
    						Religionnotstated: 486681,
    						Sikh: 6489,
    						all: 6729766
    					},
    					"2011": {
    						Buddhist: 20695,
    						Christian: 4742860,
    						Hindu: 38259,
    						Jewish: 30417,
    						Muslim: 356458,
    						Noreligion: 1397916,
    						Otherreligion: 19166,
    						Religionnotstated: 437549,
    						Sikh: 8857,
    						all: 7052177
    					},
    					change: {
    						Buddhist: 75.47,
    						Christian: -9.65,
    						Hindu: 40.6,
    						Jewish: 8.73,
    						Muslim: 74.51,
    						Noreligion: 98.27,
    						Otherreligion: 80.39,
    						Religionnotstated: -10.1,
    						Sikh: 36.49,
    						all: 4.79
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 3,
    						Christian: 2,
    						Hindu: 6,
    						Jewish: 3,
    						Muslim: 3,
    						Noreligion: 4,
    						Otherreligion: 6,
    						Religionnotstated: 3,
    						Sikh: 7,
    						all: 3
    					},
    					"2011": {
    						Buddhist: 4,
    						Christian: 2,
    						Hindu: 6,
    						Jewish: 3,
    						Muslim: 3,
    						Noreligion: 4,
    						Otherreligion: 6,
    						Religionnotstated: 3,
    						Sikh: 7,
    						all: 3
    					},
    					change: {
    						Buddhist: 5,
    						Christian: 2,
    						Hindu: 7,
    						Jewish: 3,
    						Muslim: 5,
    						Noreligion: 2,
    						Otherreligion: 3,
    						Religionnotstated: 8,
    						Sikh: 2,
    						all: 8
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 3.82,
    						black: 0.62,
    						mixed: 0.93,
    						other: 0.2,
    						white: 94.44
    					},
    					"2011": {
    						asian: 6.2,
    						black: 1.39,
    						mixed: 1.57,
    						other: 0.63,
    						white: 90.21
    					},
    					change: {
    						asian: 2.38,
    						black: 0.77,
    						mixed: 0.64,
    						other: 0.43,
    						white: -4.23
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 5,
    						black: 7,
    						mixed: 6,
    						other: 5,
    						white: 5
    					},
    					"2011": {
    						asian: 5,
    						black: 7,
    						mixed: 7,
    						other: 4,
    						white: 5
    					},
    					change: {
    						asian: 5,
    						black: 7,
    						mixed: 7,
    						other: 4,
    						white: 3
    					}
    				},
    				value: {
    					"2001": {
    						all: 6729763,
    						asian: 256762,
    						black: 41636,
    						mixed: 62539,
    						other: 13331,
    						white: 6355495
    					},
    					"2011": {
    						all: 7052177,
    						asian: 437485,
    						black: 97869,
    						mixed: 110891,
    						other: 44216,
    						white: 6361716
    					},
    					change: {
    						all: 4.79,
    						asian: 70.39,
    						black: 135.06,
    						mixed: 77.31,
    						other: 231.68,
    						white: 0.1
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						asian: 3,
    						black: 5,
    						mixed: 4,
    						other: 5,
    						white: 2
    					},
    					"2011": {
    						all: 3,
    						asian: 3,
    						black: 5,
    						mixed: 4,
    						other: 4,
    						white: 2
    					},
    					change: {
    						all: 8,
    						asian: 5,
    						black: 5,
    						mixed: 9,
    						other: 4,
    						white: 7
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 10.95,
    						fair: 22.16,
    						good: 66.88
    					},
    					"2011": {
    						bad: 6.79,
    						fair: 13.93,
    						good: 79.28
    					},
    					change: {
    						bad: -4.16,
    						fair: -8.23,
    						good: 12.4
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 2,
    						fair: 6,
    						good: 8
    					},
    					"2011": {
    						bad: 2,
    						fair: 5,
    						good: 8
    					},
    					change: {
    						bad: 7,
    						fair: 1,
    						good: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 6729764,
    						bad: 737114,
    						fair: 1491467,
    						good: 4501183
    					},
    					"2011": {
    						all: 7052177,
    						bad: 478698,
    						fair: 982586,
    						good: 5590893
    					},
    					change: {
    						all: 4.79,
    						bad: -35.06,
    						fair: -34.12,
    						good: 24.21
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						bad: 1,
    						fair: 3,
    						good: 3
    					},
    					"2011": {
    						all: 3,
    						bad: 1,
    						fair: 2,
    						good: 3
    					},
    					change: {
    						all: 8,
    						bad: 7,
    						fair: 2,
    						good: 8
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 50.64,
    						inactive: 36.09,
    						"self-employed": 7.1,
    						student: 2.54,
    						unemployed: 3.63
    					},
    					"2011": {
    						employee: 51.42,
    						inactive: 32.18,
    						"self-employed": 8.18,
    						student: 3.54,
    						unemployed: 4.68
    					},
    					change: {
    						employee: 0.78,
    						inactive: -3.91,
    						"self-employed": 1.08,
    						student: 1,
    						unemployed: 1.05
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 8,
    						inactive: 2,
    						"self-employed": 8,
    						student: 4,
    						unemployed: 5
    					},
    					"2011": {
    						employee: 7,
    						inactive: 2,
    						"self-employed": 8,
    						student: 2,
    						unemployed: 5
    					},
    					change: {
    						employee: 2,
    						inactive: 7,
    						"self-employed": 8,
    						student: 2,
    						unemployed: 5
    					}
    				},
    				value: {
    					"2001": {
    						all: 4839669,
    						employee: 2450710,
    						inactive: 1746483,
    						"self-employed": 343847,
    						student: 123080,
    						unemployed: 175549
    					},
    					"2011": {
    						all: 5184216,
    						employee: 2665979,
    						inactive: 1668306,
    						"self-employed": 423916,
    						student: 183516,
    						unemployed: 242499
    					},
    					change: {
    						all: 7.12,
    						employee: 8.78,
    						inactive: -4.48,
    						"self-employed": 23.29,
    						student: 49.1,
    						unemployed: 38.14
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						employee: 3,
    						inactive: 1,
    						"self-employed": 3,
    						student: 3,
    						unemployed: 2
    					},
    					"2011": {
    						all: 3,
    						employee: 3,
    						inactive: 2,
    						"self-employed": 3,
    						student: 3,
    						unemployed: 2
    					},
    					change: {
    						all: 8,
    						employee: 4,
    						inactive: 8,
    						"self-employed": 7,
    						student: 4,
    						unemployed: 7
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 30.44,
    						NoKids: 59.26,
    						NonDepKids: 10.3
    					},
    					"2011": {
    						Kids: 28.82,
    						NoKids: 60.76,
    						NonDepKids: 10.43
    					},
    					change: {
    						Kids: -1.62,
    						NoKids: 1.5,
    						NonDepKids: 0.13
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 2,
    						NoKids: 8,
    						NonDepKids: 2
    					},
    					"2011": {
    						Kids: 5,
    						NoKids: 7,
    						NonDepKids: 3
    					},
    					change: {
    						Kids: 8,
    						NoKids: 2,
    						NonDepKids: 7
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 856185,
    						NoKids: 1666864,
    						NonDepKids: 289738,
    						all: 2812787
    					},
    					"2011": {
    						Kids: 867266,
    						NoKids: 1828493,
    						NonDepKids: 313790,
    						all: 3009549
    					},
    					change: {
    						Kids: 1.29,
    						NoKids: 9.7,
    						NonDepKids: 8.3,
    						all: 7
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 3,
    						NoKids: 3,
    						NonDepKids: 1,
    						all: 3
    					},
    					"2011": {
    						Kids: 3,
    						NoKids: 3,
    						NonDepKids: 1,
    						all: 3
    					},
    					change: {
    						Kids: 8,
    						NoKids: 4,
    						NonDepKids: 7,
    						all: 7
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 8.49,
    						Cohabiting: 7.88,
    						LoneParent: 11.14,
    						Married: 35.88,
    						OnePerson: 30.94,
    						Other: 5.68
    					},
    					"2011": {
    						"65andOver": 7.79,
    						Cohabiting: 9.81,
    						LoneParent: 11.99,
    						Married: 31.65,
    						OnePerson: 32.21,
    						Other: 6.56
    					},
    					change: {
    						"65andOver": -0.7,
    						Cohabiting: 1.93,
    						LoneParent: 0.85,
    						Married: -4.23,
    						OnePerson: 1.27,
    						Other: 0.88
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 8,
    						Cohabiting: 8,
    						LoneParent: 1,
    						Married: 8,
    						OnePerson: 2,
    						Other: 6
    					},
    					"2011": {
    						"65andOver": 8,
    						Cohabiting: 7,
    						LoneParent: 2,
    						Married: 8,
    						OnePerson: 1,
    						Other: 8
    					},
    					change: {
    						"65andOver": 3,
    						Cohabiting: 3,
    						LoneParent: 9,
    						Married: 7,
    						OnePerson: 1,
    						Other: 7
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 238711,
    						Cohabiting: 221512,
    						LoneParent: 313347,
    						Married: 1009116,
    						OnePerson: 870234,
    						Other: 159867,
    						all: 2812787
    					},
    					"2011": {
    						"65andOver": 234507,
    						Cohabiting: 295110,
    						LoneParent: 360761,
    						Married: 952574,
    						OnePerson: 969302,
    						Other: 197295,
    						all: 3009549
    					},
    					change: {
    						"65andOver": -1.76,
    						Cohabiting: 33.23,
    						LoneParent: 15.13,
    						Married: -5.6,
    						OnePerson: 11.38,
    						Other: 23.41,
    						all: 7
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 2,
    						Cohabiting: 3,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 3,
    						Other: 3,
    						all: 3
    					},
    					"2011": {
    						"65andOver": 2,
    						Cohabiting: 2,
    						LoneParent: 2,
    						Married: 2,
    						OnePerson: 3,
    						Other: 3,
    						all: 3
    					},
    					change: {
    						"65andOver": 6,
    						Cohabiting: 2,
    						LoneParent: 9,
    						Married: 7,
    						OnePerson: 3,
    						Other: 8,
    						all: 7
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 49.82,
    						Seperated: 11.04,
    						Single: 30.14,
    						Widowed: 9
    					},
    					"2011": {
    						Married: 44.95,
    						Seperated: 11.96,
    						Single: 35.62,
    						Widowed: 7.47
    					},
    					change: {
    						Married: -4.87,
    						Seperated: 0.92,
    						Single: 5.48,
    						Widowed: -1.53
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 8,
    						Seperated: 1,
    						Single: 2,
    						Widowed: 2
    					},
    					"2011": {
    						Married: 8,
    						Seperated: 3,
    						Single: 2,
    						Widowed: 2
    					},
    					change: {
    						Married: 6,
    						Seperated: 8,
    						Single: 1,
    						Widowed: 8
    					}
    				},
    				value: {
    					"2001": {
    						Married: 2659254,
    						Seperated: 589234,
    						Single: 1608942,
    						Widowed: 480125,
    						all: 5337555
    					},
    					"2011": {
    						Married: 2574615,
    						Seperated: 684937,
    						Single: 2040367,
    						Widowed: 427710,
    						all: 5727629
    					},
    					change: {
    						Married: -3.18,
    						Seperated: 16.24,
    						Single: 26.81,
    						Widowed: -10.92,
    						all: 7.31
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 2,
    						Seperated: 3,
    						Single: 3,
    						Widowed: 2,
    						all: 3
    					},
    					"2011": {
    						Married: 3,
    						Seperated: 3,
    						Single: 3,
    						Widowed: 2,
    						all: 3
    					},
    					change: {
    						Married: 8,
    						Seperated: 9,
    						Single: 4,
    						Widowed: 7,
    						all: 8
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 2.26,
    						bus: 8.58,
    						car_van: 66.2,
    						foot: 10.15,
    						home: 8.35,
    						moto: 0.92,
    						other: 0.31,
    						taxi: 0.8,
    						train_metro: 2.43
    					},
    					"2011": {
    						bicycle: 2.19,
    						bus: 8.27,
    						car_van: 68.72,
    						foot: 10.9,
    						home: 4.46,
    						moto: 0.62,
    						other: 0.62,
    						taxi: 0.81,
    						train_metro: 3.41
    					},
    					change: {
    						bicycle: -0.07,
    						bus: -0.31,
    						car_van: 2.52,
    						foot: 0.75,
    						home: -3.89,
    						moto: -0.3,
    						other: 0.31,
    						taxi: 0.01,
    						train_metro: 0.98
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 6,
    						bus: 5,
    						car_van: 4,
    						foot: 6,
    						home: 7,
    						moto: 7,
    						other: 7,
    						taxi: 1,
    						train_metro: 4
    					},
    					"2011": {
    						bicycle: 7,
    						bus: 4,
    						car_van: 3,
    						foot: 5,
    						home: 8,
    						moto: 8,
    						other: 5,
    						taxi: 1,
    						train_metro: 5
    					},
    					change: {
    						bicycle: 4,
    						bus: 3,
    						car_van: 5,
    						foot: 4,
    						home: 3,
    						moto: 6,
    						other: 3,
    						taxi: 4,
    						train_metro: 6
    					}
    				},
    				value: {
    					"2001": {
    						all: 2902784,
    						bicycle: 65566,
    						bus: 248964,
    						car_van: 1921615,
    						foot: 294674,
    						home: 242474,
    						moto: 26836,
    						other: 8934,
    						taxi: 23227,
    						train_metro: 70494
    					},
    					"2011": {
    						all: 3228744,
    						bicycle: 70557,
    						bus: 267140,
    						car_van: 2218860,
    						foot: 351807,
    						home: 144079,
    						moto: 19988,
    						other: 19863,
    						taxi: 26302,
    						train_metro: 110148
    					},
    					change: {
    						all: 11.23,
    						bicycle: 7.61,
    						bus: 7.3,
    						car_van: 15.47,
    						foot: 19.39,
    						home: -40.58,
    						moto: -25.52,
    						other: 122.33,
    						taxi: 13.24,
    						train_metro: 56.25
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						bicycle: 4,
    						bus: 2,
    						car_van: 2,
    						foot: 2,
    						home: 3,
    						moto: 4,
    						other: 3,
    						taxi: 1,
    						train_metro: 3
    					},
    					"2011": {
    						all: 3,
    						bicycle: 5,
    						bus: 2,
    						car_van: 2,
    						foot: 3,
    						home: 5,
    						moto: 5,
    						other: 3,
    						taxi: 1,
    						train_metro: 4
    					},
    					change: {
    						all: 7,
    						bicycle: 5,
    						bus: 3,
    						car_van: 6,
    						foot: 7,
    						home: 7,
    						moto: 8,
    						other: 2,
    						taxi: 6,
    						train_metro: 7
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 6,
    						"Female16-30": 14.13,
    						"Female31-48": 23.86,
    						Female49plus: 2.71,
    						"Male1-15": 1.74,
    						"Male16-30": 3.5,
    						"Male31-48": 37.02,
    						Male49plus: 11.05
    					},
    					"2011": {
    						"Female1-15": 5.99,
    						"Female16-30": 15.17,
    						"Female31-48": 24.12,
    						Female49plus: 2.53,
    						"Male1-15": 3.02,
    						"Male16-30": 5.58,
    						"Male31-48": 35.25,
    						Male49plus: 8.34
    					},
    					change: {
    						"Female1-15": -0.01,
    						"Female16-30": 1.04,
    						"Female31-48": 0.26,
    						Female49plus: -0.18,
    						"Male1-15": 1.28,
    						"Male16-30": 2.08,
    						"Male31-48": -1.77,
    						Male49plus: -2.71
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 8,
    						"Female16-30": 3,
    						"Female31-48": 2,
    						Female49plus: 6,
    						"Male1-15": 7,
    						"Male16-30": 3,
    						"Male31-48": 3,
    						Male49plus: 8
    					},
    					"2011": {
    						"Female1-15": 7,
    						"Female16-30": 5,
    						"Female31-48": 2,
    						Female49plus: 8,
    						"Male1-15": 4,
    						"Male16-30": 2,
    						"Male31-48": 3,
    						Male49plus: 9
    					},
    					change: {
    						"Female1-15": 7,
    						"Female16-30": 8,
    						"Female31-48": 4,
    						Female49plus: 8,
    						"Male1-15": 2,
    						"Male16-30": 3,
    						"Male31-48": 7,
    						Male49plus: 3
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 173990,
    						"Female16-30": 409763,
    						"Female31-48": 691894,
    						Female49plus: 78584,
    						"Male1-15": 50330,
    						"Male16-30": 101564,
    						"Male31-48": 1073540,
    						Male49plus: 320355,
    						all: 2900020
    					},
    					"2011": {
    						"Female1-15": 193500,
    						"Female16-30": 489669,
    						"Female31-48": 778825,
    						Female49plus: 81833,
    						"Male1-15": 97537,
    						"Male16-30": 180037,
    						"Male31-48": 1138158,
    						Male49plus: 269185,
    						all: 3228744
    					},
    					change: {
    						"Female1-15": 11.21,
    						"Female16-30": 19.5,
    						"Female31-48": 12.56,
    						Female49plus: 4.13,
    						"Male1-15": 93.79,
    						"Male16-30": 77.26,
    						"Male31-48": 6.02,
    						Male49plus: -15.97,
    						all: 11.34
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 2,
    						"Female16-30": 2,
    						"Female31-48": 3,
    						Female49plus: 3,
    						"Male1-15": 3,
    						"Male16-30": 3,
    						"Male31-48": 3,
    						Male49plus: 4,
    						all: 3
    					},
    					"2011": {
    						"Female1-15": 3,
    						"Female16-30": 2,
    						"Female31-48": 3,
    						Female49plus: 3,
    						"Male1-15": 3,
    						"Male16-30": 3,
    						"Male31-48": 3,
    						Male49plus: 4,
    						all: 3
    					},
    					change: {
    						"Female1-15": 6,
    						"Female16-30": 7,
    						"Female31-48": 5,
    						Female49plus: 9,
    						"Male1-15": 3,
    						"Male16-30": 4,
    						"Male31-48": 7,
    						Male49plus: 6,
    						all: 5
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 68.85,
    						rent_free: 2.13,
    						rented_private: 8.48,
    						rented_social: 19.95,
    						shared_ownership: 0.58
    					},
    					"2011": {
    						owned: 64.51,
    						rent_free: 1.29,
    						rented_private: 15.38,
    						rented_social: 18.29,
    						shared_ownership: 0.52
    					},
    					change: {
    						owned: -4.34,
    						rent_free: -0.84,
    						rented_private: 6.9,
    						rented_social: -1.66,
    						shared_ownership: -0.06
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 6,
    						rent_free: 4,
    						rented_private: 7,
    						rented_social: 5,
    						shared_ownership: 5
    					},
    					"2011": {
    						owned: 6,
    						rent_free: 6,
    						rented_private: 5,
    						rented_social: 4,
    						shared_ownership: 7
    					},
    					change: {
    						owned: 4,
    						rent_free: 8,
    						rented_private: 2,
    						rented_social: 6,
    						shared_ownership: 8
    					}
    				},
    				value: {
    					"2001": {
    						all: 2829268,
    						owned: 1948010,
    						rent_free: 60169,
    						rented_private: 240037,
    						rented_social: 564573,
    						shared_ownership: 16479
    					},
    					"2011": {
    						all: 3009549,
    						owned: 1941564,
    						rent_free: 38818,
    						rented_private: 462899,
    						rented_social: 550481,
    						shared_ownership: 15787
    					},
    					change: {
    						all: 6.37,
    						owned: -0.33,
    						rent_free: -35.49,
    						rented_private: 92.84,
    						rented_social: -2.5,
    						shared_ownership: -4.2
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 3,
    						owned: 2,
    						rent_free: 1,
    						rented_private: 3,
    						rented_social: 2,
    						shared_ownership: 3
    					},
    					"2011": {
    						all: 3,
    						owned: 2,
    						rent_free: 3,
    						rented_private: 3,
    						rented_social: 2,
    						shared_ownership: 4
    					},
    					change: {
    						all: 7,
    						owned: 6,
    						rent_free: 8,
    						rented_private: 3,
    						rented_social: 7,
    						shared_ownership: 8
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 4.77
    					},
    					"2011": {
    						all: 5
    					},
    					change: {
    						all: 0.23000000000000043
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 2
    					},
    					change: {
    						all: 8
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.39,
    						"10-19": 13.41,
    						"20-29": 11.96,
    						"30-39": 15.09,
    						"40-49": 13.36,
    						"50-59": 12.7,
    						"60-69": 9.64,
    						"70-79": 4.05,
    						"80plus": 7.4
    					},
    					"2011": {
    						"0-9": 11.69,
    						"10-19": 12.33,
    						"20-29": 13.56,
    						"30-39": 12.47,
    						"40-49": 14.71,
    						"50-59": 12.4,
    						"60-69": 11.09,
    						"70-79": 4.05,
    						"80plus": 7.71
    					},
    					change: {
    						"0-9": -0.7,
    						"10-19": -1.08,
    						"20-29": 1.6,
    						"30-39": -2.62,
    						"40-49": 1.35,
    						"50-59": -0.3,
    						"60-69": 1.45,
    						"70-79": 0,
    						"80plus": 0.31
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 3,
    						"10-19": 1,
    						"20-29": 6,
    						"30-39": 5,
    						"40-49": 5,
    						"50-59": 6,
    						"60-69": 3,
    						"70-79": 6,
    						"80plus": 8
    					},
    					"2011": {
    						"0-9": 6,
    						"10-19": 4,
    						"20-29": 3,
    						"30-39": 6,
    						"40-49": 4,
    						"50-59": 4,
    						"60-69": 6,
    						"70-79": 4,
    						"80plus": 8
    					},
    					change: {
    						"0-9": 6,
    						"10-19": 9,
    						"20-29": 1,
    						"30-39": 6,
    						"40-49": 3,
    						"50-59": 3,
    						"60-69": 5,
    						"70-79": 1,
    						"80plus": 5
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 834073,
    						"10-19": 902730,
    						"20-29": 804960,
    						"30-39": 1015657,
    						"40-49": 899083,
    						"50-59": 854455,
    						"60-69": 648521,
    						"70-79": 272399,
    						"80plus": 497886,
    						all: 6729764
    					},
    					"2011": {
    						"0-9": 824257,
    						"10-19": 869244,
    						"20-29": 956222,
    						"30-39": 879734,
    						"40-49": 1037153,
    						"50-59": 874768,
    						"60-69": 781884,
    						"70-79": 285502,
    						"80plus": 543413,
    						all: 7052177
    					},
    					change: {
    						"0-9": -1.18,
    						"10-19": -3.71,
    						"20-29": 18.79,
    						"30-39": -13.38,
    						"40-49": 15.36,
    						"50-59": 2.38,
    						"60-69": 20.56,
    						"70-79": 4.81,
    						"80plus": 9.14,
    						all: 4.79
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 3,
    						"10-19": 2,
    						"20-29": 3,
    						"30-39": 3,
    						"40-49": 3,
    						"50-59": 2,
    						"60-69": 2,
    						"70-79": 2,
    						"80plus": 2,
    						all: 3
    					},
    					"2011": {
    						"0-9": 3,
    						"10-19": 3,
    						"20-29": 3,
    						"30-39": 3,
    						"40-49": 3,
    						"50-59": 2,
    						"60-69": 2,
    						"70-79": 2,
    						"80plus": 2,
    						all: 3
    					},
    					change: {
    						"0-9": 8,
    						"10-19": 8,
    						"20-29": 3,
    						"30-39": 7,
    						"40-49": 8,
    						"50-59": 6,
    						"60-69": 7,
    						"70-79": 7,
    						"80plus": 8,
    						all: 8
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 38
    					},
    					"2011": {
    						all: 39
    					},
    					change: {
    						all: 1
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2
    					},
    					"2011": {
    						all: 6
    					},
    					change: {
    						all: 7
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	},
    	{
    		code: "E12000007",
    		name: "London",
    		type: "rgn",
    		area: 157215.08,
    		count: 9,
    		parents: [
    			{
    				code: "E92000001",
    				name: "England",
    				type: "ctry"
    			},
    			{
    				code: "K04000001",
    				name: "England and Wales",
    				type: "ew"
    			}
    		],
    		children: [
    			{
    				code: "E09000001",
    				name: "City of London",
    				type: "lad"
    			},
    			{
    				code: "E09000002",
    				name: "Barking and Dagenham",
    				type: "lad"
    			},
    			{
    				code: "E09000003",
    				name: "Barnet",
    				type: "lad"
    			},
    			{
    				code: "E09000004",
    				name: "Bexley",
    				type: "lad"
    			},
    			{
    				code: "E09000005",
    				name: "Brent",
    				type: "lad"
    			},
    			{
    				code: "E09000006",
    				name: "Bromley",
    				type: "lad"
    			},
    			{
    				code: "E09000007",
    				name: "Camden",
    				type: "lad"
    			},
    			{
    				code: "E09000008",
    				name: "Croydon",
    				type: "lad"
    			},
    			{
    				code: "E09000009",
    				name: "Ealing",
    				type: "lad"
    			},
    			{
    				code: "E09000010",
    				name: "Enfield",
    				type: "lad"
    			},
    			{
    				code: "E09000011",
    				name: "Greenwich",
    				type: "lad"
    			},
    			{
    				code: "E09000012",
    				name: "Hackney",
    				type: "lad"
    			},
    			{
    				code: "E09000013",
    				name: "Hammersmith and Fulham",
    				type: "lad"
    			},
    			{
    				code: "E09000014",
    				name: "Haringey",
    				type: "lad"
    			},
    			{
    				code: "E09000015",
    				name: "Harrow",
    				type: "lad"
    			},
    			{
    				code: "E09000016",
    				name: "Havering",
    				type: "lad"
    			},
    			{
    				code: "E09000017",
    				name: "Hillingdon",
    				type: "lad"
    			},
    			{
    				code: "E09000018",
    				name: "Hounslow",
    				type: "lad"
    			},
    			{
    				code: "E09000019",
    				name: "Islington",
    				type: "lad"
    			},
    			{
    				code: "E09000020",
    				name: "Kensington and Chelsea",
    				type: "lad"
    			},
    			{
    				code: "E09000021",
    				name: "Kingston upon Thames",
    				type: "lad"
    			},
    			{
    				code: "E09000022",
    				name: "Lambeth",
    				type: "lad"
    			},
    			{
    				code: "E09000023",
    				name: "Lewisham",
    				type: "lad"
    			},
    			{
    				code: "E09000024",
    				name: "Merton",
    				type: "lad"
    			},
    			{
    				code: "E09000025",
    				name: "Newham",
    				type: "lad"
    			},
    			{
    				code: "E09000026",
    				name: "Redbridge",
    				type: "lad"
    			},
    			{
    				code: "E09000027",
    				name: "Richmond upon Thames",
    				type: "lad"
    			},
    			{
    				code: "E09000028",
    				name: "Southwark",
    				type: "lad"
    			},
    			{
    				code: "E09000029",
    				name: "Sutton",
    				type: "lad"
    			},
    			{
    				code: "E09000030",
    				name: "Tower Hamlets",
    				type: "lad"
    			},
    			{
    				code: "E09000031",
    				name: "Waltham Forest",
    				type: "lad"
    			},
    			{
    				code: "E09000032",
    				name: "Wandsworth",
    				type: "lad"
    			},
    			{
    				code: "E09000033",
    				name: "Westminster",
    				type: "lad"
    			}
    		],
    		bounds: [
    			[
    				-0.51038,
    				51.28676
    			],
    			[
    				0.33402,
    				51.69187
    			]
    		],
    		data: {
    			population: {
    				perc: {
    					"2001": {
    						female: 51.63,
    						male: 48.37
    					},
    					"2011": {
    						female: 50.66,
    						male: 49.34
    					},
    					change: {
    						female: -0.97,
    						male: 0.97
    					}
    				},
    				perc_rank: {
    					"2001": {
    						female: 1,
    						male: 9
    					},
    					"2011": {
    						female: 9,
    						male: 1
    					},
    					change: {
    						female: 9,
    						male: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 7172091,
    						female: 3703298,
    						male: 3468793
    					},
    					"2011": {
    						all: 8173941,
    						female: 4140652,
    						male: 4033289
    					},
    					change: {
    						all: 13.97,
    						female: 11.81,
    						male: 16.27
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						female: 2,
    						male: 2
    					},
    					"2011": {
    						all: 1,
    						female: 1,
    						male: 1
    					},
    					change: {
    						all: 1,
    						female: 1,
    						male: 1
    					}
    				}
    			},
    			care: {
    				perc: {
    					"2001": {
    						"1to19hoursWeek": 5.83,
    						"20to49hoursWeek": 1.01,
    						"40PlushoursWeek": 1.66,
    						noCare: 91.5
    					},
    					"2011": {
    						"1to19hoursWeek": 5.33,
    						"20to49hoursWeek": 1.29,
    						"40PlushoursWeek": 1.83,
    						noCare: 91.56
    					},
    					change: {
    						"1to19hoursWeek": -0.5,
    						"20to49hoursWeek": 0.28,
    						"40PlushoursWeek": 0.17,
    						noCare: 0.06
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 8,
    						noCare: 1
    					},
    					"2011": {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 9,
    						noCare: 1
    					},
    					change: {
    						"1to19hoursWeek": 9,
    						"20to49hoursWeek": 6,
    						"40PlushoursWeek": 9,
    						noCare: 1
    					}
    				},
    				value: {
    					"2001": {
    						"1to19hoursWeek": 417934,
    						"20to49hoursWeek": 72761,
    						"40PlushoursWeek": 119195,
    						all: 7172091,
    						noCare: 6562201
    					},
    					"2011": {
    						"1to19hoursWeek": 435278,
    						"20to49hoursWeek": 105399,
    						"40PlushoursWeek": 149296,
    						all: 8173941,
    						noCare: 7483968
    					},
    					change: {
    						"1to19hoursWeek": 4.15,
    						"20to49hoursWeek": 44.86,
    						"40PlushoursWeek": 25.25,
    						all: 13.97,
    						noCare: 14.05
    					}
    				},
    				value_rank: {
    					"2001": {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 4,
    						all: 2,
    						noCare: 2
    					},
    					"2011": {
    						"1to19hoursWeek": 3,
    						"20to49hoursWeek": 2,
    						"40PlushoursWeek": 4,
    						all: 1,
    						noCare: 1
    					},
    					change: {
    						"1to19hoursWeek": 4,
    						"20to49hoursWeek": 3,
    						"40PlushoursWeek": 6,
    						all: 1,
    						noCare: 1
    					}
    				}
    			},
    			religion: {
    				perc: {
    					"2001": {
    						Buddhist: 0.76,
    						Christian: 58.23,
    						Hindu: 4.07,
    						Jewish: 2.09,
    						Muslim: 8.46,
    						Noreligion: 15.76,
    						Otherreligion: 0.51,
    						Religionnotstated: 8.66,
    						Sikh: 1.45
    					},
    					"2011": {
    						Buddhist: 1,
    						Christian: 48.42,
    						Hindu: 5.03,
    						Jewish: 1.82,
    						Muslim: 12.39,
    						Noreligion: 20.73,
    						Otherreligion: 0.59,
    						Religionnotstated: 8.47,
    						Sikh: 1.54
    					},
    					change: {
    						Buddhist: 0.24,
    						Christian: -9.81,
    						Hindu: 0.96,
    						Jewish: -0.27,
    						Muslim: 3.93,
    						Noreligion: 4.97,
    						Otherreligion: 0.08,
    						Religionnotstated: -0.19,
    						Sikh: 0.09
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Buddhist: 1,
    						Christian: 9,
    						Hindu: 1,
    						Jewish: 1,
    						Muslim: 1,
    						Noreligion: 4,
    						Otherreligion: 1,
    						Religionnotstated: 1,
    						Sikh: 2
    					},
    					"2011": {
    						Buddhist: 1,
    						Christian: 9,
    						Hindu: 1,
    						Jewish: 1,
    						Muslim: 1,
    						Noreligion: 8,
    						Otherreligion: 1,
    						Religionnotstated: 1,
    						Sikh: 2
    					},
    					change: {
    						Buddhist: 1,
    						Christian: 1,
    						Hindu: 1,
    						Jewish: 9,
    						Muslim: 1,
    						Noreligion: 9,
    						Otherreligion: 9,
    						Religionnotstated: 3,
    						Sikh: 4
    					}
    				},
    				value: {
    					"2001": {
    						Buddhist: 54297,
    						Christian: 4176175,
    						Hindu: 291977,
    						Jewish: 149789,
    						Muslim: 607083,
    						Noreligion: 1130616,
    						Otherreligion: 36558,
    						Religionnotstated: 621366,
    						Sikh: 104230,
    						all: 7172091
    					},
    					"2011": {
    						Buddhist: 82026,
    						Christian: 3957984,
    						Hindu: 411291,
    						Jewish: 148602,
    						Muslim: 1012823,
    						Noreligion: 1694372,
    						Otherreligion: 47970,
    						Religionnotstated: 692739,
    						Sikh: 126134,
    						all: 8173941
    					},
    					change: {
    						Buddhist: 51.07,
    						Christian: -5.22,
    						Hindu: 40.86,
    						Jewish: -0.79,
    						Muslim: 66.83,
    						Noreligion: 49.86,
    						Otherreligion: 31.22,
    						Religionnotstated: 11.49,
    						Sikh: 21.02,
    						all: 13.97
    					}
    				},
    				value_rank: {
    					"2001": {
    						Buddhist: 1,
    						Christian: 3,
    						Hindu: 1,
    						Jewish: 1,
    						Muslim: 1,
    						Noreligion: 2,
    						Otherreligion: 1,
    						Religionnotstated: 1,
    						Sikh: 1,
    						all: 2
    					},
    					"2011": {
    						Buddhist: 1,
    						Christian: 3,
    						Hindu: 1,
    						Jewish: 1,
    						Muslim: 1,
    						Noreligion: 2,
    						Otherreligion: 1,
    						Religionnotstated: 1,
    						Sikh: 2,
    						all: 1
    					},
    					change: {
    						Buddhist: 9,
    						Christian: 1,
    						Hindu: 6,
    						Jewish: 6,
    						Muslim: 9,
    						Noreligion: 9,
    						Otherreligion: 9,
    						Religionnotstated: 1,
    						Sikh: 8,
    						all: 1
    					}
    				}
    			},
    			ethnicity: {
    				perc: {
    					"2001": {
    						asian: 13.2,
    						black: 10.92,
    						mixed: 3.15,
    						other: 1.58,
    						white: 71.15
    					},
    					"2011": {
    						asian: 18.49,
    						black: 13.32,
    						mixed: 4.96,
    						other: 3.44,
    						white: 59.79
    					},
    					change: {
    						asian: 5.29,
    						black: 2.4,
    						mixed: 1.81,
    						other: 1.86,
    						white: -11.36
    					}
    				},
    				perc_rank: {
    					"2001": {
    						asian: 1,
    						black: 1,
    						mixed: 1,
    						other: 1,
    						white: 9
    					},
    					"2011": {
    						asian: 1,
    						black: 1,
    						mixed: 1,
    						other: 1,
    						white: 9
    					},
    					change: {
    						asian: 1,
    						black: 1,
    						mixed: 1,
    						other: 1,
    						white: 9
    					}
    				},
    				value: {
    					"2001": {
    						all: 7172091,
    						asian: 946894,
    						black: 782849,
    						mixed: 226111,
    						other: 113034,
    						white: 5103203
    					},
    					"2011": {
    						all: 8173941,
    						asian: 1511546,
    						black: 1088640,
    						mixed: 405279,
    						other: 281041,
    						white: 4887435
    					},
    					change: {
    						all: 13.97,
    						asian: 59.63,
    						black: 39.06,
    						mixed: 79.24,
    						other: 148.63,
    						white: -4.23
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						asian: 1,
    						black: 1,
    						mixed: 1,
    						other: 1,
    						white: 3
    					},
    					"2011": {
    						all: 1,
    						asian: 1,
    						black: 1,
    						mixed: 1,
    						other: 1,
    						white: 4
    					},
    					change: {
    						all: 1,
    						asian: 8,
    						black: 9,
    						mixed: 8,
    						other: 6,
    						white: 9
    					}
    				}
    			},
    			health: {
    				perc: {
    					"2001": {
    						bad: 8.28,
    						fair: 20.9,
    						good: 70.82
    					},
    					"2011": {
    						bad: 4.96,
    						fair: 11.19,
    						good: 83.84
    					},
    					change: {
    						bad: -3.32,
    						fair: -9.71,
    						good: 13.02
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bad: 7,
    						fair: 9,
    						good: 2
    					},
    					"2011": {
    						bad: 7,
    						fair: 9,
    						good: 1
    					},
    					change: {
    						bad: 3,
    						fair: 9,
    						good: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 7172091,
    						bad: 593915,
    						fair: 1499198,
    						good: 5078978
    					},
    					"2011": {
    						all: 8173941,
    						bad: 405473,
    						fair: 915035,
    						good: 6853433
    					},
    					change: {
    						all: 13.97,
    						bad: -31.73,
    						fair: -38.97,
    						good: 34.94
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						bad: 2,
    						fair: 2,
    						good: 2
    					},
    					"2011": {
    						all: 1,
    						bad: 2,
    						fair: 3,
    						good: 1
    					},
    					change: {
    						all: 1,
    						bad: 1,
    						fair: 8,
    						good: 1
    					}
    				}
    			},
    			economic: {
    				perc: {
    					"2001": {
    						employee: 51.26,
    						inactive: 32.45,
    						"self-employed": 8.97,
    						student: 2.96,
    						unemployed: 4.36
    					},
    					"2011": {
    						employee: 50.74,
    						inactive: 28.33,
    						"self-employed": 11.65,
    						student: 4.06,
    						unemployed: 5.21
    					},
    					change: {
    						employee: -0.52,
    						inactive: -4.12,
    						"self-employed": 2.68,
    						student: 1.1,
    						unemployed: 0.85
    					}
    				},
    				perc_rank: {
    					"2001": {
    						employee: 7,
    						inactive: 6,
    						"self-employed": 4,
    						student: 1,
    						unemployed: 2
    					},
    					"2011": {
    						employee: 9,
    						inactive: 7,
    						"self-employed": 1,
    						student: 1,
    						unemployed: 2
    					},
    					change: {
    						employee: 6,
    						inactive: 8,
    						"self-employed": 1,
    						student: 1,
    						unemployed: 7
    					}
    				},
    				value: {
    					"2001": {
    						all: 5300332,
    						employee: 2716919,
    						inactive: 1719946,
    						"self-employed": 475409,
    						student: 157006,
    						unemployed: 231052
    					},
    					"2011": {
    						all: 6117482,
    						employee: 3104310,
    						inactive: 1733265,
    						"self-employed": 712893,
    						student: 248514,
    						unemployed: 318500
    					},
    					change: {
    						all: 15.42,
    						employee: 14.26,
    						inactive: 0.77,
    						"self-employed": 49.95,
    						student: 58.28,
    						unemployed: 37.85
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						employee: 2,
    						inactive: 2,
    						"self-employed": 2,
    						student: 1,
    						unemployed: 1
    					},
    					"2011": {
    						all: 1,
    						employee: 2,
    						inactive: 1,
    						"self-employed": 1,
    						student: 1,
    						unemployed: 1
    					},
    					change: {
    						all: 1,
    						employee: 1,
    						inactive: 4,
    						"self-employed": 1,
    						student: 1,
    						unemployed: 8
    					}
    				}
    			},
    			children: {
    				perc: {
    					"2001": {
    						Kids: 28.94,
    						NoKids: 62.4,
    						NonDepKids: 8.66
    					},
    					"2011": {
    						Kids: 30.92,
    						NoKids: 59.82,
    						NonDepKids: 9.26
    					},
    					change: {
    						Kids: 1.98,
    						NoKids: -2.58,
    						NonDepKids: 0.6
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Kids: 8,
    						NoKids: 2,
    						NonDepKids: 8
    					},
    					"2011": {
    						Kids: 1,
    						NoKids: 8,
    						NonDepKids: 7
    					},
    					change: {
    						Kids: 1,
    						NoKids: 9,
    						NonDepKids: 1
    					}
    				},
    				value: {
    					"2001": {
    						Kids: 872911,
    						NoKids: 1881971,
    						NonDepKids: 261115,
    						all: 3015997
    					},
    					"2011": {
    						Kids: 1009843,
    						NoKids: 1953906,
    						NonDepKids: 302424,
    						all: 3266173
    					},
    					change: {
    						Kids: 15.69,
    						NoKids: 3.82,
    						NonDepKids: 15.82,
    						all: 8.29
    					}
    				},
    				value_rank: {
    					"2001": {
    						Kids: 2,
    						NoKids: 2,
    						NonDepKids: 3,
    						all: 2
    					},
    					"2011": {
    						Kids: 1,
    						NoKids: 2,
    						NonDepKids: 3,
    						all: 2
    					},
    					change: {
    						Kids: 1,
    						NoKids: 9,
    						NonDepKids: 1,
    						all: 4
    					}
    				}
    			},
    			household: {
    				perc: {
    					"2001": {
    						"65andOver": 5.37,
    						Cohabiting: 8.1,
    						LoneParent: 11.14,
    						Married: 28.51,
    						OnePerson: 34.71,
    						Other: 12.17
    					},
    					"2011": {
    						"65andOver": 4.1,
    						Cohabiting: 8.66,
    						LoneParent: 12.66,
    						Married: 28.06,
    						OnePerson: 31.55,
    						Other: 14.96
    					},
    					change: {
    						"65andOver": -1.27,
    						Cohabiting: 0.56,
    						LoneParent: 1.52,
    						Married: -0.45,
    						OnePerson: -3.16,
    						Other: 2.79
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"65andOver": 9,
    						Cohabiting: 6,
    						LoneParent: 1,
    						Married: 9,
    						OnePerson: 1,
    						Other: 1
    					},
    					"2011": {
    						"65andOver": 9,
    						Cohabiting: 9,
    						LoneParent: 1,
    						Married: 9,
    						OnePerson: 3,
    						Other: 1
    					},
    					change: {
    						"65andOver": 9,
    						Cohabiting: 9,
    						LoneParent: 1,
    						Married: 1,
    						OnePerson: 9,
    						Other: 1
    					}
    				},
    				value: {
    					"2001": {
    						"65andOver": 161931,
    						Cohabiting: 244295,
    						LoneParent: 335964,
    						Married: 859862,
    						OnePerson: 1046888,
    						Other: 367057,
    						all: 3015997
    					},
    					"2011": {
    						"65andOver": 134063,
    						Cohabiting: 282907,
    						LoneParent: 413464,
    						Married: 916407,
    						OnePerson: 1030558,
    						Other: 488774,
    						all: 3266173
    					},
    					change: {
    						"65andOver": -17.21,
    						Cohabiting: 15.81,
    						LoneParent: 23.07,
    						Married: 6.58,
    						OnePerson: -1.56,
    						Other: 33.16,
    						all: 8.29
    					}
    				},
    				value_rank: {
    					"2001": {
    						"65andOver": 7,
    						Cohabiting: 2,
    						LoneParent: 1,
    						Married: 3,
    						OnePerson: 1,
    						Other: 1,
    						all: 2
    					},
    					"2011": {
    						"65andOver": 8,
    						Cohabiting: 3,
    						LoneParent: 1,
    						Married: 3,
    						OnePerson: 1,
    						Other: 1,
    						all: 2
    					},
    					change: {
    						"65andOver": 9,
    						Cohabiting: 9,
    						LoneParent: 3,
    						Married: 1,
    						OnePerson: 9,
    						Other: 3,
    						all: 4
    					}
    				}
    			},
    			marital: {
    				perc: {
    					"2001": {
    						Married: 41.69,
    						Seperated: 10.33,
    						Single: 41.23,
    						Widowed: 6.75
    					},
    					"2011": {
    						Married: 40.25,
    						Seperated: 10.62,
    						Single: 44.11,
    						Widowed: 5.02
    					},
    					change: {
    						Married: -1.44,
    						Seperated: 0.29,
    						Single: 2.88,
    						Widowed: -1.73
    					}
    				},
    				perc_rank: {
    					"2001": {
    						Married: 9,
    						Seperated: 7,
    						Single: 1,
    						Widowed: 9
    					},
    					"2011": {
    						Married: 9,
    						Seperated: 9,
    						Single: 1,
    						Widowed: 9
    					},
    					change: {
    						Married: 1,
    						Seperated: 9,
    						Single: 9,
    						Widowed: 9
    					}
    				},
    				value: {
    					"2001": {
    						Married: 2386210,
    						Seperated: 591472,
    						Single: 2359932,
    						Widowed: 386241,
    						all: 5723855
    					},
    					"2011": {
    						Married: 2635770,
    						Seperated: 695606,
    						Single: 2888944,
    						Widowed: 328853,
    						all: 6549173
    					},
    					change: {
    						Married: 10.46,
    						Seperated: 17.61,
    						Single: 22.42,
    						Widowed: -14.86,
    						all: 14.42
    					}
    				},
    				value_rank: {
    					"2001": {
    						Married: 3,
    						Seperated: 2,
    						Single: 1,
    						Widowed: 3,
    						all: 2
    					},
    					"2011": {
    						Married: 2,
    						Seperated: 2,
    						Single: 1,
    						Widowed: 4,
    						all: 2
    					},
    					change: {
    						Married: 1,
    						Seperated: 7,
    						Single: 9,
    						Widowed: 9,
    						all: 1
    					}
    				}
    			},
    			travel: {
    				perc: {
    					"2001": {
    						bicycle: 2.07,
    						bus: 9.9,
    						car_van: 36.44,
    						foot: 7.39,
    						home: 7.51,
    						moto: 1.46,
    						other: 0.38,
    						taxi: 0.58,
    						train_metro: 34.26
    					},
    					"2011": {
    						bicycle: 4.04,
    						bus: 14.04,
    						car_van: 29.77,
    						foot: 8.82,
    						home: 5.07,
    						moto: 1.15,
    						other: 0.71,
    						taxi: 0.51,
    						train_metro: 35.88
    					},
    					change: {
    						bicycle: 1.97,
    						bus: 4.14,
    						car_van: -6.67,
    						foot: 1.43,
    						home: -2.44,
    						moto: -0.31,
    						other: 0.33,
    						taxi: -0.07,
    						train_metro: 1.62
    					}
    				},
    				perc_rank: {
    					"2001": {
    						bicycle: 8,
    						bus: 3,
    						car_van: 9,
    						foot: 9,
    						home: 9,
    						moto: 2,
    						other: 3,
    						taxi: 3,
    						train_metro: 1
    					},
    					"2011": {
    						bicycle: 1,
    						bus: 1,
    						car_van: 9,
    						foot: 9,
    						home: 4,
    						moto: 1,
    						other: 2,
    						taxi: 5,
    						train_metro: 1
    					},
    					change: {
    						bicycle: 1,
    						bus: 1,
    						car_van: 9,
    						foot: 1,
    						home: 1,
    						moto: 7,
    						other: 2,
    						taxi: 9,
    						train_metro: 3
    					}
    				},
    				value: {
    					"2001": {
    						all: 3805655,
    						bicycle: 78804,
    						bus: 376926,
    						car_van: 1386900,
    						foot: 281338,
    						home: 285935,
    						moto: 55752,
    						other: 14396,
    						taxi: 21962,
    						train_metro: 1303642
    					},
    					"2011": {
    						all: 3998897,
    						bicycle: 161705,
    						bus: 561605,
    						car_van: 1190485,
    						foot: 352612,
    						home: 202679,
    						moto: 45976,
    						other: 28538,
    						taxi: 20314,
    						train_metro: 1434983
    					},
    					change: {
    						all: 5.08,
    						bicycle: 105.2,
    						bus: 49,
    						car_van: -14.16,
    						foot: 25.33,
    						home: -29.12,
    						moto: -17.53,
    						other: 98.24,
    						taxi: -7.5,
    						train_metro: 10.07
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1,
    						bicycle: 3,
    						bus: 1,
    						car_van: 5,
    						foot: 3,
    						home: 2,
    						moto: 1,
    						other: 2,
    						taxi: 2,
    						train_metro: 1
    					},
    					"2011": {
    						all: 2,
    						bicycle: 1,
    						bus: 1,
    						car_van: 8,
    						foot: 2,
    						home: 2,
    						moto: 1,
    						other: 1,
    						taxi: 2,
    						train_metro: 1
    					},
    					change: {
    						all: 9,
    						bicycle: 1,
    						bus: 1,
    						car_van: 9,
    						foot: 1,
    						home: 2,
    						moto: 3,
    						other: 7,
    						taxi: 9,
    						train_metro: 9
    					}
    				}
    			},
    			hoursworked: {
    				perc: {
    					"2001": {
    						"Female1-15": 4.8,
    						"Female16-30": 9.5,
    						"Female31-48": 27.68,
    						Female49plus: 4.54,
    						"Male1-15": 1.96,
    						"Male16-30": 3.84,
    						"Male31-48": 34.5,
    						Male49plus: 13.18
    					},
    					"2011": {
    						"Female1-15": 5.41,
    						"Female16-30": 10.81,
    						"Female31-48": 25.74,
    						Female49plus: 4.64,
    						"Male1-15": 3.25,
    						"Male16-30": 6.17,
    						"Male31-48": 32.75,
    						Male49plus: 11.25
    					},
    					change: {
    						"Female1-15": 0.61,
    						"Female16-30": 1.31,
    						"Female31-48": -1.94,
    						Female49plus: 0.1,
    						"Male1-15": 1.29,
    						"Male16-30": 2.33,
    						"Male31-48": -1.75,
    						Male49plus: -1.93
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"Female1-15": 9,
    						"Female16-30": 9,
    						"Female31-48": 1,
    						Female49plus: 1,
    						"Male1-15": 3,
    						"Male16-30": 1,
    						"Male31-48": 9,
    						Male49plus: 5
    					},
    					"2011": {
    						"Female1-15": 9,
    						"Female16-30": 9,
    						"Female31-48": 1,
    						Female49plus: 1,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 9,
    						Male49plus: 1
    					},
    					change: {
    						"Female1-15": 1,
    						"Female16-30": 6,
    						"Female31-48": 9,
    						Female49plus: 1,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 6,
    						Male49plus: 1
    					}
    				},
    				value: {
    					"2001": {
    						"Female1-15": 159416,
    						"Female16-30": 315384,
    						"Female31-48": 918613,
    						Female49plus: 150701,
    						"Male1-15": 64933,
    						"Male16-30": 127608,
    						"Male31-48": 1144985,
    						Male49plus: 437494,
    						all: 3319134
    					},
    					"2011": {
    						"Female1-15": 216173,
    						"Female16-30": 432344,
    						"Female31-48": 1029143,
    						Female49plus: 185440,
    						"Male1-15": 129933,
    						"Male16-30": 246603,
    						"Male31-48": 1309573,
    						Male49plus: 449688,
    						all: 3998897
    					},
    					change: {
    						"Female1-15": 35.6,
    						"Female16-30": 37.08,
    						"Female31-48": 12.03,
    						Female49plus: 23.05,
    						"Male1-15": 100.1,
    						"Male16-30": 93.25,
    						"Male31-48": 14.37,
    						Male49plus: 2.79,
    						all: 20.48
    					}
    				},
    				value_rank: {
    					"2001": {
    						"Female1-15": 4,
    						"Female16-30": 4,
    						"Female31-48": 1,
    						Female49plus: 1,
    						"Male1-15": 2,
    						"Male16-30": 1,
    						"Male31-48": 2,
    						Male49plus: 2,
    						all: 2
    					},
    					"2011": {
    						"Female1-15": 2,
    						"Female16-30": 3,
    						"Female31-48": 1,
    						Female49plus: 1,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 2,
    						Male49plus: 1,
    						all: 2
    					},
    					change: {
    						"Female1-15": 1,
    						"Female16-30": 1,
    						"Female31-48": 6,
    						Female49plus: 1,
    						"Male1-15": 1,
    						"Male16-30": 1,
    						"Male31-48": 1,
    						Male49plus: 1,
    						all: 1
    					}
    				}
    			},
    			tenure: {
    				perc: {
    					"2001": {
    						owned: 55.98,
    						rent_free: 1.77,
    						rented_private: 15.34,
    						rented_social: 25.96,
    						shared_ownership: 0.95
    					},
    					"2011": {
    						owned: 48.26,
    						rent_free: 1.31,
    						rented_private: 25.08,
    						rented_social: 24.06,
    						shared_ownership: 1.29
    					},
    					change: {
    						owned: -7.72,
    						rent_free: -0.46,
    						rented_private: 9.74,
    						rented_social: -1.9,
    						shared_ownership: 0.34
    					}
    				},
    				perc_rank: {
    					"2001": {
    						owned: 9,
    						rent_free: 8,
    						rented_private: 1,
    						rented_social: 2,
    						shared_ownership: 1
    					},
    					"2011": {
    						owned: 9,
    						rent_free: 5,
    						rented_private: 1,
    						rented_social: 1,
    						shared_ownership: 1
    					},
    					change: {
    						owned: 9,
    						rent_free: 2,
    						rented_private: 1,
    						rented_social: 7,
    						shared_ownership: 1
    					}
    				},
    				value: {
    					"2001": {
    						all: 3045026,
    						owned: 1704719,
    						rent_free: 53824,
    						rented_private: 467083,
    						rented_social: 790371,
    						shared_ownership: 29029
    					},
    					"2011": {
    						all: 3266173,
    						owned: 1576207,
    						rent_free: 42780,
    						rented_private: 819085,
    						rented_social: 785993,
    						shared_ownership: 42108
    					},
    					change: {
    						all: 7.26,
    						owned: -7.54,
    						rent_free: -20.52,
    						rented_private: 75.36,
    						rented_social: -0.55,
    						shared_ownership: 45.05
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 2,
    						owned: 3,
    						rent_free: 4,
    						rented_private: 1,
    						rented_social: 1,
    						shared_ownership: 1
    					},
    					"2011": {
    						all: 2,
    						owned: 3,
    						rent_free: 2,
    						rented_private: 1,
    						rented_social: 1,
    						shared_ownership: 1
    					},
    					change: {
    						all: 5,
    						owned: 9,
    						rent_free: 2,
    						rented_private: 7,
    						rented_social: 4,
    						shared_ownership: 3
    					}
    				}
    			},
    			density: {
    				value: {
    					"2001": {
    						all: 45.62
    					},
    					"2011": {
    						all: 51.99
    					},
    					change: {
    						all: 6.3700000000000045
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 1
    					},
    					"2011": {
    						all: 1
    					},
    					change: {
    						all: 1
    					}
    				}
    			},
    			age10yr: {
    				perc: {
    					"2001": {
    						"0-9": 12.97,
    						"10-19": 11.88,
    						"20-29": 17.05,
    						"30-39": 18.54,
    						"40-49": 12.95,
    						"50-59": 10.23,
    						"60-69": 7.4,
    						"70-79": 3.07,
    						"80plus": 5.91
    					},
    					"2011": {
    						"0-9": 13.14,
    						"10-19": 11.36,
    						"20-29": 17.9,
    						"30-39": 17.87,
    						"40-49": 14.27,
    						"50-59": 10.19,
    						"60-69": 7.33,
    						"70-79": 2.65,
    						"80plus": 5.28
    					},
    					change: {
    						"0-9": 0.17,
    						"10-19": -0.52,
    						"20-29": 0.85,
    						"30-39": -0.67,
    						"40-49": 1.32,
    						"50-59": -0.04,
    						"60-69": -0.07,
    						"70-79": -0.42,
    						"80plus": -0.63
    					}
    				},
    				perc_rank: {
    					"2001": {
    						"0-9": 1,
    						"10-19": 9,
    						"20-29": 1,
    						"30-39": 1,
    						"40-49": 9,
    						"50-59": 9,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9
    					},
    					"2011": {
    						"0-9": 1,
    						"10-19": 9,
    						"20-29": 1,
    						"30-39": 1,
    						"40-49": 9,
    						"50-59": 9,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9
    					},
    					change: {
    						"0-9": 1,
    						"10-19": 5,
    						"20-29": 7,
    						"30-39": 1,
    						"40-49": 5,
    						"50-59": 2,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9
    					}
    				},
    				value: {
    					"2001": {
    						"0-9": 929975,
    						"10-19": 852208,
    						"20-29": 1223157,
    						"30-39": 1329959,
    						"40-49": 928501,
    						"50-59": 733845,
    						"60-69": 530703,
    						"70-79": 220220,
    						"80plus": 423522,
    						all: 7172090
    					},
    					"2011": {
    						"0-9": 1074304,
    						"10-19": 928524,
    						"20-29": 1462938,
    						"30-39": 1460934,
    						"40-49": 1166676,
    						"50-59": 833226,
    						"60-69": 599362,
    						"70-79": 216286,
    						"80plus": 431691,
    						all: 8173941
    					},
    					change: {
    						"0-9": 15.52,
    						"10-19": 8.96,
    						"20-29": 19.6,
    						"30-39": 9.85,
    						"40-49": 25.65,
    						"50-59": 13.54,
    						"60-69": 12.94,
    						"70-79": -1.79,
    						"80plus": 1.93,
    						all: 13.97
    					}
    				},
    				value_rank: {
    					"2001": {
    						"0-9": 1,
    						"10-19": 3,
    						"20-29": 1,
    						"30-39": 1,
    						"40-49": 2,
    						"50-59": 3,
    						"60-69": 3,
    						"70-79": 3,
    						"80plus": 3,
    						all: 2
    					},
    					"2011": {
    						"0-9": 1,
    						"10-19": 2,
    						"20-29": 1,
    						"30-39": 1,
    						"40-49": 2,
    						"50-59": 3,
    						"60-69": 5,
    						"70-79": 5,
    						"80plus": 5,
    						all: 1
    					},
    					change: {
    						"0-9": 1,
    						"10-19": 1,
    						"20-29": 1,
    						"30-39": 1,
    						"40-49": 1,
    						"50-59": 1,
    						"60-69": 9,
    						"70-79": 9,
    						"80plus": 9,
    						all: 1
    					}
    				}
    			},
    			agemed: {
    				value: {
    					"2001": {
    						all: 34
    					},
    					"2011": {
    						all: 33
    					},
    					change: {
    						all: -1
    					}
    				},
    				value_rank: {
    					"2001": {
    						all: 9
    					},
    					"2011": {
    						all: 9
    					},
    					change: {
    						all: 9
    					}
    				}
    			},
    			welsh: {
    				perc: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				},
    				value: {
    					"2001": {
    						SpeaksWelsh: 0
    					},
    					"2011": {
    						SpeaksWelsh: 0
    					},
    					change: {
    						SpeaksWelsh: 0
    					}
    				}
    			}
    		}
    	}
    ];

    var regionsJson = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': regions
    });

    /* src/Topics.svelte generated by Svelte v3.43.1 */

    const { Object: Object_1, console: console_1$1 } = globals;
    const file$4 = "src/Topics.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[48] = list[i];
    	child_ctx[50] = i;
    	return child_ctx;
    }

    // (427:0) {#if findst}
    function create_if_block_11(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Please wait a moment after selecting a topic while we search for relevant stories...";
    			set_style(div, "padding", "180px");
    			set_style(div, "padding", "20px 20px 20px 20px");
    			set_style(div, "font-size", "x-large");
    			add_location(div, file$4, 427, 1, 17152);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(427:0) {#if findst}",
    		ctx
    	});

    	return block;
    }

    // (441:0) {:else}
    function create_else_block_1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Loading...";
    			set_style(div, "padding", "50px");
    			set_style(div, "padding-left", "40%");
    			set_style(div, "font-size", "x-large");
    			add_location(div, file$4, 441, 1, 17736);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(441:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (431:0) {#if rgnLoad}
    function create_if_block_9(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_10, create_else_block];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*placesload*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(431:0) {#if rgnLoad}",
    		ctx
    	});

    	return block;
    }

    // (438:1) {:else}
    function create_else_block(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Loading...";
    			set_style(div, "padding", "50px");
    			set_style(div, "padding-left", "40%");
    			set_style(div, "font-size", "x-large");
    			add_location(div, file$4, 438, 1, 17636);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(438:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (432:1) {#if placesload}
    function create_if_block_10(ctx) {
    	let div1;
    	let div0;
    	let select;
    	let updating_selected;
    	let current;

    	function select_selected_binding(value) {
    		/*select_selected_binding*/ ctx[20](value);
    	}

    	let select_props = {
    		options: /*topicOptions*/ ctx[15],
    		placeholder: "Search a topic",
    		value: "value",
    		label: "label",
    		search: true
    	};

    	if (/*selected*/ ctx[0] !== void 0) {
    		select_props.selected = /*selected*/ ctx[0];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, 'selected', select_selected_binding));
    	select.$on("select", /*select_handler*/ ctx[21]);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(select.$$.fragment);
    			set_style(div0, "width", "640px");
    			set_style(div0, "margin", "50px auto");
    			add_location(div0, file$4, 433, 2, 17371);
    			add_location(div1, file$4, 432, 1, 17363);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(select, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};

    			if (!updating_selected && dirty[0] & /*selected*/ 1) {
    				updating_selected = true;
    				select_changes.selected = /*selected*/ ctx[0];
    				add_flush_callback(() => updating_selected = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(select);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(432:1) {#if placesload}",
    		ctx
    	});

    	return block;
    }

    // (448:1) {#if topic}
    function create_if_block$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*loaded1*/ ctx[12] && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*loaded1*/ ctx[12]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*loaded1*/ 4096) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(448:1) {#if topic}",
    		ctx
    	});

    	return block;
    }

    // (449:2) {#if loaded1}
    function create_if_block_1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*loaded*/ ctx[14] && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*loaded*/ ctx[14]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*loaded*/ 16384) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(449:2) {#if loaded1}",
    		ctx
    	});

    	return block;
    }

    // (450:3) {#if loaded}
    function create_if_block_2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*rgnLoad*/ ctx[7] && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*rgnLoad*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*rgnLoad*/ 128) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(450:3) {#if loaded}",
    		ctx
    	});

    	return block;
    }

    // (451:4) {#if rgnLoad}
    function create_if_block_3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*eng*/ ctx[6] && create_if_block_4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*eng*/ ctx[6]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*eng*/ 64) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(451:4) {#if rgnLoad}",
    		ctx
    	});

    	return block;
    }

    // (452:5) {#if eng}
    function create_if_block_4(ctx) {
    	let div0;
    	let h1;
    	let t0_value = /*selected*/ ctx[0].label + "";
    	let t0;
    	let t1;
    	let t2;
    	let main;
    	let t3;
    	let hr;
    	let t4;
    	let h2;
    	let t6;
    	let p;
    	let t8;
    	let div1;
    	let current;
    	let if_block0 = /*subSel*/ ctx[4] && create_if_block_7(ctx);
    	let if_block1 = /*placesRegioned*/ ctx[3].length > 1 && create_if_block_5(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			main = element("main");
    			if (if_block1) if_block1.c();
    			t3 = space();
    			hr = element("hr");
    			t4 = space();
    			h2 = element("h2");
    			h2.textContent = "Creating this article";
    			t6 = space();
    			p = element("p");
    			p.textContent = "This article was generated using some automation. Topics are automatically chosen based on how relevant they are for each area.";
    			t8 = space();
    			div1 = element("div");
    			attr_dev(h1, "class", "svelte-qu9vuh");
    			add_location(h1, file$4, 453, 7, 17970);
    			set_style(div0, "width", "640px");
    			set_style(div0, "margin", "0 auto");
    			add_location(div0, file$4, 452, 6, 17920);
    			set_style(hr, "width", "40%");
    			set_style(hr, "margin", "60px auto 30px auto");
    			add_location(hr, file$4, 477, 7, 18911);
    			attr_dev(h2, "id", "create");
    			add_location(h2, file$4, 478, 7, 18973);
    			add_location(p, file$4, 479, 7, 19023);
    			set_style(div1, "height", "200px");
    			add_location(div1, file$4, 480, 7, 19165);
    			attr_dev(main, "class", "svelte-qu9vuh");
    			add_location(main, file$4, 467, 6, 18477);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, main, anchor);
    			if (if_block1) if_block1.m(main, null);
    			append_dev(main, t3);
    			append_dev(main, hr);
    			append_dev(main, t4);
    			append_dev(main, h2);
    			append_dev(main, t6);
    			append_dev(main, p);
    			append_dev(main, t8);
    			append_dev(main, div1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*selected*/ 1) && t0_value !== (t0_value = /*selected*/ ctx[0].label + "")) set_data_dev(t0, t0_value);

    			if (/*subSel*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*subSel*/ 16) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*placesRegioned*/ ctx[3].length > 1) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_5(ctx);
    					if_block1.c();
    					if_block1.m(main, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(main);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(452:5) {#if eng}",
    		ctx
    	});

    	return block;
    }

    // (456:6) {#if subSel}
    function create_if_block_7(ctx) {
    	let div1;
    	let div0;
    	let selectb;
    	let updating_selectedb;
    	let t;
    	let if_block_anchor;
    	let current;

    	function selectb_selectedb_binding(value) {
    		/*selectb_selectedb_binding*/ ctx[22](value);
    	}

    	let selectb_props = {
    		options: /*subSel*/ ctx[4],
    		placeholder: "Search a subtopic",
    		value: "value",
    		label: "label",
    		search: true
    	};

    	if (/*selectedb*/ ctx[1] !== void 0) {
    		selectb_props.selectedb = /*selectedb*/ ctx[1];
    	}

    	selectb = new SelectB({ props: selectb_props, $$inline: true });
    	binding_callbacks.push(() => bind(selectb, 'selectedb', selectb_selectedb_binding));
    	selectb.$on("select", /*select_handler_1*/ ctx[23]);
    	let if_block = /*loadedb*/ ctx[13] && create_if_block_8(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(selectb.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			set_style(div0, "width", "640px");
    			set_style(div0, "margin", "50px auto");
    			add_location(div0, file$4, 457, 8, 18049);
    			add_location(div1, file$4, 456, 7, 18035);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(selectb, div0, null);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const selectb_changes = {};
    			if (dirty[0] & /*subSel*/ 16) selectb_changes.options = /*subSel*/ ctx[4];

    			if (!updating_selectedb && dirty[0] & /*selectedb*/ 2) {
    				updating_selectedb = true;
    				selectb_changes.selectedb = /*selectedb*/ ctx[1];
    				add_flush_callback(() => updating_selectedb = false);
    			}

    			selectb.$set(selectb_changes);

    			if (/*loadedb*/ ctx[13]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_8(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(selectb.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(selectb.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(selectb);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(456:6) {#if subSel}",
    		ctx
    	});

    	return block;
    }

    // (462:7) {#if loadedb}
    function create_if_block_8(ctx) {
    	let div;
    	let h1;
    	let t_value = /*selectedb*/ ctx[1].label + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			t = text(t_value);
    			attr_dev(h1, "class", "svelte-qu9vuh");
    			add_location(h1, file$4, 463, 9, 18404);
    			set_style(div, "width", "640px");
    			set_style(div, "margin", "0 auto");
    			add_location(div, file$4, 462, 8, 18352);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(h1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedb*/ 2 && t_value !== (t_value = /*selectedb*/ ctx[1].label + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(462:7) {#if loadedb}",
    		ctx
    	});

    	return block;
    }

    // (469:7) {#if placesRegioned.length>1}
    function create_if_block_5(ctx) {
    	let p;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let each_value = /*placesOb*/ ctx[2];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*i*/ ctx[50];
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text("A total of ");
    			t1 = text(/*totalStories*/ ctx[10]);
    			t2 = text(" stories would be published around this topic across all LAs");
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			add_location(p, file$4, 469, 8, 18529);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			insert_dev(target, t3, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*totalStories*/ 1024) set_data_dev(t1, /*totalStories*/ ctx[10]);

    			if (dirty[0] & /*results, placesOb, topics*/ 524548) {
    				each_value = /*placesOb*/ ctx[2];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(469:7) {#if placesRegioned.length>1}",
    		ctx
    	});

    	return block;
    }

    // (473:9) {#if (item['region'])}
    function create_if_block_6(ctx) {
    	let html_tag;
    	let raw_value = /*results*/ ctx[19](/*item*/ ctx[48]['place'], /*item*/ ctx[48]['region'], /*topics*/ ctx[8], /*item*/ ctx[48]['s'], /*item*/ ctx[48]['story']) + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*placesOb, topics*/ 260 && raw_value !== (raw_value = /*results*/ ctx[19](/*item*/ ctx[48]['place'], /*item*/ ctx[48]['region'], /*topics*/ ctx[8], /*item*/ ctx[48]['s'], /*item*/ ctx[48]['story']) + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(473:9) {#if (item['region'])}",
    		ctx
    	});

    	return block;
    }

    // (471:8) {#each placesOb as item, i (i)}
    function create_each_block(key_1, ctx) {
    	let h2;
    	let t0_value = /*item*/ ctx[48]['place'].name + "";
    	let t0;
    	let t1;
    	let if_block_anchor;
    	let if_block = /*item*/ ctx[48]['region'] && create_if_block_6(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			set_style(h2, "text-decoration", "underline");
    			add_location(h2, file$4, 471, 9, 18671);
    			this.first = h2;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*placesOb*/ 4 && t0_value !== (t0_value = /*item*/ ctx[48]['place'].name + "")) set_data_dev(t0, t0_value);

    			if (/*item*/ ctx[48]['region']) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(471:8) {#each placesOb as item, i (i)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let script0;
    	let script0_src_value;
    	let script1;
    	let script1_src_value;
    	let t0;
    	let t1;
    	let current_block_type_index;
    	let if_block1;
    	let t2;
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*findst*/ ctx[11] && create_if_block_11(ctx);
    	const if_block_creators = [create_if_block_9, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*rgnLoad*/ ctx[7]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block2 = /*topic*/ ctx[9] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			script0 = element("script");
    			script1 = element("script");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if_block1.c();
    			t2 = space();
    			div = element("div");
    			if (if_block2) if_block2.c();
    			if (!src_url_equal(script0.src, script0_src_value = "https://d3js.org/d3.v3.min.js")) attr_dev(script0, "src", script0_src_value);
    			attr_dev(script0, "charset", "utf-8");
    			add_location(script0, file$4, 422, 1, 16921);
    			if (!src_url_equal(script1.src, script1_src_value = "https://unpkg.com/rosaenlg@3.0.1/dist/rollup/rosaenlg_tiny_en_US_3.0.1_comp.js")) attr_dev(script1, "src", script1_src_value);
    			add_location(script1, file$4, 423, 1, 16992);
    			add_location(div, file$4, 446, 0, 17829);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, script0);
    			append_dev(document.head, script1);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			if (if_block2) if_block2.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(script1, "load", /*onRosaeNlgLoad*/ ctx[16], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*findst*/ ctx[11]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_11(ctx);
    					if_block0.c();
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(t2.parentNode, t2);
    			}

    			if (/*topic*/ ctx[9]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*topic*/ 512) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(script0);
    			detach_dev(script1);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			if (if_block2) if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let placesload;
    	let subSel;
    	let placesRegioned;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Topics', slots, []);
    	var regions$1 = regions;
    	console.log('regions', regions$1);

    	var wal,
    		selected,
    		selectedb,
    		quartiles,
    		locRankCha,
    		locRankCur,
    		eng,
    		rgncode,
    		rgnLoad,
    		natRankCha,
    		natRankCur,
    		topics,
    		topic;

    	var health, expand;
    	var totalStories;
    	var findst = false;

    	function fuzz(w1, w2) {
    		const options = { includeScore: true };
    		const fuse = new Fuse([w1], options);
    		const result = fuse.search(w2);

    		if (result.length > 0) {
    			return false;
    		} else {
    			return true;
    		}
    	}

    	function aftertime() {
    		($$invalidate(3, placesRegioned), $$invalidate(2, placesOb));
    	}

    	const findOne = (haystack, arr) => {
    		return arr.some(v => haystack.includes(v));
    	};

    	let topicOptions = [
    		{
    			"label": "Average age",
    			"value": "agemed_value_change"
    		},
    		{
    			"label": "Care provision",
    			"value": "care_perc_change"
    		},
    		{
    			"label": "Employment status",
    			"value": "economic_perc_change"
    		},
    		{
    			"label": "Ethnicity",
    			"value": "ethnicity_perc_change"
    		},
    		{
    			"label": "Health",
    			"value": "health_perc_change"
    		},
    		{
    			"label": "Hours worked",
    			"value": "hoursworked_perc_change"
    		},
    		{
    			"label": "Households with children",
    			"value": "children_perc_change"
    		},
    		{
    			"label": "Households by family",
    			"value": "household_perc_change"
    		},
    		{
    			"label": "Marital status",
    			"value": "marital_perc_change"
    		},
    		{
    			"label": "Population",
    			"value": "population_value_change"
    		},
    		{
    			"label": "Religion",
    			"value": "religion_perc_change"
    		},
    		{
    			"label": "Tenure",
    			"value": "tenure_perc_change"
    		},
    		{
    			"label": "Welsh",
    			"value": "welsh_perc_change"
    		}
    	];

    	// Switch off when timeout function and change selected to agemed when not developing
    	selected = topicOptions.find(d => d.value == "agemed_value_change");

    	// setTimeout(function() {
    	// 	loadTopic(selected.value)
    	// }, 6000);
    	var regionLU = {};

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Corresponding%20Local%20Authorities-Table%201.csv").then(res => {
    		res.forEach(d => {
    			regionLU[d['Name']] = d['Region/Country'];
    		});

    		console.log("regionLU", regionLU);
    	});

    	var countyLU = {};

    	// Data load functions
    	getData("https://raw.githubusercontent.com/theojolliffe/census-data/main/csv/lists/Local_Authority_District_to_County_(April_2021)_Lookup_in_England.csv").then(res => {
    		res.forEach(d => {
    			countyLU[d['LAD21NM']] = d['CTY21NM'];
    		});

    		console.log("countyLU", countyLU);
    	});

    	console.log('topicOptions', topicOptions);

    	var subTopicOpt = {
    		'agemed_value_change': false,
    		'economic_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{ 'label': 'Employed', 'value': 'employee' },
    			{
    				'label': 'Self-employed',
    				'value': 'self-employed'
    			},
    			{ 'label': 'Student', 'value': 'student' },
    			{
    				'label': 'Unemployed',
    				'value': 'unemployed'
    			}
    		],
    		'ethnicity_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{ 'label': 'Asian', 'value': 'asian' },
    			{ 'label': 'Black', 'value': 'black' },
    			{ 'label': 'White', 'value': 'white' }
    		],
    		'health_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{ 'label': 'Good', 'value': 'good' },
    			// {'label': 'Fair', 'value': 'fair'},
    			{ 'label': 'Bad', 'value': 'bad' }
    		],
    		'hoursworked_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{
    				'label': '1-15 hours per week',
    				'value': 'Male1-15'
    			},
    			{
    				'label': 'Over 49 hours per week',
    				'value': 'Male49plus'
    			}
    		],
    		'children_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{
    				'label': 'Households with children',
    				'value': 'Kids'
    			},
    			{
    				'label': 'Households without children',
    				'value': 'NoKids'
    			},
    			{
    				'label': 'Households with only non-dependent children',
    				'value': 'NonDepKids'
    			}
    		],
    		'household_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{
    				'label': 'Cohabiting',
    				'value': 'Cohabiting'
    			},
    			{
    				'label': 'Married couple',
    				'value': 'Married'
    			},
    			{
    				'label': 'Single parent',
    				'value': 'LoneParent'
    			},
    			{
    				'label': 'Single person',
    				'value': 'OnePerson'
    			}
    		],
    		'marital_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{ 'label': 'Married', 'value': 'Married' },
    			{
    				'label': 'Seperated',
    				'value': 'Seperated'
    			},
    			{ 'label': 'Single', 'value': 'Single' }
    		],
    		'population_value_change': false,
    		'religion_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{ 'label': 'Buddhist', 'value': 'Buddhist' },
    			{ 'label': 'Sikh', 'value': 'Sikh' },
    			{
    				'label': 'Christian',
    				'value': 'Christian'
    			},
    			{ 'label': 'Hindu', 'value': 'Hindu' },
    			{ 'label': 'Jewish', 'value': 'Jewish' },
    			{ 'label': 'Muslim', 'value': 'Muslim' },
    			{
    				'label': 'No religion',
    				'value': 'Noreligion'
    			}
    		],
    		'tenure_perc_change': [
    			{ 'label': 'All', 'value': 'all' },
    			{
    				'label': 'Homeownership',
    				'value': 'owned'
    			},
    			{
    				'label': 'Private renting',
    				'value': 'rented_private'
    			},
    			{
    				'label': 'Social renting',
    				'value': 'rented_social'
    			}
    		],
    		'welsh_perc_change': false
    	};

    	var regionArr = [
    		'E12000001',
    		'E12000002',
    		'E12000003',
    		'E12000004',
    		'E12000005',
    		'E12000006',
    		'E12000007',
    		'E12000008',
    		'E12000009',
    		'W92000004'
    	];

    	// var regions = []
    	fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/W92000004.json").then(res => res.json()).then(json => {
    		wal = json;
    	});

    	fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/E92000001.json").then(res => res.json()).then(json => {
    		$$invalidate(6, eng = json);
    		$$invalidate(12, loaded1 = true);
    	}).then(d => {
    		$$invalidate(7, rgnLoad = true);
    		$$invalidate(11, findst = true);
    	});

    	// .then(d => {
    	// 	regionArr.forEach(thisCode => {
    	// 		fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/"+thisCode+".json")
    	// 		.then(res => res.json())
    	// 		.then(json => {
    	// 			regions.push(json);
    	// 		})
    	// 	})
    	// })
    	var loaded1 = false;

    	var loadedb = false;
    	var places = [];

    	var codeArr = [
    		"E06000047",
    		"E06000005",
    		"E06000001",
    		"E06000002",
    		"E06000057",
    		"E06000003",
    		"E06000004",
    		"E08000037",
    		"E08000021",
    		"E08000022",
    		"E08000023",
    		"E08000024",
    		"E06000008",
    		"E06000009",
    		"E06000049",
    		"E06000050",
    		"E06000006",
    		"E06000007",
    		"E07000026",
    		"E07000027",
    		"E07000028",
    		"E07000029",
    		"E07000030",
    		"E07000031",
    		"E08000001",
    		"E08000002",
    		"E08000003",
    		"E08000004",
    		"E08000005",
    		"E08000006",
    		"E08000007",
    		"E08000008",
    		"E08000009",
    		"E08000010",
    		"E07000117",
    		"E07000118",
    		"E07000119",
    		"E07000120",
    		"E07000121",
    		"E07000122",
    		"E07000123",
    		"E07000124",
    		"E07000125",
    		"E07000126",
    		"E07000127",
    		"E07000128",
    		"E08000011",
    		"E08000012",
    		"E08000014",
    		"E08000013",
    		"E08000015",
    		"E06000011",
    		"E06000010",
    		"E06000012",
    		"E06000013",
    		"E06000014",
    		"E07000163",
    		"E07000164",
    		"E07000165",
    		"E07000166",
    		"E07000167",
    		"E07000168",
    		"E07000169",
    		"E08000016",
    		"E08000017",
    		"E08000018",
    		"E08000019",
    		"E08000032",
    		"E08000033",
    		"E08000034",
    		"E08000035",
    		"E08000036",
    		"E06000015",
    		"E06000016",
    		"E06000018",
    		"E06000017",
    		"E07000032",
    		"E07000033",
    		"E07000034",
    		"E07000035",
    		"E07000036",
    		"E07000037",
    		"E07000038",
    		"E07000039",
    		"E07000129",
    		"E07000130",
    		"E07000131",
    		"E07000132",
    		"E07000133",
    		"E07000134",
    		"E07000135",
    		"E07000136",
    		"E07000137",
    		"E07000138",
    		"E07000139",
    		"E07000140",
    		"E07000141",
    		"E07000142",
    		"E07000170",
    		"E07000171",
    		"E07000172",
    		"E07000173",
    		"E07000174",
    		"E07000175",
    		"E07000176",
    		"E06000019",
    		"E06000051",
    		"E06000021",
    		"E06000020",
    		"E07000192",
    		"E07000193",
    		"E07000194",
    		"E07000195",
    		"E07000196",
    		"E07000197",
    		"E07000198",
    		"E07000199",
    		"E07000218",
    		"E07000219",
    		"E07000220",
    		"E07000221",
    		"E07000222",
    		"E08000025",
    		"E08000026",
    		"E08000027",
    		"E08000028",
    		"E08000029",
    		"E08000030",
    		"E08000031",
    		"E07000234",
    		"E07000235",
    		"E07000236",
    		"E07000237",
    		"E07000238",
    		"E07000239",
    		"E06000055",
    		"E06000056",
    		"E06000032",
    		"E06000031",
    		"E06000033",
    		"E06000034",
    		"E07000008",
    		"E07000009",
    		"E07000010",
    		"E07000011",
    		"E07000012",
    		"E07000066",
    		"E07000067",
    		"E07000068",
    		"E07000069",
    		"E07000070",
    		"E07000071",
    		"E07000072",
    		"E07000073",
    		"E07000074",
    		"E07000075",
    		"E07000076",
    		"E07000077",
    		"E07000095",
    		"E07000096",
    		"E07000242",
    		"E07000098",
    		"E07000099",
    		"E07000240",
    		"E07000243",
    		"E07000102",
    		"E07000103",
    		"E07000241",
    		"E07000143",
    		"E07000144",
    		"E07000145",
    		"E07000146",
    		"E07000147",
    		"E07000148",
    		"E07000149",
    		"E07000200",
    		"E07000202",
    		"E07000203",
    		"E09000007",
    		"E09000012",
    		"E09000013",
    		"E09000014",
    		"E09000019",
    		"E09000020",
    		"E09000022",
    		"E09000023",
    		"E09000025",
    		"E09000028",
    		"E09000030",
    		"E09000032",
    		"E09000001",
    		"E09000033",
    		"E09000002",
    		"E09000003",
    		"E09000004",
    		"E09000005",
    		"E09000006",
    		"E09000008",
    		"E09000009",
    		"E09000010",
    		"E09000011",
    		"E09000015",
    		"E09000016",
    		"E09000017",
    		"E09000018",
    		"E09000021",
    		"E09000024",
    		"E09000026",
    		"E09000027",
    		"E09000029",
    		"E09000031",
    		"E06000036",
    		"E06000043",
    		"E06000046",
    		"E06000035",
    		"E06000042",
    		"E06000044",
    		"E06000038",
    		"E06000039",
    		"E06000045",
    		"E06000037",
    		"E06000040",
    		"E06000041",
    		"E07000061",
    		"E07000062",
    		"E07000063",
    		"E07000064",
    		"E07000065",
    		"E07000084",
    		"E07000085",
    		"E07000086",
    		"E07000087",
    		"E07000088",
    		"E07000089",
    		"E07000090",
    		"E07000091",
    		"E07000092",
    		"E07000093",
    		"E07000094",
    		"E07000105",
    		"E07000106",
    		"E07000107",
    		"E07000108",
    		"E07000109",
    		"E07000110",
    		"E07000111",
    		"E07000112",
    		"E07000113",
    		"E07000114",
    		"E07000115",
    		"E07000116",
    		"E07000177",
    		"E07000178",
    		"E07000179",
    		"E07000180",
    		"E07000181",
    		"E07000207",
    		"E07000208",
    		"E07000209",
    		"E07000210",
    		"E07000211",
    		"E07000212",
    		"E07000213",
    		"E07000214",
    		"E07000215",
    		"E07000216",
    		"E07000217",
    		"E07000223",
    		"E07000224",
    		"E07000225",
    		"E07000226",
    		"E07000227",
    		"E07000228",
    		"E07000229",
    		"E06000022",
    		"E06000023",
    		"E06000052",
    		"E06000024",
    		"E06000026",
    		"E06000025",
    		"E06000030",
    		"E06000027",
    		"E06000054",
    		"E07000040",
    		"E07000041",
    		"E07000042",
    		"E07000043",
    		"E07000044",
    		"E07000045",
    		"E07000046",
    		"E07000047",
    		"E07000078",
    		"E07000079",
    		"E07000080",
    		"E07000081",
    		"E07000082",
    		"E07000083",
    		"E07000187",
    		"E07000188",
    		"E07000189",
    		"W06000001",
    		"W06000002",
    		"W06000003",
    		"W06000004",
    		"W06000005",
    		"W06000006",
    		"W06000023",
    		"W06000008",
    		"W06000009",
    		"W06000010",
    		"W06000011",
    		"W06000012",
    		"W06000013",
    		"W06000014",
    		"W06000015",
    		"W06000016",
    		"W06000024",
    		"W06000018",
    		"W06000019",
    		"W06000020",
    		"W06000021",
    		"W06000022"
    	];

    	codeArr.forEach(thisCode => {
    		fetch("https://raw.githubusercontent.com/theojolliffe/census-data/main/json/place/" + thisCode + ".json").then(res => res.json()).then(json => {
    			places.push(json);
    		});
    	});

    	setTimeout(
    		function () {
    			$$invalidate(5, placesload = true);
    		},
    		1000
    	);

    	var topics;
    	fetch("./archie.aml").then(res => res.text()).then(txt => $$invalidate(8, topics = archieml.load(txt)));
    	var puggy;
    	fetch("./puggy.pug").then(res => res.text()).then(txt => puggy = txt);
    	var loaded = false;

    	const onRosaeNlgLoad = () => {
    		$$invalidate(14, loaded = true);
    	};

    	let grewSyn = {
    		1: "expanded",
    		2: "grew",
    		3: "grew",
    		4: "remained relatively stable",
    		5: "fell"
    	};

    	var placesOb = [];
    	var subplacesOb = [];

    	function loadSubTopic(code) {
    		if (code == "all") {
    			loadTopic(selected.value);
    		} else {
    			code = selected.value + "_" + code;
    			console.log('codesub', code);
    			subplacesOb = [];

    			for (let i = 0; i < places.length; i++) {
    				let story = places[i].stories.filter(d => d.label == code);
    				let s;

    				if (story.length > 0) {
    					s = story[0].label.split("_");

    					if (s.length > 4) {
    						s[3] = s[3] + "_" + s[4];
    						s.pop();
    					}
    				}

    				let tmpOb = {
    					'place': places[i],
    					story,
    					'region': regions$1.find(d => d.code == places[i].parents[0].code),
    					's': [s]
    				};

    				subplacesOb = [...subplacesOb, tmpOb];
    			}

    			for (let i = 0; i < subplacesOb.length; i++) {
    				if (subplacesOb[i]['story'].length == 0) {
    					subplacesOb.splice(i, 1);
    					i = i - 1;
    				}
    			}

    			$$invalidate(10, totalStories = subplacesOb.length);

    			let subplacesLow = subplacesOb.sort(function (a, b) {
    				return a['story'][0]['value'] - b['story'][0]['value'];
    			}).slice(0, 3);

    			let subplacesHigh = subplacesOb.sort(function (a, b) {
    				return b['story'][0]['value'] - a['story'][0]['value'];
    			}).slice(0, 3);

    			let subplacesMid = subplacesOb.sort(function (a, b) {
    				return Math.abs(a['story'][0]['value']) - Math.abs(b['story'][0]['value']);
    			}).slice(0, 3);

    			subplacesOb = subplacesHigh.concat(subplacesMid, subplacesLow);

    			// placesOb=placesOb.slice(0,6)
    			console.log('subplacesOb', subplacesOb);

    			$$invalidate(2, placesOb = subplacesOb);
    			$$invalidate(2, placesOb = [...new Set(placesOb)]);
    		}

    		$$invalidate(13, loadedb = true);
    		setTimeout(aftertime, 5000);
    	}

    	function loadPreTopic(code) {
    		$$invalidate(11, findst = false);
    		loadTopic(code);
    	}

    	/// LOAD TOPIC
    	function loadTopic(code) {
    		console.log("code", code);
    		$$invalidate(2, placesOb = []);

    		for (let i = 0; i < places.length; i++) {
    			let story = places[i].stories.filter(d => d.label.split("_")[0] + "_" + d.label.split("_")[1] + "_" + d.label.split("_")[2] == code);
    			let s;

    			if (story.length > 0) {
    				s = story[0].label.split("_");

    				if (s.length > 4) {
    					s[3] = s[3] + "_" + s[4];
    					s.pop();
    				}
    			}

    			let tmpOb = {
    				'place': places[i],
    				story,
    				'region': regions$1.find(d => d.code == places[i].parents[0].code),
    				's': [s]
    			};

    			$$invalidate(2, placesOb = [...placesOb, tmpOb]);
    		}

    		for (let i = 0; i < placesOb.length; i++) {
    			if (placesOb[i]['story'].length == 0) {
    				placesOb.splice(i, 1);
    				i = i - 1;
    			}
    		}

    		$$invalidate(10, totalStories = placesOb.length);

    		let placesLow = placesOb.sort(function (a, b) {
    			return a['story'][0]['value'] - b['story'][0]['value'];
    		}).slice(0, 3);

    		let placesHigh = placesOb.sort(function (a, b) {
    			return b['story'][0]['value'] - a['story'][0]['value'];
    		}).slice(0, 3);

    		let placesMid = placesOb.sort(function (a, b) {
    			return Math.abs(a['story'][0]['value']) - Math.abs(b['story'][0]['value']);
    		}).slice(0, 3);

    		$$invalidate(2, placesOb = placesHigh.concat(placesMid, placesLow));

    		// placesOb=placesOb.slice(0,10)
    		$$invalidate(2, placesOb = [...new Set(placesOb)]);

    		console.log('places: sort ', placesOb);
    		$$invalidate(9, topic = true);
    		setTimeout(aftertime, 51000);
    	}

    	function iterate(obj, pname) {
    		Object.keys(obj).forEach(key => {
    			if (typeof obj[key] === 'object') {
    				iterate(obj[key], pname);
    			} else {
    				obj[key] = createText(obj[key], { health, health, plcname: pname });
    			}
    		});
    	}

    	function results(place, rgn, topicsIn, s, story) {
    		// Define the word to describe population change in standfirst
    		if (place.data.population.value.change.all > 8) {
    			expand = "expanded";
    		} else if (place.data.population.value.change.all > 3) {
    			expand = "grew";
    		} else if (place.data.population.value.change.all > 0) {
    			expand = "did not change much";
    		} else {
    			expand = "shrunk";
    		}

    		// Define the word to describe health change in standfirst
    		if (place.data.health.perc.change.good > 0) {
    			health = "improved";
    		} else if (place.data.health.perc.change.good < 0) {
    			health = "deteriorated";
    		}

    		var o = JSON.parse(JSON.stringify(topicsIn));
    		iterate(o, place.name);

    		function topic(i, top) {
    			let ttop;

    			if (top) {
    				ttop = top;
    			} else {
    				ttop = s[i][3];
    			}

    			return o[s[i][0]][ttop];
    		}

    		function cap(string) {
    			return string.charAt(0).toUpperCase() + string.slice(1);
    		}

    		return rosaenlg_en_US.render(puggy, {
    			language: 'en_UK',
    			place,
    			data: place.data,
    			cou: place.parents[0].name == "Wales" ? wal : eng,
    			eng,
    			rgn,
    			uncap1,
    			regionThe,
    			parent: uncap1(regionThe(place.parents[0].name)),
    			parentNT: uncap1(regionThe(place.parents[0].name, "NT")),
    			s,
    			stories: story,
    			priorities: place.Priorities,
    			grewSyn,
    			locRankCha,
    			natRankCha,
    			locRankCur,
    			natRankCur,
    			hiRank: place.hiRank,
    			topic,
    			topics: o,
    			chains,
    			country: "England",
    			get_word,
    			figs,
    			otherEst,
    			cur,
    			cha,
    			qui,
    			cap,
    			cap,
    			otherRank,
    			ud,
    			city,
    			drop,
    			drop,
    			ord,
    			ageBandLU,
    			nuword,
    			sign,
    			udord,
    			eq,
    			eq,
    			near: place.nearbyArea.nearTops,
    			adv,
    			uds,
    			pluralize,
    			isTopic: true,
    			countyLU,
    			regionLU,
    			fuzz,
    			prev,
    			findOne
    		});
    	}

    	setTimeout(
    		function () {
    			setInterval(
    				function () {
    					d3.selectAll('div#visph').attr('style', `
			background-color: #f6f6f6; 
			color: #e1e7ea; 
			height: 240px;
			padding: 80px;
			font-size: 2.8rem;
			font-weight: 600;
			margin-bottom: 80px;`);
    				},
    				1000
    			);
    		},
    		2000
    	);

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Topics> was created with unknown prop '${key}'`);
    	});

    	function select_selected_binding(value) {
    		selected = value;
    		$$invalidate(0, selected);
    	}

    	const select_handler = () => {
    		if (selected) {
    			loadPreTopic(selected.value);
    		}
    	};

    	function selectb_selectedb_binding(value) {
    		selectedb = value;
    		$$invalidate(1, selectedb);
    	}

    	const select_handler_1 = () => {
    		if (selectedb) {
    			loadSubTopic(selectedb.value);
    		}
    	};

    	$$self.$capture_state = () => ({
    		uds,
    		adv,
    		eq,
    		udord,
    		sign,
    		nuword,
    		ageBandLU,
    		ord,
    		uncap1,
    		regionThe,
    		drop,
    		ud,
    		otherRank,
    		otherEst,
    		qui,
    		cha,
    		cur,
    		figs,
    		get_word,
    		city,
    		chains,
    		prev,
    		getData,
    		Select,
    		Selectb: SelectB,
    		load: archieml.load,
    		robojournalist: createText,
    		pluralize,
    		Fuse,
    		regionsJson,
    		regions: regions$1,
    		wal,
    		selected,
    		selectedb,
    		quartiles,
    		locRankCha,
    		locRankCur,
    		eng,
    		rgncode,
    		rgnLoad,
    		natRankCha,
    		natRankCur,
    		topics,
    		topic,
    		health,
    		expand,
    		totalStories,
    		findst,
    		fuzz,
    		aftertime,
    		findOne,
    		topicOptions,
    		regionLU,
    		countyLU,
    		subTopicOpt,
    		regionArr,
    		loaded1,
    		loadedb,
    		places,
    		codeArr,
    		puggy,
    		loaded,
    		onRosaeNlgLoad,
    		grewSyn,
    		placesOb,
    		subplacesOb,
    		loadSubTopic,
    		loadPreTopic,
    		loadTopic,
    		iterate,
    		results,
    		placesRegioned,
    		subSel,
    		placesload
    	});

    	$$self.$inject_state = $$props => {
    		if ('regions' in $$props) $$invalidate(31, regions$1 = $$props.regions);
    		if ('wal' in $$props) wal = $$props.wal;
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('selectedb' in $$props) $$invalidate(1, selectedb = $$props.selectedb);
    		if ('quartiles' in $$props) quartiles = $$props.quartiles;
    		if ('locRankCha' in $$props) locRankCha = $$props.locRankCha;
    		if ('locRankCur' in $$props) locRankCur = $$props.locRankCur;
    		if ('eng' in $$props) $$invalidate(6, eng = $$props.eng);
    		if ('rgncode' in $$props) rgncode = $$props.rgncode;
    		if ('rgnLoad' in $$props) $$invalidate(7, rgnLoad = $$props.rgnLoad);
    		if ('natRankCha' in $$props) natRankCha = $$props.natRankCha;
    		if ('natRankCur' in $$props) natRankCur = $$props.natRankCur;
    		if ('topics' in $$props) $$invalidate(8, topics = $$props.topics);
    		if ('topic' in $$props) $$invalidate(9, topic = $$props.topic);
    		if ('health' in $$props) health = $$props.health;
    		if ('expand' in $$props) expand = $$props.expand;
    		if ('totalStories' in $$props) $$invalidate(10, totalStories = $$props.totalStories);
    		if ('findst' in $$props) $$invalidate(11, findst = $$props.findst);
    		if ('topicOptions' in $$props) $$invalidate(15, topicOptions = $$props.topicOptions);
    		if ('regionLU' in $$props) regionLU = $$props.regionLU;
    		if ('countyLU' in $$props) countyLU = $$props.countyLU;
    		if ('subTopicOpt' in $$props) $$invalidate(41, subTopicOpt = $$props.subTopicOpt);
    		if ('regionArr' in $$props) regionArr = $$props.regionArr;
    		if ('loaded1' in $$props) $$invalidate(12, loaded1 = $$props.loaded1);
    		if ('loadedb' in $$props) $$invalidate(13, loadedb = $$props.loadedb);
    		if ('places' in $$props) places = $$props.places;
    		if ('codeArr' in $$props) codeArr = $$props.codeArr;
    		if ('puggy' in $$props) puggy = $$props.puggy;
    		if ('loaded' in $$props) $$invalidate(14, loaded = $$props.loaded);
    		if ('grewSyn' in $$props) grewSyn = $$props.grewSyn;
    		if ('placesOb' in $$props) $$invalidate(2, placesOb = $$props.placesOb);
    		if ('subplacesOb' in $$props) subplacesOb = $$props.subplacesOb;
    		if ('placesRegioned' in $$props) $$invalidate(3, placesRegioned = $$props.placesRegioned);
    		if ('subSel' in $$props) $$invalidate(4, subSel = $$props.subSel);
    		if ('placesload' in $$props) $$invalidate(5, placesload = $$props.placesload);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*placesload*/ 32) {
    			console.log('placesload', placesload);
    		}

    		if ($$self.$$.dirty[0] & /*selected*/ 1) {
    			$$invalidate(4, subSel = subTopicOpt[selected.value]);
    		}

    		if ($$self.$$.dirty[0] & /*subSel*/ 16) {
    			console.log('subTopicOpt', subSel);
    		}

    		if ($$self.$$.dirty[0] & /*selected*/ 1) {
    			console.log('*****selected', selected);
    		}

    		if ($$self.$$.dirty[0] & /*selectedb*/ 2) {
    			console.log('*****selectedb', selectedb);
    		}

    		if ($$self.$$.dirty[0] & /*placesOb*/ 4) {
    			$$invalidate(3, placesRegioned = placesOb.map(d => d.region));
    		}

    		if ($$self.$$.dirty[0] & /*placesRegioned*/ 8) {
    			console.log('placesRegioned', placesRegioned);
    		}
    	};

    	$$invalidate(5, placesload = false);
    	console.log('regions', regions$1);

    	return [
    		selected,
    		selectedb,
    		placesOb,
    		placesRegioned,
    		subSel,
    		placesload,
    		eng,
    		rgnLoad,
    		topics,
    		topic,
    		totalStories,
    		findst,
    		loaded1,
    		loadedb,
    		loaded,
    		topicOptions,
    		onRosaeNlgLoad,
    		loadSubTopic,
    		loadPreTopic,
    		results,
    		select_selected_binding,
    		select_handler,
    		selectb_selectedb_binding,
    		select_handler_1
    	];
    }

    class Topics extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Topics",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/Words.svelte generated by Svelte v3.43.1 */

    const { console: console_1 } = globals;
    const file$3 = "src/Words.svelte";

    function create_fragment$5(ctx) {
    	let div;
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let p2;
    	let t5;
    	let iframe;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "Click on a phrase type (e.g. 'clausal modifier') to see the various phrases used across different topics.";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "Click on a phrase to see it used in context.";
    			t3 = space();
    			p2 = element("p");
    			p2.textContent = "Note that when a phrase is selected, only the bold text is dynamic so may not provide perfect context.";
    			t5 = space();
    			iframe = element("iframe");
    			add_location(p0, file$3, 17, 1, 400);
    			add_location(p1, file$3, 20, 1, 519);
    			add_location(p2, file$3, 23, 1, 578);
    			set_style(div, "width", "80%");
    			set_style(div, "margin", "auto");
    			add_location(div, file$3, 16, 0, 360);
    			attr_dev(iframe, "width", "100%");
    			attr_dev(iframe, "height", "5212");
    			attr_dev(iframe, "frameborder", "0");
    			if (!src_url_equal(iframe.src, iframe_src_value = "https://observablehq.com/embed/cc9449078bb7b9ae?cells=chart%2Csent")) attr_dev(iframe, "src", iframe_src_value);
    			add_location(iframe, file$3, 28, 0, 701);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(div, t1);
    			append_dev(div, p1);
    			append_dev(div, t3);
    			append_dev(div, p2);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, iframe, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Words', slots, []);
    	var topics;
    	fetch("./archie.aml").then(res => res.text()).then(txt => topics = archieml.load(txt));

    	function loadTopic(value) {
    		console.log("topics", topics[value.split("_")[0]]);
    		console.log("topics", topics);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Words> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ load: archieml.load, Select, topics, loadTopic });

    	$$self.$inject_state = $$props => {
    		if ('topics' in $$props) topics = $$props.topics;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class Words extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Words",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/tabs/Tabs.svelte generated by Svelte v3.43.1 */
    const file$2 = "src/tabs/Tabs.svelte";

    function create_fragment$4(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "tabs");
    			add_location(div, file$2, 47, 0, 1063);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const TABS = {};

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, ['default']);
    	const tabs = [];
    	const panels = [];
    	const selectedTab = writable(null);
    	const selectedPanel = writable(null);

    	setContext(TABS, {
    		registerTab: tab => {
    			tabs.push(tab);
    			selectedTab.update(current => current || tab);

    			onDestroy(() => {
    				const i = tabs.indexOf(tab);
    				tabs.splice(i, 1);

    				selectedTab.update(current => current === tab
    				? tabs[i] || tabs[tabs.length - 1]
    				: current);
    			});
    		},
    		registerPanel: panel => {
    			panels.push(panel);
    			selectedPanel.update(current => current || panel);

    			onDestroy(() => {
    				const i = panels.indexOf(panel);
    				panels.splice(i, 1);

    				selectedPanel.update(current => current === panel
    				? panels[i] || panels[panels.length - 1]
    				: current);
    			});
    		},
    		selectTab: tab => {
    			const i = tabs.indexOf(tab);
    			selectedTab.set(tab);
    			selectedPanel.set(panels[i]);
    		},
    		selectedTab,
    		selectedPanel
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		TABS,
    		setContext,
    		onDestroy,
    		writable,
    		tabs,
    		panels,
    		selectedTab,
    		selectedPanel
    	});

    	return [$$scope, slots];
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/tabs/TabList.svelte generated by Svelte v3.43.1 */

    const file$1 = "src/tabs/TabList.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "tab-list svelte-1qgay6m");
    			add_location(div, file$1, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabList', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class TabList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabList",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/tabs/TabPanel.svelte generated by Svelte v3.43.1 */

    // (11:0) {#if $selectedPanel === panel}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(11:0) {#if $selectedPanel === panel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$selectedPanel*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $selectedPanel;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TabPanel', slots, ['default']);
    	const panel = {};
    	const { registerPanel, selectedPanel } = getContext(TABS);
    	validate_store(selectedPanel, 'selectedPanel');
    	component_subscribe($$self, selectedPanel, value => $$invalidate(0, $selectedPanel = value));
    	registerPanel(panel);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabPanel> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		TABS,
    		panel,
    		registerPanel,
    		selectedPanel,
    		$selectedPanel
    	});

    	return [$selectedPanel, panel, selectedPanel, $$scope, slots];
    }

    class TabPanel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TabPanel",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/tabs/Tab.svelte generated by Svelte v3.43.1 */
    const file = "src/tabs/Tab.svelte";

    function create_fragment$1(ctx) {
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", "svelte-b9uj0r");
    			toggle_class(button, "selected", /*$selectedTab*/ ctx[0] === /*tab*/ ctx[1]);
    			add_location(button, file, 26, 0, 417);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (dirty & /*$selectedTab, tab*/ 3) {
    				toggle_class(button, "selected", /*$selectedTab*/ ctx[0] === /*tab*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $selectedTab;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tab', slots, ['default']);
    	const tab = {};
    	const { registerTab, selectTab, selectedTab } = getContext(TABS);
    	validate_store(selectedTab, 'selectedTab');
    	component_subscribe($$self, selectedTab, value => $$invalidate(0, $selectedTab = value));
    	registerTab(tab);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tab> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => selectTab(tab);

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		TABS,
    		tab,
    		registerTab,
    		selectTab,
    		selectedTab,
    		$selectedTab
    	});

    	return [$selectedTab, tab, selectTab, selectedTab, $$scope, slots, click_handler];
    }

    class Tab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tab",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.43.1 */

    // (12:2) <Tab>
    function create_default_slot_7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Area Reports");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(12:2) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (13:2) <Tab>
    function create_default_slot_6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Topic QA");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(13:2) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (14:2) <Tab>
    function create_default_slot_5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Word Selection");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(14:2) <Tab>",
    		ctx
    	});

    	return block;
    }

    // (11:1) <TabList>
    function create_default_slot_4(ctx) {
    	let tab0;
    	let t0;
    	let tab1;
    	let t1;
    	let tab2;
    	let current;

    	tab0 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab1 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tab2 = new Tab({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tab0.$$.fragment);
    			t0 = space();
    			create_component(tab1.$$.fragment);
    			t1 = space();
    			create_component(tab2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tab0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tab1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tab2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tab0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tab0_changes.$$scope = { dirty, ctx };
    			}

    			tab0.$set(tab0_changes);
    			const tab1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tab1_changes.$$scope = { dirty, ctx };
    			}

    			tab1.$set(tab1_changes);
    			const tab2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tab2_changes.$$scope = { dirty, ctx };
    			}

    			tab2.$set(tab2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tab0.$$.fragment, local);
    			transition_in(tab1.$$.fragment, local);
    			transition_in(tab2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tab0.$$.fragment, local);
    			transition_out(tab1.$$.fragment, local);
    			transition_out(tab2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tab0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tab1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tab2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(11:1) <TabList>",
    		ctx
    	});

    	return block;
    }

    // (16:1) <TabPanel>
    function create_default_slot_3(ctx) {
    	let reports;
    	let current;
    	reports = new Reports({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(reports.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(reports, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(reports.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(reports.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(reports, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(16:1) <TabPanel>",
    		ctx
    	});

    	return block;
    }

    // (19:1) <TabPanel>
    function create_default_slot_2(ctx) {
    	let topics;
    	let current;
    	topics = new Topics({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(topics.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(topics, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(topics.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(topics.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(topics, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(19:1) <TabPanel>",
    		ctx
    	});

    	return block;
    }

    // (22:1) <TabPanel>
    function create_default_slot_1(ctx) {
    	let words;
    	let current;
    	words = new Words({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(words.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(words, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(words.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(words.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(words, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(22:1) <TabPanel>",
    		ctx
    	});

    	return block;
    }

    // (10:0) <Tabs>
    function create_default_slot(ctx) {
    	let tablist;
    	let t0;
    	let tabpanel0;
    	let t1;
    	let tabpanel1;
    	let t2;
    	let tabpanel2;
    	let current;

    	tablist = new TabList({
    			props: {
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabpanel0 = new TabPanel({
    			props: {
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabpanel1 = new TabPanel({
    			props: {
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	tabpanel2 = new TabPanel({
    			props: {
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tablist.$$.fragment);
    			t0 = space();
    			create_component(tabpanel0.$$.fragment);
    			t1 = space();
    			create_component(tabpanel1.$$.fragment);
    			t2 = space();
    			create_component(tabpanel2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tablist, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(tabpanel0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tabpanel1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabpanel2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tablist_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tablist_changes.$$scope = { dirty, ctx };
    			}

    			tablist.$set(tablist_changes);
    			const tabpanel0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tabpanel0_changes.$$scope = { dirty, ctx };
    			}

    			tabpanel0.$set(tabpanel0_changes);
    			const tabpanel1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tabpanel1_changes.$$scope = { dirty, ctx };
    			}

    			tabpanel1.$set(tabpanel1_changes);
    			const tabpanel2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tabpanel2_changes.$$scope = { dirty, ctx };
    			}

    			tabpanel2.$set(tabpanel2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tablist.$$.fragment, local);
    			transition_in(tabpanel0.$$.fragment, local);
    			transition_in(tabpanel1.$$.fragment, local);
    			transition_in(tabpanel2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tablist.$$.fragment, local);
    			transition_out(tabpanel0.$$.fragment, local);
    			transition_out(tabpanel1.$$.fragment, local);
    			transition_out(tabpanel2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tablist, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(tabpanel0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tabpanel1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(tabpanel2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(10:0) <Tabs>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let warning;
    	let t;
    	let tabs;
    	let current;
    	warning = new Warning({ $$inline: true });

    	tabs = new Tabs({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(warning.$$.fragment);
    			t = space();
    			create_component(tabs.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(warning, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(tabs, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const tabs_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				tabs_changes.$$scope = { dirty, ctx };
    			}

    			tabs.$set(tabs_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(warning.$$.fragment, local);
    			transition_in(tabs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(warning.$$.fragment, local);
    			transition_out(tabs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(warning, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(tabs, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Warning,
    		Reports,
    		Topics,
    		Words,
    		Tabs,
    		TabList,
    		TabPanel,
    		Tab
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
